<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="MyNet.Styles.ItemsControl" TargetType="{x:Type ItemsControl}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Contained" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Standard" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True"
                                            IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            Orientation="Vertical"
                                            VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}, Converter={x:Static c:CountToBooleanConverter.NotAny}}" Value="True" />
                    <Condition Binding="{Binding Path=(p:ItemsControlAssist.EmptyTemplate), RelativeSource={RelativeSource Self}, Converter={x:Static c:NullToBooleanConverter.FalseIfNull}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Template" Value="{Binding Path=(p:ItemsControlAssist.EmptyTemplate), RelativeSource={RelativeSource Self}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}, Converter={x:Static c:CountToBooleanConverter.One}}" Value="True" />
                    <Condition Binding="{Binding Path=(p:ItemsControlAssist.SingleTemplate), RelativeSource={RelativeSource Self}, Converter={x:Static c:NullToBooleanConverter.FalseIfNull}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Template" Value="{Binding Path=(p:ItemsControlAssist.SingleTemplate), RelativeSource={RelativeSource Self}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}, Converter={x:Static c:CountToBooleanConverter.Many}}" Value="True" />
                    <Condition Binding="{Binding Path=(p:ItemsControlAssist.ManyTemplate), RelativeSource={RelativeSource Self}, Converter={x:Static c:NullToBooleanConverter.FalseIfNull}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Template" Value="{Binding Path=(p:ItemsControlAssist.ManyTemplate), RelativeSource={RelativeSource Self}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.ItemsControl.Scrollable" BasedOn="{StaticResource MyNet.Styles.ItemsControl}" TargetType="{x:Type ItemsControl}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ctrl:DynamicScrollViewer CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                                  Focusable="False"
                                                  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                                  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </ctrl:DynamicScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>