<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.Card.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate x:Key="MyNet.DataTemplates.Icon.Label">
        <DataTemplate.Resources>
            <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                <Setter Property="Height" Value="18" />
                <Setter Property="Width" Value="18" />
            </Style>
            <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                <Setter Property="Height" Value="18" />
                <Setter Property="Width" Value="18" />
            </Style>
        </DataTemplate.Resources>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Name="Row1" Height="Auto" />
                <RowDefinition Name="Row2" Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Name="Col1" Width="Auto" />
                <ColumnDefinition Name="Col2" Width="*" />
            </Grid.ColumnDefinitions>
            <ContentControl Name="Icon"
                                Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource AncestorType={x:Type Label}}}"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type Label}}}"
                                Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource AncestorType={x:Type Label}}}"
                                Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type Label}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            <ContentControl Name="Content"
                                Grid.Column="1"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Content="{Binding}" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type Label}}}" Value="{x:Static ctrl:Alignment.Left}">
                <Setter TargetName="Content" Property="Grid.Column" Value="1" />
                <Setter TargetName="Content" Property="Grid.Row" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type Label}}}" Value="{x:Static ctrl:Alignment.Top}">
                <Setter TargetName="Col1" Property="Width" Value="*" />
                <Setter TargetName="Col2" Property="Width" Value="Auto" />
                <Setter TargetName="Content" Property="Grid.Column" Value="0" />
                <Setter TargetName="Content" Property="Grid.Row" Value="1" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
                <Setter TargetName="Row1" Property="Height" Value="Auto" />
                <Setter TargetName="Row2" Property="Height" Value="*" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type Label}}}" Value="{x:Static ctrl:Alignment.Right}">
                <Setter TargetName="Col1" Property="Width" Value="*" />
                <Setter TargetName="Col2" Property="Width" Value="Auto" />
                <Setter TargetName="Content" Property="Grid.Column" Value="0" />
                <Setter TargetName="Content" Property="Grid.Row" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="1" />
                <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
                <Setter TargetName="Row1" Property="Height" Value="*" />
                <Setter TargetName="Row2" Property="Height" Value="Auto" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type Label}}}" Value="{x:Static ctrl:Alignment.Bottom}">
                <Setter TargetName="Col1" Property="Width" Value="*" />
                <Setter TargetName="Col2" Property="Width" Value="Auto" />
                <Setter TargetName="Content" Property="Grid.Column" Value="0" />
                <Setter TargetName="Content" Property="Grid.Row" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Row" Value="1" />
                <Setter TargetName="Row1" Property="Height" Value="*" />
                <Setter TargetName="Row2" Property="Height" Value="Auto" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="MyNet.Styles.Label.Elevation" TargetType="{x:Type Label}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="6 3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <ctrl:Card Style="{Binding Path=(p:CardAssist.Style), RelativeSource={RelativeSource TemplatedParent}}"
                               Padding="{TemplateBinding Padding}"
                               p:ElevationAssist.Elevation="{Binding Path=(p:ElevationAssist.Elevation), RelativeSource={RelativeSource TemplatedParent}}"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               UniformCornerRadius="{Binding Path=(p:ThemeAssist.UniformCornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </ctrl:Card>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="p:CardAssist.Style" Value="{StaticResource MyNet.Styles.Card.Elevation}" />
        <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
        <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Control}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Elevation.Application" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Elevation.Application.Light" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Elevation.Application.Dark" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Dark}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Elevation.Primary" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Elevation.Accent" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Elevation.Custom" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation}">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Elevation.Foreground" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation.Custom}">
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <Style x:Key="MyNet.Styles.Label.Outlined" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation}">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="p:CardAssist.Style" Value="{StaticResource MyNet.Styles.Card.Outlined}" />
    </Style>

    <Style x:Key="MyNet.Styles.Label.Rounded.Elevation" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation}">
        <Setter Property="Height" Value="35" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Width" Value="35" />
        <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="100" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Rounded.Elevation.Application" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Elevation}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Rounded.Elevation.Primary" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Elevation}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Rounded.Elevation.Accent" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Elevation}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Rounded.Elevation.Custom" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Elevation}">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Rounded.Elevation.Foreground" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}">
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <Style x:Key="MyNet.Styles.Label.Message" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation.Custom}">
        <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Icon.Label}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Message.Warning" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Message}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Warning}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Warning}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Message.Success" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Message}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Positive}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Check}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Message.Error" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Message}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Negative}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Close}" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.Message.Information" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Message}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=InformationCircle}" />
    </Style>

    <Style x:Key="MyNet.Styles.Label.Legend" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <ctrl:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
                        <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}"
                               Width="18"
                               Height="18"
                               Background="{TemplateBinding Background}" />
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
                    </ctrl:SimpleStackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

</ResourceDictionary>