<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="clr-namespace:MyNet.Wpf.Behaviors"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.TextBlock.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Menu.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.CheckBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.ToolBar.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Button.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.TextBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Thumb.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.NumericUpDown.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.DropDownButton.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.BusyControl.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="MyNet.Styles.Thumb.Embedded.GridViewColumnHeader" TargetType="{x:Type Thumb}" BasedOn="{StaticResource MyNet.Styles.Thumb}">
        <Setter Property="Cursor" Value="SizeWE" />
        <Setter Property="Width" Value="8" />
    </Style>

    <Style x:Key="MyNet.Styles.ListSortDirectionIndicator" TargetType="{x:Type ctrl:ListSortDirectionIndicator}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:ListSortDirectionIndicator}">
                    <Viewbox Margin="0 0 0 0">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="Direction">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" From="None" To="Descending">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="path"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                             To="1"
                                                             Duration="0:0:0.2" />
                                            <DoubleAnimation BeginTime="0:0:0.2"
                                                             Storyboard.TargetName="path"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                                             To="90"
                                                             Duration="0:0:0.2" />
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" From="None" To="Ascending">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="path"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                             To="1"
                                                             Duration="0:0:0.2" />
                                            <DoubleAnimation BeginTime="0:0:0.2"
                                                             Storyboard.TargetName="path"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                                             To="-90"
                                                             Duration="0:0:0.2">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" From="Descending" To="Ascending">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="path"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                             To="1"
                                                             Duration="0">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation Storyboard.TargetName="path"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                                             From="90"
                                                             To="-90"
                                                             Duration="0:0:0.2" />
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" From="Descending" To="None">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="path"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                             To="0"
                                                             Duration="0:0:0.2" />
                                            <DoubleAnimation Storyboard.TargetName="path"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                                             To="90"
                                                             Duration="0" />
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" From="Ascending" To="Descending">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="path"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                                             From="-90"
                                                             To="90"
                                                             Duration="0:0:0.2" />
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" From="Ascending" To="None">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="path"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                                             To="-90"
                                                             Duration="0" />
                                            <DoubleAnimation Storyboard.TargetName="path"
                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                             To="0"
                                                             Duration="0:0:0.2" />
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="None">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Descending">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="90" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Ascending">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="-90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Path x:Name="path"
                              Width="24"
                              Height="24"
                              Data="M4,11V13H16L10.5,18.5L11.92,19.92L19.84,12L11.92,4.08L10.5,5.5L16,11H4Z"
                              Fill="{TemplateBinding Foreground}"
                              RenderTransformOrigin="0.5,0.5"
                              Stretch="Fill">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleY="0" />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Specific Headers -->
    <Style x:Key="MyNet.Styles.DropDownButton.Specials.PresetColumns" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon.Foreground}">
        <Setter Property="PopupContent" Value="{Binding DataContext.Display.Mode.PresetColumns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" />
        <Setter Property="PopupContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ctrl:Submenu ItemsSource="{Binding}">
                        <ctrl:Submenu.ItemContainerStyle>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource MyNet.Styles.MenuItem}">
                                <Setter Property="Command" Value="{Binding DataContext.Display.Mode.SetDisplayedColumnsCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" />
                                <Setter Property="CommandParameter" Value="{Binding Item}" />
                                <Setter Property="Header" Value="{Binding DisplayName.Value}" />
                            </Style>
                        </ctrl:Submenu.ItemContainerStyle>
                    </ctrl:Submenu>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PopupPadding" Value="0" />
        <Setter Property="ShowDropDownButton" Value="False" />
        <Setter Property="ToggleContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ctrl:PackIcon Width="18" Height="18" Kind="EyeCheck" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTip" Value="{me:Resource ShowColumns}" />
        <Setter Property="Visibility" Value="{Binding DataContext.Display.Mode.PresetColumns.Count, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Converter={x:Static c:CountToVisibilityConverter.CollapsedIfNotAny}}" />
    </Style>
    <Style x:Key="MyNet.Styles.DropDownButton.Specials.ColumnsVisibility" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon.Foreground}">
        <Setter Property="PopupContent" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=(p:ListViewAssist.ColumnLayouts)}" />
        <Setter Property="PopupContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ctrl:Submenu ItemsSource="{Binding}">
                        <ctrl:Submenu.ItemContainerStyle>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource MyNet.Styles.MenuItem}">
                                <Setter Property="Header" Value="{Binding Column.Header}" />
                                <Setter Property="IsCheckable" Value="True" />
                                <Setter Property="IsChecked" Value="{Binding IsVisible}" />
                                <Setter Property="StaysOpenOnClick" Value="True" />
                                <Setter Property="Visibility" Value="{Binding CanBeHidden, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                            </Style>
                        </ctrl:Submenu.ItemContainerStyle>
                    </ctrl:Submenu>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PopupPadding" Value="0" />
        <Setter Property="ShowDropDownButton" Value="False" />
        <Setter Property="StaysOpen" Value="True" />
        <Setter Property="ToggleContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ctrl:PackIcon Width="18" Height="18" Kind="DotsVertical" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTip" Value="{me:Resource ShowColumns}" />
    </Style>

    <DataTemplate x:Key="MyNet.DataTemplates.ListView.ColumnsVisibility">
        <ctrl:SimpleStackPanel HorizontalAlignment="Right"
                               VerticalAlignment="Center"
                               Orientation="Horizontal"
                               Spacing="{StaticResource MyNet.Margin.Default}">
            <Button Style="{StaticResource MyNet.Styles.Button.Icon.Foreground}"
                    Command="{Binding DataContext.Display.Mode.ResetCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                    Content="{me:ToolIcon Kind=Restore}"
                    ToolTip="{me:Resource Reset}" />
            <ctrl:DropDownButton Style="{StaticResource MyNet.Styles.DropDownButton.Specials.PresetColumns}" />
            <ctrl:DropDownButton Style="{StaticResource MyNet.Styles.DropDownButton.Specials.ColumnsVisibility}" />
        </ctrl:SimpleStackPanel>
    </DataTemplate>

    <!-- Embedded Controls -->
    <Style x:Key="MyNet.Styles.ComboBox.Embedded.ListView" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
                <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
                <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
                <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.TextBox.Embedded.ListView" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
                <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
                <Setter Property="CaretBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
                <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
                <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.NumericUpDown.Embedded.ListView" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
                <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
                <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
                <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.ColorPicker.Embedded.ListView" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
                <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
                <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
                <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.CheckBox.Embedded.ListView" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
                <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
                <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Header -->
    <Style x:Key="MyNet.Styles.GridViewColumnHeader" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="Height" Value="{Binding FallbackValue=50, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=(p:ListViewAssist.HeaderHeight)}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="1 0" />
        <Setter Property="Opacity" Value="{DynamicResource MyNet.Opacity.Secondary}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(p:DataGridAssist.ColumnHeaderPadding)}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="GoToVisible">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="12" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="GoToHidden">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="12" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <DockPanel>
                        <Thumb x:Name="PART_HeaderGripper"
                               Style="{StaticResource MyNet.Styles.Thumb.Embedded.GridViewColumnHeader}"
                               Margin="0 0 -8 0"
                               DockPanel.Dock="Right"
                               Visibility="{Binding Path=(p:ListViewAssist.AutoResizeIsEnabled), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
                        <Border x:Name="HeaderBorder"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid Background="Transparent">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ctrl:ListSortDirectionIndicator x:Name="SortDirectionIndicator"
                                                                 Grid.Column="0"
                                                                 Width="0"
                                                                 Height="12"
                                                                 Margin="{StaticResource MyNet.Margins.Small.Right}"
                                                                 Focusable="False"
                                                                 IsTabStop="False"
                                                                 ListSortDirection="{Binding Path=(p:GridViewColumnHeaderAssist.SortDirection), FallbackValue={x:Null}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <ContentPresenter x:Name="HeaderContent"
                                                  Grid.Column="1"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="p:GridViewColumnHeaderAssist.CanSort" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Opacity" Value="1" />
                                <Setter Property="Cursor" Value="Hand" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="p:GridViewColumnHeaderAssist.CanSort" Value="False">
                            <Setter Property="Cursor" Value="{x:Null}" />
                            <Setter Property="Opacity" Value="1" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=(p:ListViewAssist.CanSort), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" Value="False">
                            <Setter Property="Cursor" Value="{x:Null}" />
                            <Setter Property="Opacity" Value="1" />
                        </DataTrigger>
                        <Trigger SourceName="SortDirectionIndicator" Property="IsNeutral" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard Name="GoToVisible" Storyboard="{StaticResource GoToVisible}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="GoToVisible" />
                                <BeginStoryboard Storyboard="{StaticResource GoToHidden}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TextBlock.FontWeight" Value="{StaticResource MyNet.Font.Weight.Header}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="p:DataGridAssist.ColumnHeaderPadding" Value="8" />
        <Setter Property="p:GridViewColumnHeaderAssist.SortDirection" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="Role" Value="Floating">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <DockPanel Name="PART_FloatingHeaderCanvas">
                                <Border BorderBrush="{DynamicResource MyNet.Brushes.Primary}" BorderThickness="1" />
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Role" Value="Padding">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <Canvas Name="PART_FloatingHeaderCanvas" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- List View Item -->
    <Style x:Key="MyNet.Styles.ListViewItem" TargetType="{x:Type ListViewItem}">
        <Style.Resources>
            <Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource MyNet.Styles.ToolBar.Tools}">
                <Setter Property="Visibility" Value="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ContextMenu" Value="{Binding Path=(p:ListViewAssist.ItemContextMenu), FallbackValue={x:Null}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="MinHeight" Value="{Binding Path=(p:ListViewAssist.ItemMinHeight), FallbackValue=0, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Margin="{TemplateBinding Margin}"
                            Padding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListViewAssist.ListViewItemPadding)}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            ClipToBounds="{TemplateBinding ClipToBounds}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Selected">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="*" To="SelectedUnfocused">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Selected" To="Unselected">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                             Storyboard.TargetProperty="Opacity"
                                                             To="0"
                                                             Duration="0" />
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Unselected" />
                                <VisualState Name="SelectedUnfocused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Border x:Name="MouseOverBorder" Background="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" />
                            <Border x:Name="SelectedBackgroundBorder" Background="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" />

                            <ctrl:Ripple x:Name="Ripple"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         ContentTemplate="{TemplateBinding ContentTemplate}"
                                         ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                         Feedback="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                                         Focusable="False"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <GridViewRowPresenter.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                                            <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                            <Setter Property="TextWrapping" Value="NoWrap" />
                                        </Style>
                                    </GridViewRowPresenter.Resources>
                                </GridViewRowPresenter>
                            </ctrl:Ripple>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="False">
                            <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Ripple" Property="Feedback" Value="Transparent" />
                            <Setter TargetName="SelectedBackgroundBorder" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverForeground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:ListBoxItemAssist.ShowSelection" Value="{Binding Path=(p:ListBoxItemAssist.ShowSelection), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:ListViewAssist.ListViewItemPadding" Value="0" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverForeground), RelativeSource={RelativeSource Self}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Self}}" />
            </MultiDataTrigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity=0.03}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- List View -->
    <Style x:Key="MyNet.Style.DynamicScrollViewer.Embedded.ListView" TargetType="{x:Type ctrl:DynamicScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:DynamicScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <GridViewHeaderRowPresenter x:Name="PART_GridViewHeaderRowPresenter"
                                                    Grid.ColumnSpan="2"
                                                    AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                                    ClipToBounds="False"
                                                    ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                                    ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                    ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                                    ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                                    ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                                    Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                                                    DockPanel.Dock="Top"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                    Visibility="{Binding Path=(p:ListViewAssist.ShowHeader), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                                Grid.Row="1"
                                                Grid.ColumnSpan="2"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                CanHorizontallyScroll="False"
                                                CanVerticallyScroll="False"
                                                KeyboardNavigation.DirectionalNavigation="Local" />

                        <ctrl:DynamicScrollBar x:Name="PART_HorizontalScrollBar"
                                               Grid.Row="2"
                                               Grid.ColumnSpan="2"
                                               VerticalAlignment="Bottom"
                                               Maximum="{TemplateBinding ScrollableWidth}"
                                               Orientation="Horizontal"
                                               ViewportSize="{TemplateBinding ViewportWidth}"
                                               Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                               Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />

                        <ctrl:DynamicScrollBar x:Name="PART_VerticalScrollBar"
                                               Grid.Row="1"
                                               Grid.Column="1"
                                               HorizontalAlignment="Right"
                                               Maximum="{TemplateBinding ScrollableHeight}"
                                               Orientation="Vertical"
                                               ViewportSize="{TemplateBinding ViewportHeight}"
                                               Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                               Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="{Binding Path=(p:ScrollViewerAssist.IsAutoHideEnabled), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" />
    </Style>

    <Style x:Key="MyNet.Styles.ListView" TargetType="{x:Type ListView}">
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.FontSize)}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListViewItem}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="SelectionMode" Value="Extended" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Grid>
                        <ctrl:DynamicScrollViewer Style="{StaticResource MyNet.Style.DynamicScrollViewer.Embedded.ListView}"
                                                  CanContentScroll="{Binding Path=(ScrollViewer.CanContentScroll), RelativeSource={RelativeSource TemplatedParent}}"
                                                  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                                  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ctrl:DynamicScrollViewer>
                        <Grid p:BusyAssist.AttachService="{Binding Path=(b:ItemsControlAsyncBehavior.BusyService), RelativeSource={RelativeSource TemplatedParent}}" p:BusyAssist.Style="{StaticResource MyNet.Styles.BusyControl.Dark.Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="p:ListViewAssist.AutoResizeIsEnabled" Value="True" />
        <Setter Property="p:ListViewAssist.CanSort" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.ListView.Accent" TargetType="{x:Type ListView}" BasedOn="{StaticResource MyNet.Styles.ListView}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListView.Foreground" TargetType="{x:Type ListView}" BasedOn="{StaticResource MyNet.Styles.ListView}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListView.Small" TargetType="{x:Type ListView}" BasedOn="{StaticResource MyNet.Styles.ListView}">
        <Setter Property="p:ListViewAssist.HeaderHeight" Value="35" />
    </Style>
</ResourceDictionary>