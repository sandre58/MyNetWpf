<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <sys:Double x:Key="FallBackValueZero">0</sys:Double>
    <Style x:Key="MyNet.Styles.RepeatButton.Embedded.Slider" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="MyNet.Templates.Thumb.Embedded.Slider" TargetType="{x:Type Thumb}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="ShowFocusVisualStoryboard">
                <DoubleAnimation Storyboard.TargetName="focusedHalo"
                                 Storyboard.TargetProperty="Opacity"
                                 To="0.15"
                                 Duration="0" />
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HideFocusVisualStoryboard">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity">
                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0.15" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Duration="0">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Duration="0">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid x:Name="thumbGrid" Width="18" Height="20">
            <Ellipse x:Name="halo"
                     Width="48"
                     Height="48"
                     Margin="-24"
                     Fill="{TemplateBinding Foreground}"
                     Opacity="0" />
            <Ellipse x:Name="focusedHalo"
                     Width="48"
                     Height="48"
                     Margin="-24"
                     Fill="{TemplateBinding Foreground}"
                     Opacity="{StaticResource MyNet.Opacity.Filled}"
                     RenderTransformOrigin="0.5,0.5">
                <Ellipse.RenderTransform>
                    <ScaleTransform ScaleX="0" ScaleY="0" />
                </Ellipse.RenderTransform>
            </Ellipse>
            <AdornerDecorator>
                <AdornerDecorator.CacheMode>
                    <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </AdornerDecorator.CacheMode>
                <Ellipse x:Name="grip"
                         Margin="-1 0"
                         Effect="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=RangeBase}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}"
                         Fill="{TemplateBinding Foreground}" />
            </AdornerDecorator>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType=RangeBase}}" Value="{x:Static Orientation.Vertical}">
                <Setter TargetName="grip" Property="Margin" Value="0 -1" />
                <Setter TargetName="thumbGrid" Property="Height" Value="18" />
                <Setter TargetName="thumbGrid" Property="Width" Value="20" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="halo"
                                             Storyboard.TargetProperty="Opacity"
                                             To="{StaticResource MyNet.Opacity.Hovered}"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="halo"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
                        <Binding Path="IsFocused" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
                        <Binding Converter="{x:Static c:NotBooleanConverter.Default}" Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
                    </MultiBinding>
                </DataTrigger.Binding>
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
                </DataTrigger.ExitActions>
            </DataTrigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
                        <!--<Binding Path="IsDragging" RelativeSource="{RelativeSource TemplatedParent}" />-->
                        <Binding Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
                    </MultiBinding>
                </DataTrigger.Binding>
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
                </DataTrigger.ExitActions>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="MyNet.Templates.Thumb.Embedded.Slider.Discrete" TargetType="{x:Type Thumb}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="ShowFocusVisualStoryboard">
                <DoubleAnimation Storyboard.TargetName="focusedHalo"
                                 Storyboard.TargetProperty="Opacity"
                                 To="{StaticResource MyNet.Opacity.Filled}"
                                 Duration="0" />
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="Visibility" Duration="0">
                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                </ObjectAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HideFocusVisualStoryboard">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity">
                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="{StaticResource MyNet.Opacity.Filled}" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Duration="0">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Duration="0">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="Visibility" Duration="0">
                    <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}" />
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid Width="18" Height="20">
            <Ellipse x:Name="halo"
                     Width="48"
                     Height="48"
                     Margin="-24"
                     Fill="{TemplateBinding Foreground}"
                     Opacity="0" />
            <Ellipse x:Name="focusedHalo"
                     Width="48"
                     Height="48"
                     Margin="-24"
                     Fill="{TemplateBinding Foreground}"
                     Opacity="{StaticResource MyNet.Opacity.Filled}"
                     RenderTransformOrigin="0.5,0.5">
                <Ellipse.RenderTransform>
                    <ScaleTransform ScaleX="0" ScaleY="0" />
                </Ellipse.RenderTransform>
            </Ellipse>
            <Canvas>
                <Grid x:Name="label"
                      Height="36"
                      IsHitTestVisible="False"
                      RenderTransformOrigin="0.5,1"
                      Visibility="Collapsed">
                    <Grid.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="0" ScaleY="0" />
                            <TranslateTransform X="{Binding ActualWidth, FallbackValue={StaticResource FallBackValueZero}, ElementName=label, Converter={x:Static c:SliderValueLabelPositionConverter.Default}, ConverterParameter={x:Static Orientation.Horizontal}}" Y="-40" />
                        </TransformGroup>
                    </Grid.RenderTransform>
                    <AdornerDecorator>
                        <AdornerDecorator.CacheMode>
                            <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </AdornerDecorator.CacheMode>
                        <Grid Effect="{Binding Source={StaticResource MyNet.Elevation.Popup}, Converter={x:Static c:ShadowConverter.Default}}">
                            <Rectangle Margin="0 0 0 5"
                                       Fill="{DynamicResource MyNet.Brushes.Popup.Background}"
                                       RadiusX="{StaticResource MyNet.UniformCornerRadius.Container}"
                                       RadiusY="{StaticResource MyNet.UniformCornerRadius.Container}" />
                            <Polygon HorizontalAlignment="Center"
                                     VerticalAlignment="Bottom"
                                     Fill="{DynamicResource MyNet.Brushes.Popup.Background}"
                                     Points="0,0 4.5,5 9,0" />
                        </Grid>
                    </AdornerDecorator>
                    <TextBlock Margin="12 0 12 5"
                               VerticalAlignment="Center"
                               Foreground="{DynamicResource MyNet.Brushes.Application.Foreground}"
                               TextAlignment="Center">
                        <TextBlock.Text>
                            <MultiBinding Converter="{x:Static c:SliderToolTipConverter.Default}"
                                          NotifyOnValidationError="True"
                                          TargetNullValue=""
                                          ValidatesOnDataErrors="True">
                                <Binding Path="Value" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" TargetNullValue="" />
                                <Binding Path="(p:SliderAssist.ToolTipFormat)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </Grid>
            </Canvas>
            <AdornerDecorator>
                <AdornerDecorator.CacheMode>
                    <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </AdornerDecorator.CacheMode>
                <Ellipse x:Name="grip"
                         Margin="-1 0"
                         Effect="{Binding Source={StaticResource MyNet.Elevation.Popup}, Converter={x:Static c:ShadowConverter.Default}}"
                         Fill="{TemplateBinding Foreground}" />
            </AdornerDecorator>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="halo"
                                             Storyboard.TargetProperty="Opacity"
                                             To="{StaticResource MyNet.Opacity.Hovered}"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="halo"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
                        <Binding Path="IsFocused" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
                        <Binding Converter="{x:Static c:NotBooleanConverter.Default}" Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
                    </MultiBinding>
                </DataTrigger.Binding>
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
                </DataTrigger.ExitActions>
            </DataTrigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
                        <Binding Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
                    </MultiBinding>
                </DataTrigger.Binding>
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
                </DataTrigger.ExitActions>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="MyNet.Templates.Thumb.Embedded.Slider.Discrete.Left" TargetType="{x:Type Thumb}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="ShowFocusVisualStoryboard">
                <DoubleAnimation Storyboard.TargetName="focusedHalo"
                                 Storyboard.TargetProperty="Opacity"
                                 To="{StaticResource MyNet.Opacity.Filled}"
                                 Duration="0" />
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="Visibility" Duration="0">
                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                </ObjectAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HideFocusVisualStoryboard">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity">
                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="{StaticResource MyNet.Opacity.Filled}" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Duration="0">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Duration="0">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="Visibility" Duration="0">
                    <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}" />
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid Width="20" Height="18">
            <Ellipse x:Name="halo"
                     Width="48"
                     Height="48"
                     Margin="-24"
                     Fill="{TemplateBinding Foreground}"
                     Opacity="0" />
            <Ellipse x:Name="focusedHalo"
                     Width="48"
                     Height="48"
                     Margin="-24"
                     Fill="{TemplateBinding Foreground}"
                     Opacity="{StaticResource MyNet.Opacity.Filled}"
                     RenderTransformOrigin="0.5,0.5">
                <Ellipse.RenderTransform>
                    <ScaleTransform ScaleX="0" ScaleY="0" />
                </Ellipse.RenderTransform>
            </Ellipse>
            <Canvas>
                <Grid x:Name="label"
                      Height="31"
                      IsHitTestVisible="False"
                      RenderTransformOrigin="1,0.5"
                      Visibility="Collapsed">
                    <Grid.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="0" ScaleY="0" />
                            <TranslateTransform X="{Binding ActualWidth, ElementName=label, Converter={x:Static c:SliderValueLabelPositionConverter.Default}, ConverterParameter={x:Static Orientation.Vertical}}" Y="-7" />
                        </TransformGroup>
                    </Grid.RenderTransform>
                    <AdornerDecorator>
                        <AdornerDecorator.CacheMode>
                            <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </AdornerDecorator.CacheMode>
                        <Grid Effect="{Binding Source={StaticResource MyNet.Elevation.Popup}, Converter={x:Static c:ShadowConverter.Default}}">
                            <Rectangle Margin="0 0 5 0"
                                       Fill="{DynamicResource MyNet.Brushes.Popup.Background}"
                                       RadiusX="{StaticResource MyNet.UniformCornerRadius.Container}"
                                       RadiusY="{StaticResource MyNet.UniformCornerRadius.Container}" />
                            <Polygon HorizontalAlignment="Right"
                                     VerticalAlignment="Center"
                                     Fill="{DynamicResource MyNet.Brushes.Popup.Background}"
                                     Points="0,0 6,5 0,10" />
                        </Grid>
                    </AdornerDecorator>
                    <TextBlock Margin="12 0 17 0"
                               VerticalAlignment="Center"
                               Foreground="{DynamicResource MyNet.Brushes.Application.Foreground}"
                               TextAlignment="Center">
                        <TextBlock.Text>
                            <MultiBinding Converter="{x:Static c:SliderToolTipConverter.Default}"
                                          NotifyOnValidationError="True"
                                          TargetNullValue=""
                                          ValidatesOnDataErrors="True">
                                <Binding Path="Value" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" TargetNullValue="" />
                                <Binding Path="(p:SliderAssist.ToolTipFormat)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </Grid>
            </Canvas>
            <AdornerDecorator>
                <AdornerDecorator.CacheMode>
                    <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </AdornerDecorator.CacheMode>
                <Ellipse x:Name="grip"
                         Margin="0 -1"
                         Effect="{Binding Source={StaticResource MyNet.Elevation.Popup}, Converter={x:Static c:ShadowConverter.Default}}"
                         Fill="{TemplateBinding Foreground}" />
            </AdornerDecorator>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="halo"
                                             Storyboard.TargetProperty="Opacity"
                                             To="{StaticResource MyNet.Opacity.Hovered}"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="halo"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
                        <Binding Path="IsFocused" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
                        <Binding Converter="{x:Static c:NotBooleanConverter.Default}" Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
                    </MultiBinding>
                </DataTrigger.Binding>
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
                </DataTrigger.ExitActions>
            </DataTrigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
                        <!--<Binding Path="IsDragging" RelativeSource="{RelativeSource TemplatedParent}" />-->
                        <Binding Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
                    </MultiBinding>
                </DataTrigger.Binding>
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
                </DataTrigger.ExitActions>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="MyNet.Templates.Slider.Horizontal" TargetType="{x:Type Slider}">
        <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TickBar x:Name="TopTick"
                     Grid.Row="0"
                     Height="4"
                     Margin="0 0 0 2"
                     Fill="{TemplateBinding BorderBrush}"
                     Placement="Top"
                     Visibility="Collapsed" />
            <TickBar x:Name="BottomTick"
                     Grid.Row="2"
                     Height="4"
                     Margin="0 2 0 0"
                     Fill="{TemplateBinding BorderBrush}"
                     Placement="Bottom"
                     Visibility="Collapsed" />
            <Rectangle Grid.Row="1"
                       Height="{TemplateBinding p:SliderAssist.BarSize}"
                       VerticalAlignment="Center"
                       Fill="{DynamicResource MyNet.Brushes.Transparency.Small}"
                       RadiusX="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       RadiusY="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       Visibility="{Binding Path=(p:SliderAssist.ShowTransparencyBackground), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <Rectangle Grid.Row="1"
                       Height="{TemplateBinding p:SliderAssist.BarSize}"
                       VerticalAlignment="Center"
                       Fill="{TemplateBinding Background}"
                       RadiusX="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       RadiusY="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}" />
            <Border x:Name="activeTrack"
                    Grid.Row="1"
                    Width="{Binding DecreaseRepeatButton.ActualWidth, ElementName=PART_Track}"
                    Height="{TemplateBinding p:SliderAssist.ActiveBarSize}"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Background="{TemplateBinding Foreground}"
                    CornerRadius="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Left}}" />
            <!--  Selection range must be wrapped in a Canvas for the position to be updated correctly  -->
            <Canvas Grid.Row="1" Height="6" VerticalAlignment="Center">
                <Rectangle x:Name="PART_SelectionRange"
                           Height="{TemplateBinding p:SliderAssist.ActiveBarSize}"
                           Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                           RadiusX="{TemplateBinding p:SliderAssist.ActiveBarSize,
                                                     Converter={x:Static c:MathConverter.Divide},
                                                     ConverterParameter=2}"
                           RadiusY="{TemplateBinding p:SliderAssist.ActiveBarSize,
                                                     Converter={x:Static c:MathConverter.Divide},
                                                     ConverterParameter=2}"
                           Visibility="Collapsed" />
            </Canvas>
            <Track x:Name="PART_Track" Grid.Row="1" Height="20">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.DecreaseLarge}" />
                </Track.DecreaseRepeatButton>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.IncreaseLarge}" />
                </Track.IncreaseRepeatButton>
                <!--  It's important that the Thumb gets added last in the XAML to make sure it is drawn on top of both repeat buttons  -->
                <Track.Thumb>
                    <Thumb Foreground="{TemplateBinding p:SliderAssist.ThumbBackground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Template="{StaticResource MyNet.Templates.Thumb.Embedded.Slider}" />
                </Track.Thumb>
            </Track>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsDirectionReversed" Value="True">
                <Setter TargetName="activeTrack" Property="CornerRadius" Value="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Right}}" />
                <Setter TargetName="activeTrack" Property="HorizontalAlignment" Value="Right" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="MyNet.Templates.Slider.Vertical" TargetType="{x:Type Slider}">
        <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TickBar x:Name="TopTick"
                     Grid.Column="0"
                     Width="4"
                     Margin="0 0 2 0"
                     Fill="{TemplateBinding BorderBrush}"
                     Placement="Left"
                     Visibility="Collapsed" />
            <TickBar x:Name="BottomTick"
                     Grid.Column="2"
                     Width="4"
                     Margin="2 0 0 0"
                     Fill="{TemplateBinding BorderBrush}"
                     Placement="Right"
                     Visibility="Collapsed" />
            <Rectangle Grid.Column="1"
                       Width="{TemplateBinding p:SliderAssist.BarSize}"
                       HorizontalAlignment="Center"
                       Fill="{DynamicResource MyNet.Brushes.Transparency.Small}"
                       RadiusX="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       RadiusY="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       Visibility="{Binding Path=(p:SliderAssist.ShowTransparencyBackground), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <Rectangle Grid.Column="1"
                       Width="{TemplateBinding p:SliderAssist.BarSize}"
                       HorizontalAlignment="Center"
                       Fill="{TemplateBinding Background}"
                       RadiusX="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       RadiusY="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}" />
            <Border x:Name="activeTrack"
                    Grid.Column="1"
                    Width="{TemplateBinding p:SliderAssist.ActiveBarSize}"
                    Height="{Binding DecreaseRepeatButton.ActualHeight, ElementName=PART_Track}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Bottom"
                    Background="{TemplateBinding Foreground}"
                    CornerRadius="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Bottom}}" />
            <!--  Selection range must be wrapped in a Canvas for the position to be updated correctly  -->
            <Canvas Grid.Column="1" Width="6" HorizontalAlignment="Center">
                <Rectangle x:Name="PART_SelectionRange"
                           Width="{TemplateBinding p:SliderAssist.ActiveBarSize}"
                           Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                           RadiusX="{TemplateBinding p:SliderAssist.ActiveBarSize,
                                                     Converter={x:Static c:MathConverter.Divide},
                                                     ConverterParameter=2}"
                           RadiusY="{TemplateBinding p:SliderAssist.ActiveBarSize,
                                                     Converter={x:Static c:MathConverter.Divide},
                                                     ConverterParameter=2}"
                           Visibility="Collapsed" />
            </Canvas>
            <Track x:Name="PART_Track" Grid.Column="1" Width="20">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.DecreaseLarge}" />
                </Track.DecreaseRepeatButton>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.IncreaseLarge}" />
                </Track.IncreaseRepeatButton>
                <!--  It's important that the Thumb gets added last in the XAML to make sure it is drawn on top of both repeat buttons  -->
                <Track.Thumb>
                    <Thumb Foreground="{TemplateBinding p:SliderAssist.ThumbBackground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Template="{StaticResource MyNet.Templates.Thumb.Embedded.Slider}" />
                </Track.Thumb>
            </Track>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsDirectionReversed" Value="True">
                <Setter TargetName="activeTrack" Property="CornerRadius" Value="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Top}}" />
                <Setter TargetName="activeTrack" Property="VerticalAlignment" Value="Top" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="MyNet.Templates.Slider.Discrete.Horizontal" TargetType="{x:Type Slider}">
        <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TickBar x:Name="TopTick"
                     Grid.Row="0"
                     Height="4"
                     Margin="0 0 0 2"
                     Fill="{TemplateBinding BorderBrush}"
                     Placement="Top"
                     Visibility="Collapsed" />
            <TickBar x:Name="BottomTick"
                     Grid.Row="2"
                     Height="4"
                     Margin="0 2 0 0"
                     Fill="{TemplateBinding BorderBrush}"
                     Placement="Bottom"
                     Visibility="Collapsed" />
            <Rectangle Grid.Row="1"
                       Height="{TemplateBinding p:SliderAssist.BarSize}"
                       VerticalAlignment="Center"
                       Fill="{DynamicResource MyNet.Brushes.Transparency.Small}"
                       RadiusX="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       RadiusY="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       Visibility="{Binding Path=(p:SliderAssist.ShowTransparencyBackground), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <Rectangle Grid.Row="1"
                       Height="{TemplateBinding p:SliderAssist.BarSize}"
                       VerticalAlignment="Center"
                       Fill="{TemplateBinding Background}"
                       RadiusX="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       RadiusY="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}" />
            <Border x:Name="activeTrack"
                    Grid.Row="1"
                    Width="{Binding DecreaseRepeatButton.ActualWidth, ElementName=PART_Track}"
                    Height="{TemplateBinding p:SliderAssist.ActiveBarSize}"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Background="{TemplateBinding Foreground}"
                    CornerRadius="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Left}}" />
            <!--  Selection range must be wrapped in a Canvas for the position to be updated correctly  -->
            <Canvas Grid.Row="1" Height="6" VerticalAlignment="Center">
                <Rectangle x:Name="PART_SelectionRange"
                           Height="{TemplateBinding p:SliderAssist.ActiveBarSize}"
                           Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                           RadiusX="{TemplateBinding p:SliderAssist.ActiveBarSize,
                                                     Converter={x:Static c:MathConverter.Divide},
                                                     ConverterParameter=2}"
                           RadiusY="{TemplateBinding p:SliderAssist.ActiveBarSize,
                                                     Converter={x:Static c:MathConverter.Divide},
                                                     ConverterParameter=2}"
                           Visibility="Collapsed" />
            </Canvas>
            <Track x:Name="PART_Track" Grid.Row="1" Height="20">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.DecreaseLarge}" />
                </Track.DecreaseRepeatButton>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.IncreaseLarge}" />
                </Track.IncreaseRepeatButton>
                <!--  It's important that the Thumb gets added last in the XAML to make sure it is drawn on top of both repeat buttons  -->
                <Track.Thumb>
                    <Thumb Foreground="{TemplateBinding p:SliderAssist.ThumbBackground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Template="{StaticResource MyNet.Templates.Thumb.Embedded.Slider.Discrete}" />
                </Track.Thumb>
            </Track>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsDirectionReversed" Value="True">
                <Setter TargetName="activeTrack" Property="CornerRadius" Value="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Right}}" />
                <Setter TargetName="activeTrack" Property="HorizontalAlignment" Value="Right" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="MyNet.Templates.Slider.Discrete.Vertical" TargetType="{x:Type Slider}">
        <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TickBar x:Name="TopTick"
                     Grid.Column="0"
                     Width="4"
                     Margin="0 0 2 0"
                     Fill="{TemplateBinding BorderBrush}"
                     Placement="Left"
                     Visibility="Collapsed" />
            <TickBar x:Name="BottomTick"
                     Grid.Column="2"
                     Width="4"
                     Margin="2 0 0 0"
                     Fill="{TemplateBinding BorderBrush}"
                     Placement="Right"
                     Visibility="Collapsed" />
            <Rectangle Grid.Column="1"
                       Width="{TemplateBinding p:SliderAssist.BarSize}"
                       HorizontalAlignment="Center"
                       Fill="{DynamicResource MyNet.Brushes.Transparency.Small}"
                       RadiusX="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       RadiusY="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       Visibility="{Binding Path=(p:SliderAssist.ShowTransparencyBackground), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <Rectangle Grid.Column="1"
                       Width="{TemplateBinding p:SliderAssist.BarSize}"
                       HorizontalAlignment="Center"
                       Fill="{TemplateBinding Background}"
                       RadiusX="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}"
                       RadiusY="{TemplateBinding p:SliderAssist.BarSize,
                                                 Converter={x:Static c:MathConverter.Divide},
                                                 ConverterParameter=2}" />
            <Border x:Name="activeTrack"
                    Grid.Column="1"
                    Width="{TemplateBinding p:SliderAssist.ActiveBarSize}"
                    Height="{Binding DecreaseRepeatButton.ActualHeight, ElementName=PART_Track}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Bottom"
                    Background="{TemplateBinding Foreground}"
                    CornerRadius="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Bottom}}" />
            <!--  Selection range must be wrapped in a Canvas for the position to be updated correctly  -->
            <Canvas Grid.Column="1" Width="6" HorizontalAlignment="Center">
                <Rectangle x:Name="PART_SelectionRange"
                           Width="{TemplateBinding p:SliderAssist.ActiveBarSize}"
                           Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                           RadiusX="{TemplateBinding p:SliderAssist.ActiveBarSize,
                                                     Converter={x:Static c:MathConverter.Divide},
                                                     ConverterParameter=2}"
                           RadiusY="{TemplateBinding p:SliderAssist.ActiveBarSize,
                                                     Converter={x:Static c:MathConverter.Divide},
                                                     ConverterParameter=2}"
                           Visibility="Collapsed" />
            </Canvas>
            <Track x:Name="PART_Track" Grid.Column="1" Width="20">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.DecreaseLarge}" />
                </Track.DecreaseRepeatButton>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.IncreaseLarge}" />
                </Track.IncreaseRepeatButton>
                <!--  It's important that the Thumb gets added last in the XAML to make sure it is drawn on top of both repeat buttons  -->
                <Track.Thumb>
                    <Thumb Foreground="{TemplateBinding p:SliderAssist.ThumbBackground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Template="{StaticResource MyNet.Templates.Thumb.Embedded.Slider.Discrete.Left}" />
                </Track.Thumb>
            </Track>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsDirectionReversed" Value="True">
                <Setter TargetName="activeTrack" Property="CornerRadius" Value="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Top}}" />
                <Setter TargetName="activeTrack" Property="VerticalAlignment" Value="Top" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MyNet.Styles.Slider" TargetType="{x:Type Slider}">
        <Setter Property="Interval" Value="5" />
        <Setter Property="SmallChange" Value="1" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:SliderAssist.ThumbBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="IsMoveToPointEnabled" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.Slider.Horizontal}" />
        <Setter Property="UseLayoutRounding" Value="False" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource MyNet.Templates.Slider.Vertical}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.Slider.Discrete" BasedOn="{StaticResource MyNet.Styles.Slider}" TargetType="{x:Type Slider}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Template" Value="{StaticResource MyNet.Templates.Slider.Discrete.Horizontal}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource MyNet.Templates.Slider.Discrete.Vertical}" />
            </Trigger>
            <Trigger Property="p:SliderAssist.OnlyShowFocusVisualWhileDragging" Value="False">
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.Slider.Colors.Hue" BasedOn="{StaticResource MyNet.Styles.Slider.Discrete}" TargetType="{x:Type Slider}">
        <Setter Property="p:SliderAssist.BarSize" Value="6.0" />
        <Setter Property="p:SliderAssist.ActiveBarSize" Value="{Binding Path=(p:SliderAssist.BarSize), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                    <GradientStop Offset="0.00000000000000000" Color="#FFFF0000" />
                    <GradientStop Offset="0.16666666666666666" Color="#FFFFFF00" />
                    <GradientStop Offset="0.33333333333333333" Color="#FF00FF00" />
                    <GradientStop Offset="0.50000000000000000" Color="#FF00FFFF" />
                    <GradientStop Offset="0.66666666666666666" Color="#FF0000FF" />
                    <GradientStop Offset="0.83333333333333333" Color="#FFFF00FF" />
                    <GradientStop Offset="1.00000000000000000" Color="#FFFF0000" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="Transparent" />
        <Setter Property="p:SliderAssist.ThumbBackground">
            <Setter.Value>
                <MultiBinding Converter="{x:Static c:HSVToSolidBrushConverter.Default}">
                    <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                    <Binding Source="1.0" />
                    <Binding Source="1.0" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Maximum" Value="360" />
        <Setter Property="Minimum" Value="0" />
        <Setter Property="IsMoveToPointEnabled" Value="True" />
        <Setter Property="IsSnapToTickEnabled" Value="True" />
        <Setter Property="TickFrequency" Value="1" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Offset="0.00000000000000000" Color="#FFFF0000" />
                            <GradientStop Offset="0.16666666666666666" Color="#FFFF00FF" />
                            <GradientStop Offset="0.33333333333333333" Color="#FF0000FF" />
                            <GradientStop Offset="0.50000000000000000" Color="#FF00FFFF" />
                            <GradientStop Offset="0.66666666666666666" Color="#FF00FF00" />
                            <GradientStop Offset="0.83333333333333333" Color="#FFFFFF00" />
                            <GradientStop Offset="1.00000000000000000" Color="#FFFF0000" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.Slider.Colors.Saturation" BasedOn="{StaticResource MyNet.Styles.Slider.Colors.Hue}" TargetType="{x:Type Slider}">
        <Setter Property="Background">
            <Setter.Value>
                <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.Saturation}">
                    <Binding Source="255" />
                    <Binding Source="1.0" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="LargeChange" Value="0.05" />
        <Setter Property="Maximum" Value="1" />
        <Setter Property="Minimum" Value="0" />
        <Setter Property="SmallChange" Value="0.01" />
        <Setter Property="TickFrequency" Value="0.01" />
        <Setter Property="p:SliderAssist.ThumbBackground">
            <Setter.Value>
                <MultiBinding Converter="{x:Static c:HSVToSolidBrushConverter.Default}">
                    <Binding Source="255" />
                    <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                    <Binding Source="1.0" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Background">
                    <Setter.Value>
                        <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.Saturation}">
                            <Binding Source="255" />
                            <Binding Source="1.0" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.Slider.Colors.Value" BasedOn="{StaticResource MyNet.Styles.Slider.Colors.Saturation}" TargetType="{x:Type Slider}">
        <Setter Property="Background">
            <Setter.Value>
                <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.Value}">
                    <Binding Source="255" />
                    <Binding Source="1.0" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="p:SliderAssist.ThumbBackground">
            <Setter.Value>
                <MultiBinding Converter="{x:Static c:HSVToSolidBrushConverter.Default}">
                    <Binding Source="255" />
                    <Binding Source="1.0" />
                    <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Background">
                    <Setter.Value>
                        <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.ValueVertical}">
                            <Binding Source="255" />
                            <Binding Source="1.0" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.Slider.Colors.ARGB" BasedOn="{StaticResource MyNet.Styles.Slider.Colors.Hue}" TargetType="{x:Type Slider}">
        <Setter Property="Maximum" Value="255" />
        <Setter Property="Minimum" Value="0" />
        <Setter Property="p:SliderAssist.ShowTransparencyBackground" Value="True" />
        <Setter Property="Background">
            <Setter.Value>
                <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.Red}">
                    <Binding Source="123" />
                    <Binding Source="234" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="Transparent" />
        <Setter Property="p:SliderAssist.ThumbBackground">
            <Setter.Value>
                <MultiBinding Converter="{x:Static c:RGBAToSolidBrushConverter.Default}">
                    <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                    <Binding Source="123" />
                    <Binding Source="234" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Background">
                    <Setter.Value>
                        <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.RedVertical}">
                            <Binding Source="123" />
                            <Binding Source="234" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>