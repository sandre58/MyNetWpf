<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.ContentControl.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.TextBlock.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.DatePicker.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.CheckBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.ComboBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.TextBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Thumb.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.FocusVisualStyle.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.NumericUpDown.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="MyNet.Styles.Thumb.Embedded.GridRowHeader" BasedOn="{StaticResource MyNet.Styles.Thumb}" TargetType="{x:Type Thumb}">
        <Setter Property="Cursor" Value="SizeNS" />
        <Setter Property="Height" Value="8" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="MyNet.Styles.Thumb.Embedded.GridColumnHeader" BasedOn="{StaticResource MyNet.Styles.Thumb}" TargetType="{x:Type Thumb}">
        <Setter Property="Cursor" Value="SizeWE" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Width" Value="8" />
    </Style>

    <!--  Embedded controls  -->
    <Style x:Key="MyNet.Styles.CheckBox.Embedded.DataGrid" BasedOn="{StaticResource MyNet.Styles.CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridCell}}}" Value="True">
                <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.Embedded.DataGrid.Edition" BasedOn="{StaticResource MyNet.Styles.CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <Style x:Key="MyNet.Styles.TextBlock.Embedded.DataGrid" BasedOn="{StaticResource MyNet.Styles.TextBlock}" TargetType="{x:Type TextBlock}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Border Margin="-1 0 -1 -4"
                            Padding="1 0 1 2"
                            BorderBrush="{DynamicResource MyNet.Brushes.Validation.Error}"
                            BorderThickness="0 0 0 2">
                        <AdornedElementPlaceholder />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.ContentControl.Embedded.DataGrid" BasedOn="{StaticResource MyNet.Styles.ContentControl}" TargetType="{x:Type ContentControl}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Border Margin="-1 0 -1 -4"
                            Padding="1 0 1 2"
                            BorderBrush="{DynamicResource MyNet.Brushes.Validation.Error}"
                            BorderThickness="0 0 0 2">
                        <AdornedElementPlaceholder />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{me:Translation}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.TextBox.Embedded.DataGrid.Edition" BasedOn="{StaticResource MyNet.Styles.TextBox.Foreground}" TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="-1 0 -1 -2" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
    </Style>

    <Style x:Key="MyNet.Styles.DatePicker.Embedded.DataGrid.Edition" BasedOn="{StaticResource MyNet.Styles.DatePicker.Foreground}" TargetType="{x:Type DatePicker}">
        <Setter Property="Margin" Value="-1 0 -1 -2" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
    </Style>

    <Style x:Key="MyNet.Styles.TimePicker.Embedded.DataGrid.Edition" BasedOn="{StaticResource MyNet.Styles.TimePicker.Foreground}" TargetType="{x:Type ctrl:TimePicker}">
        <Setter Property="Margin" Value="-1 0 -1 -2" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
    </Style>

    <Style x:Key="MyNet.Styles.ColorPicker.Embedded.DataGrid.Edition" BasedOn="{StaticResource MyNet.Styles.ColorPicker.Foreground}" TargetType="{x:Type ctrl:ColorPicker}">
        <Setter Property="Margin" Value="-1 0 -1 -2" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
    </Style>

    <Style x:Key="MyNet.Styles.NumericUpDown.Embedded.DataGrid.Edition" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.Foreground}" TargetType="{x:Type ctrl:NumericUpDown}">
        <Setter Property="Margin" Value="-1 0 -1 -2" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
    </Style>

    <Style x:Key="MyNet.Styles.ContentControl.Embedded.DataGrid.Color" TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ctrl:SimpleStackPanel VerticalAlignment="Center" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
                        <Grid Width="14"
                              Height="14"
                              VerticalAlignment="Center"
                              Visibility="{Binding Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                            <Border Margin="2"
                                    Background="{DynamicResource MyNet.Brushes.Transparency.Small}"
                                    CornerRadius="2"
                                    Effect="{StaticResource MyNet.Shadows.Elevation1}">
                                <Border Background="{Binding Converter={x:Static c:ColorToBrushConverter.Default}}" CornerRadius="2" />
                            </Border>
                        </Grid>
                        <TextBlock IsHitTestVisible="False" Text="{Binding}" />
                    </ctrl:SimpleStackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.ComboBox.Embedded.DataGrid" TargetType="{x:Type ComboBox}">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <TextBlock IsHitTestVisible="False" Text="{TemplateBinding Text}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.ComboBox.Embedded.DataGrid.Edition" BasedOn="{StaticResource MyNet.Styles.ComboBox.Foreground}" TargetType="{x:Type ComboBox}">
        <Setter Property="Margin" Value="-1 0 -1 -2" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
    </Style>

    <!--  Headers  -->
    <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="Border" SnapsToDevicePixels="True">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource MyNet.Colors.Control.Background}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <Polygon x:Name="Arrow"
                                 Margin="8 8 3 3"
                                 HorizontalAlignment="Right"
                                 VerticalAlignment="Bottom"
                                 Points="0,10 10,10 10,0"
                                 Stretch="Uniform">
                            <Polygon.Fill>
                                <SolidColorBrush Opacity="{StaticResource MyNet.Opacity.Medium}" Color="{DynamicResource MyNet.Colors.Application.Foreground}" />
                            </Polygon.Fill>
                        </Polygon>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="{StaticResource MyNet.Opacity.Medium}" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.DataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextBlock.FontWeight" Value="{StaticResource MyNet.Font.Weight.Header}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="p:DataGridAssist.ColumnHeaderPadding" Value="8 15" />
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(p:DataGridAssist.ColumnHeaderPadding)}" />
        <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="Opacity" Value="{DynamicResource MyNet.Opacity.Secondary}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="GoToVisible">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="12" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="GoToHidden">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="12" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Grid Background="Transparent">
                        <Border x:Name="HeaderBorder"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ctrl:ListSortDirectionIndicator x:Name="SortDirectionIndicator"
                                                                 Grid.Column="0"
                                                                 Width="0"
                                                                 Height="12"
                                                                 Margin="{StaticResource MyNet.Margins.Small.Right}"
                                                                 Focusable="False"
                                                                 IsTabStop="False"
                                                                 ListSortDirection="{TemplateBinding SortDirection}"
                                                                 Visibility="{Binding CanUserSortColumns, RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                                <ContentPresenter x:Name="HeaderContent"
                                                  Grid.Column="1"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                    <ContentPresenter.Resources>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="TextTrimming" Value="WordEllipsis" />
                                            <Setter Property="p:TextBlockAssist.AutoToolTip" Value="True" />
                                        </Style>
                                    </ContentPresenter.Resources>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                        <Thumb x:Name="PART_LeftHeaderGripper" Style="{StaticResource MyNet.Styles.Thumb.Embedded.GridColumnHeader}" HorizontalAlignment="Left" />
                        <Thumb x:Name="PART_RightHeaderGripper" Style="{StaticResource MyNet.Styles.Thumb.Embedded.GridColumnHeader}" HorizontalAlignment="Right" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding CanUserSortColumns, RelativeSource={RelativeSource AncestorType=DataGrid}}" Value="True" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Opacity" Value="1" />
                                <Setter Property="Cursor" Value="Hand" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <Trigger SourceName="SortDirectionIndicator" Property="IsNeutral" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard Name="GoToVisible" Storyboard="{StaticResource GoToVisible}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="GoToVisible" />
                                <BeginStoryboard Storyboard="{StaticResource GoToHidden}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.DataGridRowHeader" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="BorderBrush" Value="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
        <Setter Property="BorderThickness" Value="{Binding GridLinesVisibility, RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={x:Static c:GridLinesVisibilityBorderToThicknessConverter.Default}}" />
        <Setter Property="Opacity" Value="{DynamicResource MyNet.Opacity.Medium}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid MinWidth="30">
                        <Border Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Control SnapsToDevicePixels="false" Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Visibility="{Binding (Validation.HasError), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" />
                                <ContentPresenter HorizontalAlignment="Stretch"
                                                  VerticalAlignment="Stretch"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </Border>
                        <Thumb x:Name="PART_TopHeaderGripper" Style="{StaticResource MyNet.Styles.Thumb.Embedded.GridRowHeader}" VerticalAlignment="Top" />
                        <Thumb x:Name="PART_BottomHeaderGripper" Style="{StaticResource MyNet.Styles.Thumb.Embedded.GridRowHeader}" VerticalAlignment="Bottom" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="True">
                            <Setter Property="Opacity" Value="{DynamicResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="True">
                            <Setter Property="Opacity" Value="1" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Cells  -->
    <Style x:Key="MyNet.Styles.DataGridCell" TargetType="{x:Type DataGridCell}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(p:DataGridAssist.CellPadding)}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=DataGridRow}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True" />
                        <ContentPresenter Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Validation.ErrorTemplate="{x:Null}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=(p:DataGridAssist.SelectedCellBorderBrush)}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(p:ListBoxItemAssist.ShowSelection), RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="True" />
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType=DataGridRow}}" />
                <Setter Property="Background" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource AncestorType=DataGridRow}}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Rows  -->
    <Style x:Key="MyNet.Styles.DataGridRow" TargetType="{x:Type DataGridRow}">
        <Setter Property="p:ListBoxItemAssist.ShowSelection" Value="{Binding Path=(p:ListBoxItemAssist.ShowSelection), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverForeground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="ValidationErrorTemplate" Value="{Binding RowValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border x:Name="DGR_Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            ClipToBounds="{TemplateBinding ClipToBounds}"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Border x:Name="AlternateBackground" Background="{TemplateBinding Foreground}" Opacity="0" />
                            <Border x:Name="MouseOverBorder" Background="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" />
                            <Border x:Name="SelectedBackgroundBorder" Background="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" />

                            <SelectiveScrollingGrid>
                                <SelectiveScrollingGrid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </SelectiveScrollingGrid.ColumnDefinitions>
                                <SelectiveScrollingGrid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </SelectiveScrollingGrid.RowDefinitions>
                                <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <DataGridDetailsPresenter Grid.Row="1"
                                                          Grid.Column="1"
                                                          SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                                          Visibility="{TemplateBinding DetailsVisibility}" />
                                <DataGridRowHeader Grid.Row="0"
                                                   Grid.RowSpan="2"
                                                   Grid.Column="0"
                                                   SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                                   Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                            </SelectiveScrollingGrid>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState x:Name="NormalAlternatingRow">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="AlternateBackground"
                                                         Storyboard.TargetProperty="Opacity"
                                                         From="0"
                                                         To="0.03"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled" />
                                <VisualState x:Name="Normal_AlternatingRow">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="AlternateBackground"
                                                         Storyboard.TargetProperty="Opacity"
                                                         From="0"
                                                         To="0.03"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Selected">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="*" To="SelectedUnfocused">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Selected" To="Unselected">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                             Storyboard.TargetProperty="Opacity"
                                                             To="0"
                                                             Duration="0" />
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Unselected" />
                                <VisualState Name="SelectedUnfocused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="False">
                            <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SelectedBackgroundBorder" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsNewItem" Value="True">
                <Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Datagrids  -->
    <Style x:Key="MyNet.Styles.DataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="p:DataGridAssist.EnableEditBoxAssist" Value="True" />
        <Setter Property="p:ListBoxItemAssist.ShowSelection" Value="True" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="p:DataGridAssist.SelectedCellBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.FontSize)}" />
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="GridLinesVisibility" Value="None" />
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="True" />
        <Setter Property="VerticalGridLinesBrush" Value="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource Self}}" />
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
        <Setter Property="HeadersVisibility" Value="Column" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="ColumnHeaderStyle" Value="{StaticResource MyNet.Styles.DataGridColumnHeader}" />
        <Setter Property="RowHeaderStyle" Value="{StaticResource MyNet.Styles.DataGridRowHeader}" />
        <Setter Property="RowStyle" Value="{StaticResource MyNet.Styles.DataGridRow}" />
        <Setter Property="CellStyle" Value="{StaticResource MyNet.Styles.DataGridCell}" />
        <Setter Property="p:DataGridAssist.TextColumnStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.DataGrid}" />
        <Setter Property="p:DataGridAssist.EditingTextColumnStyle" Value="{StaticResource MyNet.Styles.TextBox.Embedded.DataGrid.Edition}" />
        <Setter Property="p:DataGridAssist.ComboBoxColumnStyle" Value="{StaticResource MyNet.Styles.ComboBox.Embedded.DataGrid}" />
        <Setter Property="p:DataGridAssist.EditingComboBoxColumnStyle" Value="{StaticResource MyNet.Styles.ComboBox.Embedded.DataGrid.Edition}" />
        <Setter Property="p:DataGridAssist.CheckBoxColumnStyle" Value="{StaticResource MyNet.Styles.CheckBox.Embedded.DataGrid}" />
        <Setter Property="p:DataGridAssist.EditingCheckBoxColumnStyle" Value="{StaticResource MyNet.Styles.CheckBox.Embedded.DataGrid.Edition}" />
        <Setter Property="p:DataGridAssist.ApplyDefaultStyle" Value="True" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="CanUserAddRows" Value="True" />
        <Setter Property="CanUserDeleteRows" Value="True" />
        <Setter Property="CanUserReorderColumns" Value="False" />
        <Setter Property="CanUserResizeColumns" Value="False" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="HeadersVisibility" Value="All" />
        <Setter Property="RowHeight" Value="40" />
        <Setter Property="SelectionMode" Value="Extended" />
        <Setter Property="RowValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Margin="0 -2 0 -2" ToolTip="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}}, Path=(Validation.Errors)[0].ErrorContent}">
                        <ctrl:PackIcon Width="20"
                                       Height="20"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Foreground="{DynamicResource MyNet.Brushes.Validation.Error}"
                                       Kind="Error" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding p:ThemeAssist.CornerRadius}"
                            SnapsToDevicePixels="True">
                        <ctrl:DynamicScrollViewer x:Name="DG_ScrollViewer" p:ScrollViewerAssist.IsAutoHideEnabled="{Binding Path=(p:ScrollViewerAssist.IsAutoHideEnabled), RelativeSource={RelativeSource TemplatedParent}}" Focusable="false">
                            <ctrl:DynamicScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Button Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
                                                                                              TypeInTargetAssembly={x:Type DataGrid}}}"
                                                Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                                Command="{x:Static DataGrid.SelectAllCommand}"
                                                Focusable="false"
                                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <Border Grid.Row="0"
                                                Grid.Column="1"
                                                Grid.ColumnSpan="2"
                                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}">
                                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" />
                                        </Border>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                                Grid.Row="1"
                                                                Grid.RowSpan="2"
                                                                Grid.Column="0"
                                                                Grid.ColumnSpan="3"
                                                                CanContentScroll="{TemplateBinding CanContentScroll}" />
                                        <ctrl:DynamicScrollBar x:Name="PART_VerticalScrollBar"
                                                               Grid.Row="1"
                                                               Grid.Column="2"
                                                               HorizontalAlignment="Right"
                                                               Maximum="{TemplateBinding ScrollableHeight}"
                                                               Orientation="Vertical"
                                                               ViewportSize="{TemplateBinding ViewportHeight}"
                                                               Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                               Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Grid x:Name="Grid_HorizontalScrollBar"
                                              Grid.Row="2"
                                              Grid.Column="1"
                                              VerticalAlignment="Bottom">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ctrl:DynamicScrollBar x:Name="PART_HorizontalScrollBar"
                                                                   Grid.Column="1"
                                                                   Maximum="{TemplateBinding ScrollableWidth}"
                                                                   Orientation="Horizontal"
                                                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ctrl:DynamicScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ctrl:DynamicScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.DataGrid.Accent" BasedOn="{StaticResource MyNet.Styles.DataGrid}" TargetType="{x:Type DataGrid}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.DataGrid.Foreground" BasedOn="{StaticResource MyNet.Styles.DataGrid}" TargetType="{x:Type DataGrid}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    </Style>
</ResourceDictionary>