<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="clr-namespace:MyNet.Wpf.Behaviors"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.TextBlock.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.RadioButton.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.BusyControl.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate x:Key="MyNet.DataTemplates.Icon.ListBoxItem">
        <DataTemplate.Resources>
            <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                <Setter Property="Height" Value="18" />
                <Setter Property="Width" Value="18" />
            </Style>
            <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                <Setter Property="Height" Value="18" />
                <Setter Property="Width" Value="18" />
            </Style>
        </DataTemplate.Resources>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ContentControl x:Name="Icon"
                            Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"
                            Opacity="{Binding Path=(p:IconAssist.Opacity), FallbackValue=0.0, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"
                            Visibility="{Binding Path=(p:IconAssist.Icon), FallbackValue=Collapsed, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            <ContentControl x:Name="Content"
                            Grid.Column="1"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{Binding}" />
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="{x:Static ctrl:Alignment.Left}">
                <Setter TargetName="Content" Property="Grid.Column" Value="1" />
                <Setter TargetName="Content" Property="Grid.Row" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="{x:Static ctrl:Alignment.Top}">
                <Setter TargetName="Content" Property="Grid.Column" Value="0" />
                <Setter TargetName="Content" Property="Grid.Row" Value="1" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="{x:Static ctrl:Alignment.Right}">
                <Setter TargetName="Content" Property="Grid.Column" Value="0" />
                <Setter TargetName="Content" Property="Grid.Row" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="1" />
                <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="{x:Static ctrl:Alignment.Bottom}">
                <Setter TargetName="Content" Property="Grid.Column" Value="0" />
                <Setter TargetName="Content" Property="Grid.Row" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Row" Value="1" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Default -->
    <Style x:Key="MyNet.Styles.ListBoxItem" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Icon.ListBoxItem}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="16 8" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="BackBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            ClipToBounds="{TemplateBinding ClipToBounds}"
                            CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            SnapsToDevicePixels="True">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Unselected" />
                            </VisualStateGroup>
                            <VisualStateGroup Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Unfocused" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Border x:Name="MouseOverBorder"
                                    Background="{TemplateBinding p:ListBoxItemAssist.IsMouseOverBackground}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                    Opacity="0"
                                    SnapsToDevicePixels="True" />
                            <Border x:Name="SelectedBorder"
                                    Background="{TemplateBinding p:ListBoxItemAssist.IsSelectedBackground}"
                                    BorderBrush="{TemplateBinding p:ListBoxItemAssist.IsSelectedBorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                    Opacity="0"
                                    RenderTransformOrigin="0.5,0.5" />
                            <ctrl:Ripple x:Name="Ripple"
                                         Padding="{TemplateBinding Padding}"
                                         HorizontalAlignment="Stretch"
                                         VerticalAlignment="Stretch"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Content="{TemplateBinding Content}"
                                         ContentTemplate="{TemplateBinding ContentTemplate}"
                                         ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                         Feedback="{TemplateBinding Foreground}"
                                         Focusable="False"
                                         RecognizesAccessKey="False"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(p:ComboBoxAssist.ShowSelectedItem), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Height" Value="0" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="False">
                            <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Ripple" Property="Feedback" Value="Transparent" />
                            <Setter TargetName="SelectedBorder" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:ListBoxItemAssist.ShowSelection" Value="{Binding Path=(p:ListBoxItemAssist.ShowSelection), RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.ListBox" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            ClipToBounds="False"
                            SnapsToDevicePixels="true">
                        <Grid>
                            <ctrl:DynamicScrollViewer Padding="{TemplateBinding Padding}"
                                                      ClipToBounds="False"
                                                      Focusable="false"
                                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                <ItemsPresenter ClipToBounds="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ctrl:DynamicScrollViewer>
                            <Grid p:BusyAssist.AttachService="{Binding Path=(b:ItemsControlAsyncBehavior.BusyService), RelativeSource={RelativeSource TemplatedParent}}" p:BusyAssist.Style="{StaticResource MyNet.Styles.BusyControl.Dark.Foreground}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Standard" />
        <Setter Property="p:IconAssist.Alignment" Value="Left" />
        <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
        <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="p:ListBoxItemAssist.ShowSelection" Value="True" />
        <Setter Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="True" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <!-- Toggle -->
    <Style x:Key="MyNet.Styles.ListBoxItem.Toggle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
        <Setter Property="Padding" Value="6 4" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Toggle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Toggle}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" Orientation="Horizontal" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ctrl:Card Padding="0"
                               HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                               p:ElevationAssist.Elevation="{Binding Path=(p:ElevationAssist.Elevation), RelativeSource={RelativeSource TemplatedParent}}"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               ClipToBounds="False"
                               Foreground="{TemplateBinding Foreground}">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </ctrl:Card>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Control}" />
        <Setter Property="p:ListBoxAssist.IsToggle" Value="False" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
        <Style.Triggers>
            <Trigger Property="p:ListBoxAssist.Orientation" Value="{x:Static Orientation.Vertical}">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Toggle.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Toggle.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Toggle.Foreground.Opacity" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle.Foreground}">
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Checked}}" />
    </Style>

    <!-- Icon -->
    <Style x:Key="MyNet.Styles.ListBoxItem.Icon" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
        <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Default}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            ClipToBounds="{TemplateBinding ClipToBounds}">
                        <Grid>
                            <ctrl:Ripple x:Name="Ripple"
                                         Padding="{TemplateBinding Padding}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Content="{TemplateBinding Content}"
                                         ContentTemplate="{TemplateBinding ContentTemplate}"
                                         ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                         Feedback="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                                         Focusable="False"
                                         Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Ripple" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Ripple" Property="Opacity" Value="1" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(p:ListBoxAssist.IsToggle), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Value="False" />
                                <Condition Binding="{Binding SelectionMode, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Value="Single" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Ripple" Property="Opacity" Value="1" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="p:RippleAssist.ClipToBounds" Value="False" />
        <Setter Property="p:RippleAssist.IsCentered" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Icon" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Icon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Icon.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Icon}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Icon.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Icon}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <!-- Tab -->
    <Style x:Key="MyNet.Styles.ListBoxItem.Tab" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="BorderThickness" Value="0 0 0 2" />
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Tab}" />
        <Setter Property="FontWeight" Value="{StaticResource MyNet.Font.Weight.Header}" />
        <Setter Property="Padding" Value="16 12" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <RadioButton x:Name="RadioButton"
                                 Style="{StaticResource MyNet.Styles.RadioButton.Tab}"
                                 MinWidth="{TemplateBinding MinWidth}"
                                 MinHeight="{TemplateBinding MinHeight}"
                                 Padding="{TemplateBinding Padding}"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                 p:IconAssist.Alignment="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource TemplatedParent}}"
                                 p:IconAssist.Icon="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}"
                                 p:IconAssist.Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}"
                                 p:IconAssist.Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}"
                                 p:RippleAssist.Feedback="{Binding Path=(p:RippleAssist.Feedback), RelativeSource={RelativeSource TemplatedParent}}"
                                 Background="{TemplateBinding Background}"
                                 BorderBrush="{TemplateBinding BorderBrush}"
                                 BorderThickness="{TemplateBinding BorderThickness}"
                                 Content="{TemplateBinding Content}"
                                 ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                 ContentTemplate="{TemplateBinding ContentTemplate}"
                                 ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                 FontFamily="{TemplateBinding FontFamily}"
                                 FontSize="{TemplateBinding FontSize}"
                                 FontStretch="{TemplateBinding FontStretch}"
                                 FontStyle="{TemplateBinding FontStyle}"
                                 FontWeight="{TemplateBinding FontWeight}"
                                 Foreground="{TemplateBinding Foreground}"
                                 IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"
                                 TextOptions.TextFormattingMode="Ideal"
                                 TextOptions.TextRenderingMode="Auto"
                                 Typography.Capitals="{TemplateBinding Typography.Capitals}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="RadioButton" Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{Binding Path=(p:RippleAssist.Feedback), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBoxItem.Tab.DropDown" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem.Tab}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid>
                        <RadioButton x:Name="RadioButton"
                                     Style="{StaticResource MyNet.Styles.RadioButton.Tab}"
                                     MinWidth="{TemplateBinding MinWidth}"
                                     MinHeight="{TemplateBinding MinHeight}"
                                     Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     p:IconAssist.Alignment="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource TemplatedParent}}"
                                     p:IconAssist.Icon="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}"
                                     p:IconAssist.Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}"
                                     p:IconAssist.Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}"
                                     p:RippleAssist.Feedback="{Binding Path=(p:RippleAssist.Feedback), RelativeSource={RelativeSource TemplatedParent}}"
                                     Background="{TemplateBinding Background}"
                                     BorderBrush="{TemplateBinding BorderBrush}"
                                     BorderThickness="{TemplateBinding BorderThickness}"
                                     FontFamily="{TemplateBinding FontFamily}"
                                     FontSize="{TemplateBinding FontSize}"
                                     FontStretch="{TemplateBinding FontStretch}"
                                     FontStyle="{TemplateBinding FontStyle}"
                                     FontWeight="{TemplateBinding FontWeight}"
                                     Foreground="{TemplateBinding Foreground}"
                                     IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"
                                     TextOptions.TextFormattingMode="Ideal"
                                     TextOptions.TextRenderingMode="Auto"
                                     Typography.Capitals="{TemplateBinding Typography.Capitals}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="Col0" Width="Auto" />
                                    <ColumnDefinition x:Name="Col1" Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="Row0" Height="Auto" />
                                    <RowDefinition x:Name="Row1" Height="Auto" />
                                </Grid.RowDefinitions>
                                <ctrl:PackIcon x:Name="Caret"
                                               Grid.Row="0"
                                               Grid.Column="1"
                                               Width="18"
                                               Height="18"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               Kind="ChevronDown"
                                               RenderTransformOrigin="0.5, 0.5">
                                    <ctrl:PackIcon.RenderTransform>
                                        <RotateTransform Angle="0" />
                                    </ctrl:PackIcon.RenderTransform>
                                </ctrl:PackIcon>
                                <ContentControl x:Name="Content"
                                                Grid.Row="0"
                                                Grid.Column="0"
                                                Content="{TemplateBinding Content}"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                            </Grid>
                        </RadioButton>
                        <ctrl:PopupEx x:Name="PART_Popup"
                                      Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                                      HorizontalOffset="-5"
                                      IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver, Mode=OneWay}"
                                      Placement="Bottom"
                                      PlacementTarget="{Binding ElementName=RadioButton}"
                                      PopupAnimation="Slide"
                                      VerticalOffset="-5">
                            <Grid>
                                <Border Background="White" Opacity="0.002" />
                                <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}"
                                           Padding="0"
                                           Background="{TemplateBinding p:PopupAssist.Background}"
                                           FontSize="{StaticResource MyNet.Font.Size}"
                                           FontWeight="{StaticResource MyNet.Font.Weight.ToolTip}"
                                           Foreground="{TemplateBinding p:PopupAssist.Foreground}">
                                    <ContentControl Content="{TemplateBinding p:PopupAssist.Content}" ContentTemplate="{TemplateBinding p:PopupAssist.ContentTemplate}" />
                                </ctrl:Card>
                            </Grid>
                        </ctrl:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="RadioButton" Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding IsOpen, ElementName=PART_Popup}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Caret"
                                                         Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)"
                                                         From="0"
                                                         To="180"
                                                         Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Caret"
                                                         Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)"
                                                         From="180"
                                                         To="0"
                                                         Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
        <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Tab" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Tab}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="SelectedValuePath" Value="" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                    <ctrl:Card Padding="{TemplateBinding Padding}"
                               p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}"
                               p:ShadowAssist.ShadowEdges="{TemplateBinding p:ShadowAssist.ShadowEdges}"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               DockPanel.Dock="Top"
                               Focusable="False"
                               Foreground="{TemplateBinding Foreground}"
                               SnapsToDevicePixels="true"
                               UniformCornerRadius="{Binding Path=(p:ThemeAssist.UniformCornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ctrl:DynamicScrollViewer Padding="{TemplateBinding Padding}"
                                                  Focusable="false"
                                                  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                                  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ctrl:DynamicScrollViewer>
                    </ctrl:Card>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="p:ElevationAssist.Elevation" Value="Dp0" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:ShadowAssist.ShadowEdges" Value="None" />
        <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Control}" />
        <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="0" />
        <Style.Triggers>
            <Trigger Property="p:ListBoxAssist.Orientation" Value="{x:Static Orientation.Vertical}">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Vertical" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
                <Setter Property="p:ShadowAssist.ShadowEdges" Value="Right" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Tab.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Tab}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Tab.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Tab}">
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=Foreground}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding SelfPath=Foreground}" />
    </Style>

    <!-- Card -->
    <Style x:Key="MyNet.Styles.ListBoxItem.Card" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Small}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ctrl:Card x:Name="Card"
                               Padding="0"
                               p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               Foreground="{TemplateBinding Foreground}"
                               UniformCornerRadius="{TemplateBinding p:ThemeAssist.UniformCornerRadius}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Unselected" />
                            </VisualStateGroup>
                            <VisualStateGroup Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Unfocused" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Border x:Name="MouseOverBorder"
                                    Background="{TemplateBinding p:ListBoxItemAssist.IsMouseOverBackground}"
                                    Opacity="0"
                                    SnapsToDevicePixels="True" />

                            <Border x:Name="SelectedBorder"
                                    Background="{TemplateBinding p:ListBoxItemAssist.IsSelectedBackground}"
                                    BorderBrush="{TemplateBinding p:ListBoxItemAssist.IsSelectedBorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Opacity="0"
                                    RenderTransformOrigin="0.5,0.5" />

                            <ctrl:Ripple x:Name="Ripple"
                                         Padding="{TemplateBinding Padding}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Content="{TemplateBinding Content}"
                                         ContentTemplate="{TemplateBinding ContentTemplate}"
                                         ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                         Feedback="{TemplateBinding Foreground}"
                                         Focusable="False"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </ctrl:Card>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(p:ComboBoxAssist.ShowSelectedItem), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Height" Value="0" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="False">
                            <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Ripple" Property="Feedback" Value="Transparent" />
                            <Setter TargetName="SelectedBorder" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Control}" />
        <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Control}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Cards" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Card}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <ctrl:VirtualizingWrapPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}"
                                                Orientation="Vertical"
                                                SpacingMode="None"
                                                StretchItems="False"
                                                VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="SelectionMode" Value="Extended" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <Grid>
                            <ContentControl x:Name="ContentControl">
                                <ctrl:DynamicScrollViewer Padding="{TemplateBinding Padding}"
                                                          p:ScrollViewerAssist.BubbleVerticalScroll="{TemplateBinding p:ScrollViewerAssist.BubbleVerticalScroll}"
                                                          p:ScrollViewerAssist.IsAutoHideEnabled="{Binding Path=(p:ScrollViewerAssist.IsAutoHideEnabled), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                          CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                                          Focusable="false"
                                                          HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                                          VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ctrl:DynamicScrollViewer>
                            </ContentControl>
                            <Grid p:BusyAssist.AttachService="{Binding Path=(b:ItemsControlAsyncBehavior.BusyService), RelativeSource={RelativeSource TemplatedParent}}" p:BusyAssist.Style="{StaticResource MyNet.Styles.BusyControl.Dark.Foreground}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VirtualizingPanel.CacheLengthUnit" Value="Page" />
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Checked}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="True" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Cards.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Cards}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Cards.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Cards}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    </Style>

    <!-- Chips -->
    <Style x:Key="MyNet.Styles.ListBoxItem.Chip" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2"
                                           RadiusX="16"
                                           RadiusY="16"
                                           SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}"
                                           StrokeDashArray="1 2"
                                           StrokeThickness="1" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="32" />
        <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Small}" />
        <Setter Property="MinWidth" Value="46" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid ClipToBounds="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition To="Selected">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                             Storyboard.TargetProperty="Opacity"
                                                             To="1"
                                                             Duration="0:0:0.2" />
                                            <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                                Storyboard.TargetProperty="Margin"
                                                                To="4,0,4,0"
                                                                Duration="0:0:0.2" />
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition To="Unselected">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                             Storyboard.TargetProperty="Opacity"
                                                             To="0"
                                                             Duration="0:0:0.2" />
                                            <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                                Storyboard.TargetProperty="Margin"
                                                                To="-16,0,10,0"
                                                                Duration="0:0:0.2" />
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                        <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                            Storyboard.TargetProperty="Margin"
                                                            To="4,0,4,0"
                                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Unselected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0" />
                                        <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                            Storyboard.TargetProperty="Margin"
                                                            To="-16,0,10,0"
                                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Grid.ColumnSpan="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border x:Name="SelectedBackgroundBorder"
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                Background="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{Binding Path=(p:ListBoxItemAssist.IsSelectedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border x:Name="MouseOverBorder"
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                Background="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                Opacity="0" />
                        <ctrl:PackIcon x:Name="IconControl"
                                       Grid.Column="0"
                                       Width="16"
                                       Height="16"
                                       Margin="-16 0 0 0"
                                       VerticalAlignment="Center"
                                       IsTabStop="False"
                                       Kind="Check"
                                       Visibility="{Binding Path=(p:CheckBoxAssist.ShowCheck), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                        <ContentControl x:Name="Content"
                                        Grid.Column="1"
                                        Margin="0 0 10 0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding Content}"
                                        ContentStringFormat="{TemplateBinding ContentTemplateSelector}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                        IsTabStop="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                        <Trigger Property="p:CheckBoxAssist.ShowCheck" Value="False">
                            <Setter TargetName="Content" Property="Margin" Value="10 0 10 0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="p:CheckBoxAssist.ShowCheck" Value="{Binding Path=(p:CheckBoxAssist.ShowCheck), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="16" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Chips" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Tab}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Chip}" />
        <Setter Property="SelectionMode" Value="Multiple" />
        <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
        <Setter Property="p:ListBoxAssist.IsToggle" Value="True" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Chips.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Chips}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Chips.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Chips}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
    </Style>

    <!-- Chips Alternate -->
    <Style x:Key="MyNet.Styles.ListBox.Chips.Alternate" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Chips}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem.Chip}">
                    <Setter Property="BorderThickness" Value="1" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding SelfPath=(p:ListBoxItemAssist.IsSelectedForeground), Opacity={StaticResource MyNet.Opacity.Checked}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ListBoxItemAssist.IsSelectedForeground)}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Chips.Alternate.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Chips.Alternate}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Chips.Alternate.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Chips.Alternate}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <!-- Navigation -->
    <Style x:Key="MyNet.Styles.ListBoxItem.Navigation" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Opacity="0.0" Color="{DynamicResource MyNet.Colors.Control.Border}" />
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Secondary}" />
        <Setter Property="Height" Value="60" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
        <Setter Property="Margin" Value="0 4 0 2" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type ctrl:PackIcon}">
                            <Setter Property="FrameworkElement.Height" Value="24" />
                            <Setter Property="FrameworkElement.Width" Value="24" />
                        </Style>
                        <Style TargetType="{x:Type ctrl:GeometryIcon}">
                            <Setter Property="FrameworkElement.Height" Value="24" />
                            <Setter Property="FrameworkElement.Width" Value="24" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Border x:Name="MainBorder"
                            HorizontalAlignment="Stretch"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="{StaticResource MyNet.CornerRadius.Container}">
                        <Grid>
                            <Rectangle x:Name="ActiveRectangle"
                                       Width="4"
                                       Height="24"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Center"
                                       Fill="{Binding Path=(p:ListBoxItemAssist.IsSelectedBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                       Opacity="0.0"
                                       RadiusX="2"
                                       RadiusY="2" />

                            <ctrl:Ripple Padding="4"
                                         HorizontalAlignment="Stretch"
                                         VerticalAlignment="Stretch"
                                         HorizontalContentAlignment="Stretch"
                                         VerticalContentAlignment="Stretch"
                                         Feedback="{TemplateBinding p:HeaderAssist.Foreground}"
                                         Focusable="False"
                                         RecognizesAccessKey="False"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <ctrl:Ripple.Clip>
                                    <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                                        <Binding ElementName="MainBorder" Path="ActualWidth" />
                                        <Binding ElementName="MainBorder" Path="ActualHeight" />
                                        <Binding ElementName="MainBorder" Path="CornerRadius" />
                                        <Binding ElementName="MainBorder" Path="BorderThickness" />
                                    </MultiBinding>
                                </ctrl:Ripple.Clip>
                                <Grid HorizontalAlignment="Stretch">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <ContentControl x:Name="Icon"
                                                    Grid.Row="0"
                                                    Margin="0"
                                                    VerticalAlignment="Center"
                                                    Content="{TemplateBinding p:IconAssist.Icon}"
                                                    Foreground="{TemplateBinding p:HeaderAssist.Foreground}" />

                                    <Grid x:Name="ContentGrid"
                                          Grid.Row="1"
                                          Height="15"
                                          Margin="0 2 0 0">
                                        <ContentPresenter x:Name="ElementContentPresenter"
                                                          HorizontalAlignment="Center"
                                                          Content="{TemplateBinding Content}"
                                                          TextElement.FontSize="{TemplateBinding FontSize}"
                                                          TextElement.Foreground="{TemplateBinding p:HeaderAssist.Foreground}" />
                                    </Grid>
                                </Grid>
                            </ctrl:Ripple>
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ActiveRectangle" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ElementContentPresenter" Property="Margin" Value="0" />
                            <Setter TargetName="Icon" Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="MainBorder" Property="Background" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid"
                                                         Storyboard.TargetProperty="Height"
                                                         From="15"
                                                         To="0"
                                                         Duration="0:0:.16" />
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid"
                                                         Storyboard.TargetProperty="Opacity"
                                                         From="1"
                                                         To="0"
                                                         Duration="0:0:.16" />
                                        <DoubleAnimation Storyboard.TargetName="MainBorder"
                                                         Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Opacity)"
                                                         From="0"
                                                         To="0.3"
                                                         Duration="0:0:.16" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid"
                                                         Storyboard.TargetProperty="Height"
                                                         From="0"
                                                         To="15"
                                                         Duration="0:0:.16" />
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid"
                                                         Storyboard.TargetProperty="Opacity"
                                                         From="0"
                                                         To="1"
                                                         Duration="0:0:.16" />
                                        <DoubleAnimation Storyboard.TargetName="MainBorder"
                                                         Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Opacity)"
                                                         From="0.3"
                                                         To="0"
                                                         Duration="0:0:.16" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="p:IconAssist.Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="MainBorder" Property="Background" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Icon" Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                <Setter TargetName="ElementContentPresenter" Property="TextElement.Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="p:HeaderAssist.Alignment" Value="Bottom">
                            <Setter TargetName="ActiveRectangle" Property="Height" Value="4" />
                            <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Bottom" />
                            <Setter TargetName="ActiveRectangle" Property="Width" Value="24" />
                        </Trigger>
                        <Trigger Property="p:HeaderAssist.Alignment" Value="Top">
                            <Setter TargetName="ActiveRectangle" Property="Height" Value="4" />
                            <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="ActiveRectangle" Property="Width" Value="24" />
                        </Trigger>
                        <Trigger Property="p:HeaderAssist.Alignment" Value="Right">
                            <Setter TargetName="ActiveRectangle" Property="Height" Value="24" />
                            <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Right" />
                            <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Center" />
                            <Setter TargetName="ActiveRectangle" Property="Width" Value="4" />
                        </Trigger>
                        <Trigger Property="p:HeaderAssist.Alignment" Value="Left">
                            <Setter TargetName="ActiveRectangle" Property="Height" Value="24" />
                            <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Center" />
                            <Setter TargetName="ActiveRectangle" Property="Width" Value="4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Width" Value="60" />
        <Setter Property="p:HeaderAssist.Alignment" Value="Right" />
        <Setter Property="p:HeaderAssist.Foreground" Value="{me:BrushBinding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{DynamicResource MyNet.Brushes.Control.Background}" />

        <Setter Property="p:ListBoxItemAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Navigation" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Navigation}" />
        <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground.Tertiary}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Navigation.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Navigation}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.Navigation.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Navigation}">
        <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>
</ResourceDictionary>