<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="MyNet.Styles.CheckBox" TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="p:CheckBoxAssist.UncheckedPath" Value="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z" />
        <Setter Property="p:CheckBoxAssist.CheckedPath" Value="M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z" />
        <Setter Property="p:CheckBoxAssist.IndeterminatePath" Value="M6,13L6,11L18,11L18,13M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Click">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Width)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Height)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="templateRoot" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Viewbox Width="18"
                                 Height="18"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                 FlowDirection="LeftToRight">
                            <Canvas Width="24" Height="24">
                                <Path x:Name="Graphic" Data="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:CheckBoxAssist.UncheckedPath)}" Fill="{TemplateBinding BorderBrush}" />
                                <Ellipse x:Name="InteractionEllipse"
                                         Canvas.Left="12"
                                         Canvas.Top="12"
                                         Width="0"
                                         Height="0"
                                         Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBackground)}"
                                         IsHitTestVisible="False"
                                         Opacity="0"
                                         RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Canvas>
                        </Viewbox>
                        <ContentPresenter x:Name="contentPresenter"
                                          Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="true" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:RippleAssist.IsDisabled)}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Click}" />
                            </MultiDataTrigger.EnterActions>
                        </MultiDataTrigger>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4 2 0 0" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true" />
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Graphic" Property="Data" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:CheckBoxAssist.CheckedPath)}" />
                            <Setter TargetName="Graphic" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBackground)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="Graphic" Property="Data" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:CheckBoxAssist.IndeterminatePath)}" />
                            <Setter TargetName="Graphic" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBackground)}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter TargetName="Graphic" Property="Fill" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
                            <Setter TargetName="contentPresenter" Property="Control.Foreground" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.Accent" BasedOn="{StaticResource MyNet.Styles.CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.Foreground" BasedOn="{StaticResource MyNet.Styles.CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

    <Style x:Key="MyNet.Styles.CheckBox.Circle" BasedOn="{StaticResource MyNet.Styles.CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="p:CheckBoxAssist.UncheckedPath" Value="M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
        <Setter Property="p:CheckBoxAssist.CheckedPath" Value="M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
        <Setter Property="p:CheckBoxAssist.IndeterminatePath" Value="M17,13H7V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.Circle.Accent" BasedOn="{StaticResource MyNet.Styles.CheckBox.Circle}" TargetType="{x:Type CheckBox}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.Circle.Foreground" BasedOn="{StaticResource MyNet.Styles.CheckBox.Circle}" TargetType="{x:Type CheckBox}">
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <Style x:Key="MyNet.Styles.CheckBox.Circle.Alternate" BasedOn="{StaticResource MyNet.Styles.CheckBox.Circle}" TargetType="{x:Type CheckBox}">
        <Setter Property="p:CheckBoxAssist.CheckedPath" Value="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" />
        <Setter Property="p:CheckBoxAssist.IndeterminatePath" Value="M19,13H5V11H19V13Z" />
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.Circle.Alternate.Accent" BasedOn="{StaticResource MyNet.Styles.CheckBox.Circle.Alternate}" TargetType="{x:Type CheckBox}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.Circle.Alternate.Foreground" BasedOn="{StaticResource MyNet.Styles.CheckBox.Circle.Alternate}" TargetType="{x:Type CheckBox}">
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <Style x:Key="MyNet.Styles.CheckBox.Chip" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2"
                                           RadiusX="16"
                                           RadiusY="16"
                                           SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}"
                                           StrokeDashArray="1 2"
                                           StrokeThickness="1" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="p:CheckBoxAssist.ShowCheck" Value="True" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="16" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="32" />
        <Setter Property="MinWidth" Value="46" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid ClipToBounds="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.ColumnSpan="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border x:Name="SelectedBackgroundBorder"
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border x:Name="MouseOverBorder"
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                Opacity="0" />
                        <ctrl:PackIcon x:Name="IconControl"
                                       Grid.Column="0"
                                       Width="16"
                                       Height="16"
                                       Margin="-16 0 0 0"
                                       VerticalAlignment="Center"
                                       IsTabStop="False"
                                       Kind="Check"
                                       Visibility="{Binding Path=(p:CheckBoxAssist.ShowCheck), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                        <ContentControl x:Name="Content"
                                        Grid.Column="1"
                                        Margin="0 0 10 0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding Content}"
                                        ContentStringFormat="{TemplateBinding ContentTemplateSelector}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                        IsTabStop="False" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition To="Checked">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                             Storyboard.TargetProperty="Opacity"
                                                             To="1"
                                                             Duration="0:0:0.2" />
                                            <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                                Storyboard.TargetProperty="Margin"
                                                                To="4,0,4,0"
                                                                Duration="0:0:0.2" />
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition To="CheckedUnfocused">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                             Storyboard.TargetProperty="Opacity"
                                                             To="1"
                                                             Duration="0:0:0.2" />
                                            <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                                Storyboard.TargetProperty="Margin"
                                                                To="4,0,4,0"
                                                                Duration="0:0:0.2" />
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                             Storyboard.TargetProperty="Opacity"
                                                             To="0"
                                                             Duration="0:0:0.2" />
                                            <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                                Storyboard.TargetProperty="Margin"
                                                                To="-16,0,10,0"
                                                                Duration="0:0:0.2" />
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                        <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                            Storyboard.TargetProperty="Margin"
                                                            To="4,0,4,0"
                                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="CheckedUnfocused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                        <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                            Storyboard.TargetProperty="Margin"
                                                            To="4,0,4,0"
                                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0" />
                                        <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                            Storyboard.TargetProperty="Margin"
                                                            To="-16,0,10,0"
                                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                        <Trigger Property="p:CheckBoxAssist.ShowCheck" Value="False">
                            <Setter TargetName="Content" Property="Margin" Value="10 0 10 0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.Chip.Accent" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.Chip.Foreground" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
    </Style>

    <Style x:Key="MyNet.Styles.CheckBox.Chip.Alternate" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip}" TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground), Opacity={StaticResource MyNet.Opacity.Checked}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground)}" />
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.Chip.Alternate.Accent" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Alternate}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.Chip.Alternate.Foreground" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Alternate}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>
</ResourceDictionary>