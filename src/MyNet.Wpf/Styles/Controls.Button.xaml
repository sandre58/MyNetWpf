<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:cmd="clr-namespace:MyNet.Wpf.Commands"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.PackIcon.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.GeometryIcon.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate x:Key="MyNet.DataTemplates.Icon">
        <DataTemplate.Resources>
            <Style BasedOn="{StaticResource MyNet.Styles.PackIcon}" TargetType="{x:Type ctrl:PackIcon}">
                <Setter Property="Width" Value="18" />
                <Setter Property="Height" Value="18" />
            </Style>
            <Style BasedOn="{StaticResource MyNet.Styles.GeometryIcon}" TargetType="{x:Type ctrl:GeometryIcon}">
                <Setter Property="Width" Value="18" />
                <Setter Property="Height" Value="18" />
            </Style>
        </DataTemplate.Resources>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition x:Name="Row1" Height="Auto" />
                <RowDefinition x:Name="Row2" Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="Col1" Width="Auto" />
                <ColumnDefinition x:Name="Col2" Width="*" />
            </Grid.ColumnDefinitions>

            <ContentControl x:Name="Icon"
                            Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
                            Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
                            Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            <ContentControl x:Name="Content"
                            Grid.Column="1"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Content="{Binding}" />
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}" Value="{x:Static ctrl:Alignment.Left}">
                <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
                <Setter TargetName="Content" Property="Grid.Row" Value="0" />
                <Setter TargetName="Content" Property="Grid.Column" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}" Value="{x:Static ctrl:Alignment.Top}">
                <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
                <Setter TargetName="Content" Property="Grid.Row" Value="1" />
                <Setter TargetName="Content" Property="Grid.Column" Value="0" />
                <Setter TargetName="Row1" Property="Height" Value="Auto" />
                <Setter TargetName="Row2" Property="Height" Value="*" />
                <Setter TargetName="Col1" Property="Width" Value="*" />
                <Setter TargetName="Col2" Property="Width" Value="Auto" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}" Value="{x:Static ctrl:Alignment.Right}">
                <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="1" />
                <Setter TargetName="Content" Property="Grid.Row" Value="0" />
                <Setter TargetName="Content" Property="Grid.Column" Value="0" />
                <Setter TargetName="Row1" Property="Height" Value="*" />
                <Setter TargetName="Row2" Property="Height" Value="Auto" />
                <Setter TargetName="Col1" Property="Width" Value="*" />
                <Setter TargetName="Col2" Property="Width" Value="Auto" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}" Value="{x:Static ctrl:Alignment.Bottom}">
                <Setter TargetName="Icon" Property="Grid.Row" Value="1" />
                <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
                <Setter TargetName="Content" Property="Grid.Row" Value="0" />
                <Setter TargetName="Content" Property="Grid.Column" Value="0" />
                <Setter TargetName="Row1" Property="Height" Value="*" />
                <Setter TargetName="Row2" Property="Height" Value="Auto" />
                <Setter TargetName="Col1" Property="Width" Value="*" />
                <Setter TargetName="Col2" Property="Width" Value="Auto" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  Filled  -->
    <Style x:Key="MyNet.Styles.Button.Filled" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="p:IconAssist.Alignment" Value="Left" />
        <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
        <Setter Property="TextBlock.FontWeight" Value="{StaticResource MyNet.Font.Weight.Button}" />
        <Setter Property="TextBlock.FontSize" Value="{StaticResource MyNet.Font.Size.Button}" />
        <Setter Property="Padding" Value="11 5" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Icon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border x:Name="mouseOver"
                                Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                Visibility="Collapsed" />
                        <ctrl:Ripple Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     Content="{TemplateBinding Content}"
                                     ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                     ContentTemplate="{TemplateBinding ContentTemplate}"
                                     Focusable="False"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ctrl:Ripple.Clip>
                                <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </ctrl:Ripple.Clip>
                        </ctrl:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsMouseOverForeground), RelativeSource={RelativeSource Mode=Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.Button.Filled.Primary" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Filled.Accent" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Filled.Custom" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Filled.Foreground" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Filled.Foreground.SemiTransparent" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <!--  Outlined  -->
    <Style x:Key="MyNet.Styles.Button.Outlined" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Outlined.Primary" BasedOn="{StaticResource MyNet.Styles.Button.Outlined}" TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=BorderBrush, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Outlined.Accent" BasedOn="{StaticResource MyNet.Styles.Button.Outlined}" TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=BorderBrush, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Outlined.Custom" BasedOn="{StaticResource MyNet.Styles.Button.Outlined}" TargetType="{x:Type ButtonBase}">
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=BorderBrush, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=BorderBrush}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Outlined.Foreground" BasedOn="{StaticResource MyNet.Styles.Button.Outlined}" TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=BorderBrush}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=BorderBrush, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=BorderBrush}" />
    </Style>

    <!--  Text  -->
    <Style x:Key="MyNet.Styles.Button.Text" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Text.Primary" BasedOn="{StaticResource MyNet.Styles.Button.Text}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Text.Accent" BasedOn="{StaticResource MyNet.Styles.Button.Text}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Text.Foreground" BasedOn="{StaticResource MyNet.Styles.Button.Text}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <!--  Elevation  -->
    <Style x:Key="MyNet.Styles.Button.Elevation" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Control}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
                            <Grid>
                                <Border x:Name="border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                        Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" />
                            </Grid>
                        </AdornerDecorator>
                        <ctrl:Ripple Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     Content="{TemplateBinding Content}"
                                     ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                     ContentTemplate="{TemplateBinding ContentTemplate}"
                                     Focusable="False"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ctrl:Ripple.Clip>
                                <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </ctrl:Ripple.Clip>
                        </ctrl:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyNet.Styles.Button.Elevation.Primary" BasedOn="{StaticResource MyNet.Styles.Button.Elevation}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Elevation.Accent" BasedOn="{StaticResource MyNet.Styles.Button.Elevation}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Elevation.Custom" BasedOn="{StaticResource MyNet.Styles.Button.Elevation}" TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Elevation.Foreground" BasedOn="{StaticResource MyNet.Styles.Button.Elevation}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

    <!--  Rounded Filled  -->
    <Style x:Key="MyNet.Styles.Button.Rounded.Filled" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rounded.Margin}" />
        <Setter Property="p:ElevationAssist.Elevation" Value="Dp6" />
        <Setter Property="p:IconAssist.Alignment" Value="Top" />
        <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Small.Bottom}" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Ellipse x:Name="border"
                                 Fill="{TemplateBinding Background}"
                                 Stroke="{TemplateBinding BorderBrush}"
                                 StrokeThickness="{TemplateBinding BorderThickness}" />
                        <Ellipse x:Name="mouseOver" Fill="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" Visibility="Collapsed" />
                        <ctrl:Ripple Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}"
                                     ClipToBounds="True"
                                     Content="{TemplateBinding Content}"
                                     ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                     ContentTemplate="{TemplateBinding ContentTemplate}"
                                     Focusable="False"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Ellipse x:Name="GeometryEllipse"
                                 Fill="Transparent"
                                 Focusable="False"
                                 IsHitTestVisible="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Filled.Primary" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Filled.Accent" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Filled.Custom" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Filled.Foreground" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

    <!--  Rounded Outlined  -->
    <Style x:Key="MyNet.Styles.Button.Rounded.Outlined" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Outlined.Primary" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Outlined}" TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=BorderBrush, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Outlined.Accent" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Outlined}" TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=BorderBrush, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Outlined.Custom" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Outlined}" TargetType="{x:Type ButtonBase}">
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=BorderBrush, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=BorderBrush}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Outlined.Foreground" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Outlined}" TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=BorderBrush}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=BorderBrush, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=BorderBrush}" />
    </Style>

    <!--  Rouned Text  -->
    <Style x:Key="MyNet.Styles.Button.Rounded.Text" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Text.Primary" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Text}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Text.Accent" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Text}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Text.Foreground" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Text}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <!--  Rounded Elevation  -->
    <Style x:Key="MyNet.Styles.Button.Rounded.Elevation" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="p:ElevationAssist.Elevation" Value="Dp6" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
                            <Ellipse x:Name="border"
                                     Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}"
                                     Fill="{TemplateBinding Background}"
                                     Stroke="{TemplateBinding BorderBrush}"
                                     StrokeThickness="{TemplateBinding BorderThickness}" />
                        </AdornerDecorator>
                        <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                        <ctrl:Ripple Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}"
                                     ClipToBounds="True"
                                     Content="{TemplateBinding Content}"
                                     ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                     ContentTemplate="{TemplateBinding ContentTemplate}"
                                     Focusable="False"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Ellipse x:Name="GeometryEllipse"
                                 Fill="Transparent"
                                 Focusable="False"
                                 IsHitTestVisible="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Elevation.Primary" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Elevation}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Elevation.Accent" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Elevation}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Elevation.Custom" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Elevation}" TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Rounded.Elevation.Foreground" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Elevation}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

    <!--  Icon  -->
    <Style x:Key="MyNet.Styles.Button.Icon" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="p:RippleAssist.ClipToBounds" Value="False" />
        <Setter Property="p:RippleAssist.IsCentered" Value="True" />
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Ellipse Margin="-2"
                                         SnapsToDevicePixels="True"
                                         Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}"
                                         StrokeDashArray="1 2"
                                         StrokeThickness="1" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <ctrl:Ripple Padding="{TemplateBinding Padding}"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                 Content="{TemplateBinding Content}"
                                 ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                 ContentTemplate="{TemplateBinding ContentTemplate}"
                                 Focusable="False"
                                 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyNet.Styles.Button.Icon.Primary" BasedOn="{StaticResource MyNet.Styles.Button.Icon}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Icon.Accent" BasedOn="{StaticResource MyNet.Styles.Button.Icon}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Icon.Foreground" BasedOn="{StaticResource MyNet.Styles.Button.Icon}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <!--  Hyper link  -->
    <Style x:Key="MyNet.Styles.Button.HyperLink" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Opacity" Value="0.85" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="TextBlock.FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Padding" Value="3 3 3 1" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <ContentPresenter Margin="{TemplateBinding Padding}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <ctrl:Underline x:Name="Underline" Height="1" Background="{TemplateBinding BorderBrush}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Underline" Property="IsActive" Value="True" />
                            <Setter Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="Underline" Property="IsActive" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.Button.HyperLink.Primary" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Light}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.HyperLink.Accent" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink}" TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Light}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.HyperLink.Foreground" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink}" TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=BorderBrush}" />
    </Style>

    <!--  Specifics  -->
    <Style x:Key="MyNet.Styles.Button.Icon.Remove" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}" TargetType="{x:Type ButtonBase}">
        <Setter Property="ToolTip" Value="{me:Resource Remove}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Negative}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ctrl:PackIcon Width="18" Height="18" Kind="Trash" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyNet.Styles.Button.Icon.Tool" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Padding" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.Icon.Tool.Clear" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Tool}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Command" Value="{x:Static p:TextFieldAssist.ClearCommand}" />
        <Setter Property="ToolTip" Value="{me:Resource Clear}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ctrl:PackIcon Kind="Close" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyNet.Styles.Button.Icon.Tool.ClipBoard" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}" TargetType="{x:Type Button}">
        <Setter Property="ToolTip" Value="{me:Resource CopyInClipBoard}" />
        <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Default.Horizontal}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ctrl:PackIcon Kind="ContentCopy" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Command" Value="{x:Static cmd:AppCommands.CopyInClipboardCommand}" />
        <Setter Property="Visibility" Value="{Binding CommandParameter, RelativeSource={RelativeSource Self}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
    </Style>
</ResourceDictionary>