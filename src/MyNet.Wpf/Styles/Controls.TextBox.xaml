<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Button.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Menu.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.TextBlock.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Validation.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.PackIcon.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.GeometryIcon.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="MyNet.Styles.TextBlock.Embedded.TextBox.CharacterCounter" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Secondary}">
        <Setter Property="Margin" Value="0 0 16 0" />
        <Setter Property="Text">
            <Setter.Value>
                <MultiBinding StringFormat="{}{0} / {1}">
                    <Binding Converter="{x:Static c:StringLengthValueConverter.Default}" Path="Text" RelativeSource="{RelativeSource FindAncestor, AncestorType=TextBoxBase}" />
                    <Binding Path="MaxLength" RelativeSource="{RelativeSource FindAncestor, AncestorType=TextBoxBase}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Visibility" Value="{Binding Path=(p:TextFieldAssist.CharacterCounterIsVisible), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
    </Style>

    <Style x:Key="MyNet.Styles.TextBlock.Embedded.TextBox.HelperText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Secondary}">
        <Setter Property="FontSize" Value="{Binding Path=(p:HintAssist.HelperTextFontSize), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="FontStyle" Value="{Binding Path=(p:HintAssist.HelperTextFontStyle), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="Foreground" Value="{Binding Path=(p:HintAssist.HelperTextForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Margin" Value="{Binding Path=(p:HintAssist.HelperTextMargin), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="Opacity" Value="{Binding Path=(p:HintAssist.HelperTextOpacity), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="Text" Value="{Binding Path=(p:HintAssist.HelperText), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    </Style>

    <ControlTemplate x:Key="MyNet.Templates.TextBox" TargetType="{x:Type TextBoxBase}">
        <Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Focused">
                        <Storyboard TargetName="RippleOnFocusScaleTransform">
                            <DoubleAnimation Storyboard.TargetProperty="ScaleX"
                                             From="0"
                                             To="1"
                                             Duration="0:0:0.3">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetProperty="ScaleY"
                                             From="0"
                                             To="1"
                                             Duration="0:0:0.3">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation BeginTime="0:0:0.45"
                                             Storyboard.TargetProperty="ScaleX"
                                             To="0"
                                             Duration="0" />
                            <DoubleAnimation BeginTime="0:0:0.45"
                                             Storyboard.TargetProperty="ScaleY"
                                             To="0"
                                             Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unfocused">
                        <Storyboard TargetName="RippleOnFocusScaleTransform">
                            <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
                            <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <AdornerDecorator>
                <Border x:Name="border"
                        ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}"
                        ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                        SnapsToDevicePixels="True">
                    <Grid>

                        <!-- Mouse Over -->
                        <Border x:Name="mouseOver"
                                Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                Visibility="Collapsed" />

                        <!-- Focus -->
                        <Border x:Name="focus"
                                Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                Visibility="Collapsed" />

                        <!-- Ripple on focus -->
                        <Border HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                RenderTransformOrigin="0.5,0.5"
                                Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
                            </Border.RenderTransform>
                        </Border>

                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!-- Icon -->
                            <ContentControl x:Name="Icon"
                                            Grid.Column="0"
                                            Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}"
                                            VerticalAlignment="Center"
                                            Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}"
                                            Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}"
                                            Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                                <ContentControl.Resources>
                                    <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                                        <Setter Property="Height" Value="20" />
                                        <Setter Property="Width" Value="20" />
                                    </Style>
                                    <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                                        <Setter Property="Height" Value="20" />
                                        <Setter Property="Width" Value="20" />
                                    </Style>
                                </ContentControl.Resources>
                            </ContentControl>

                            <Grid Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                                <!-- Content -->
                                <Grid x:Name="grid" MinWidth="1" MinHeight="18">
                                    <Grid Grid.Column="0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>

                                        <!-- Prefix -->
                                        <TextBlock x:Name="PrefixTextBlock"
                                                   Grid.Column="0"
                                                   Margin="{StaticResource MyNet.Margins.Small.Horizontal}"
                                                   FontSize="{TemplateBinding FontSize}"
                                                   Opacity="{TemplateBinding p:HintAssist.HintOpacity}"
                                                   Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                                            <TextBlock.Visibility>
                                                <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                                                    <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                                                    <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                                                    <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                                                </MultiBinding>
                                            </TextBlock.Visibility>
                                        </TextBlock>

                                        <!-- Host Text -->
                                        <ScrollViewer x:Name="PART_ContentHost"
                                                      Grid.Column="1"
                                                      VerticalAlignment="Center"
                                                      Panel.ZIndex="1"
                                                      p:ScrollViewerAssist.IgnorePadding="True"
                                                      Focusable="false"
                                                      HorizontalScrollBarVisibility="Hidden"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                                      VerticalScrollBarVisibility="Hidden" />

                                        <!-- Suffix -->
                                        <TextBlock x:Name="SuffixTextBlock"
                                                   Grid.Column="2"
                                                   Margin="{StaticResource MyNet.Margins.Small.Horizontal}"
                                                   FontSize="{TemplateBinding FontSize}"
                                                   Opacity="{TemplateBinding p:HintAssist.HintOpacity}"
                                                   Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                                    </Grid>

                                    <!-- SmartHint -->
                                    <ctrl:SmartHint x:Name="Hint"
                                                    Grid.Column="0"
                                                    Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}"
                                                    FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}"
                                                    FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}"
                                                    FontFamily="{TemplateBinding p:HintAssist.FontFamily}"
                                                    FontSize="{TemplateBinding FontSize}"
                                                    HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}"
                                                    HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}"
                                                    UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                                        <ctrl:SmartHint.Hint>
                                            <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                                                <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                                            </Border>
                                        </ctrl:SmartHint.Hint>
                                    </ctrl:SmartHint>
                                </Grid>
                            </Grid>

                            <!-- Clear button -->
                            <Button x:Name="PART_ClearButton"
                                    Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}"
                                    Grid.Column="2"
                                    VerticalAlignment="Stretch"
                                    p:ThemeAssist.CornerRadius="0"
                                    Command="{x:Static p:TextFieldAssist.ClearCommand}"
                                    Content="{me:Icon Kind=Close,
                                                      Size=16}"
                                    ToolTip="{me:Resource Clear}">
                                <Button.Visibility>
                                    <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                                        <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                                    </MultiBinding>
                                </Button.Visibility>
                            </Button>
                        </Grid>
                    </Grid>
                </Border>
            </AdornerDecorator>

            <!-- Underline -->
            <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />

            <!-- Helper text -->
            <Canvas VerticalAlignment="Bottom">
                <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Border x:Name="CharacterCounterContainer" Grid.Column="1">
                        <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding Path=(p:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                </Grid>
            </Canvas>
        </Grid>
        <ControlTemplate.Triggers>

            <!-- Icon Alignment -->
            <Trigger Property="p:IconAssist.Alignment" Value="Right">
                <Setter TargetName="Icon" Property="Grid.Column" Value="3" />
            </Trigger>
            <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="p:IconAssist.Alignment" Value="Top">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <!-- Hint -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="p:HintAssist.IsFloating" Value="True" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <Trigger Property="p:HintAssist.IsFloating" Value="True">
                <Setter TargetName="Hint" Property="FloatingOffset">
                    <Setter.Value>
                        <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="PART_ClearButton" Property="Margin">
                    <Setter.Value>
                        <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="grid" Property="Margin">
                    <Setter.Value>
                        <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!-- IsMouseOver -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsKeyboardFocused" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
            </MultiTrigger>

            <!-- IsKeyboardFocused -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Underline" Property="IsActive" Value="True" />
                <Setter TargetName="focus" Property="Visibility" Value="Visible" />
            </MultiTrigger>

            <!-- Validation.HasError -->
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
                <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
            </Trigger>

            <!-- IsEnabled -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
            </MultiTrigger>

            <!-- IsReadOnly -->
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Opacity" Value="1" />
                <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="border" Property="Opacity" Value="1" />
                <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
                <Setter TargetName="grid" Property="Opacity" Value="1" />
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MyNet.Styles.TextBox" TargetType="{x:Type TextBoxBase}">
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="BorderThickness" Value="0 0 0 1" />
        <Setter Property="CaretBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
        <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="SelectionBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.TextBox}" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
        <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.TextBox.HelperText}" />
        <Setter Property="p:IconAssist.Alignment" Value="Left" />
        <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
        <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="p:TextFieldAssist.ButtonStyle" Value="{StaticResource MyNet.Styles.Button.Icon.Tool}" />
        <Setter Property="p:TextFieldAssist.CharacterCounterIsVisible" Value="False" />
        <Setter Property="p:TextFieldAssist.CharacterCounterStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.TextBox.CharacterCounter}" />
        <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
        <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
        <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
        <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
        <Setter Property="p:GlobalizationAssist.UpdateOnCultureChanged" Value="True" />
        <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
    </Style>
    <Style x:Key="MyNet.Styles.TextBox.Foreground" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox}">
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
    </Style>

    <Style x:Key="MyNet.Styles.TextBox.Filled" TargetType="{x:Type TextBoxBase}" BasedOn="{StaticResource MyNet.Styles.TextBox}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    </Style>
    <Style x:Key="MyNet.Styles.TextBox.Filled.Foreground" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox.Filled}">
        <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
    </Style>

    <Style x:Key="MyNet.Styles.TextBox.Outlined" TargetType="{x:Type TextBoxBase}" BasedOn="{StaticResource MyNet.Styles.TextBox.Filled}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
        <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    </Style>
    <Style x:Key="MyNet.Styles.TextBox.Outlined.Foreground" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox.Outlined}">
        <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
    </Style>

    <Style x:Key="MyNet.Styles.TextBox.Embedded" TargetType="{x:Type TextBoxBase}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ctrl:DynamicScrollViewer x:Name="PART_ContentHost"
                                              p:ScrollViewerAssist.IgnorePadding="True"
                                              Focusable="False"
                                              HorizontalScrollBarVisibility="Hidden"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                              VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    </Style>
</ResourceDictionary>