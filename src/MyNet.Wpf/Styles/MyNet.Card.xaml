<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="MyNet.Styles.Card.Elevation" TargetType="{x:Type ctrl:Card}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ClipContent" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:Card}">
                    <Grid Background="Transparent">
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
                            <AdornerDecorator.OpacityMask>
                                <MultiBinding Converter="{x:Static c:ShadowEdgeConverter.Default}">
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="(p:ElevationAssist.Elevation)" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="(p:ShadowAssist.ShadowEdges)" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </AdornerDecorator.OpacityMask>
                            <Border CornerRadius="{Binding UniformCornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleToCornerRadiusConverter.All}}" Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}">
                                <Border x:Name="PART_ClipBorder"
                                        Padding="{TemplateBinding Padding}"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Clip="{TemplateBinding ContentClip}"
                                        CornerRadius="{Binding UniformCornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleToCornerRadiusConverter.All}}" />
                            </Border>
                        </AdornerDecorator>
                        <ContentPresenter x:Name="ContentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding ContentControl.Content}"
                                          ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ClipContent" Value="True">
                            <Setter TargetName="ContentPresenter" Property="Clip" Value="{Binding ContentClip, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    </Style>
    <Style x:Key="MyNet.Styles.Card.Elevation.Application" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Card.Elevation.Primary" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Card.Elevation.Accent" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.Card.Elevation.Custom" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation}">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    </Style>
    <Style x:Key="MyNet.Styles.Card.Elevation.Foreground" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation.Custom}">
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <Style x:Key="MyNet.Styles.Card.Outlined" TargetType="{x:Type ctrl:Card}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:Card}">
                    <Grid Background="Transparent">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding UniformCornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleToCornerRadiusConverter.All}}">
                            <Border x:Name="PART_ClipBorder"
                                    Padding="{TemplateBinding Padding}"
                                    Background="{TemplateBinding Background}"
                                    Clip="{TemplateBinding ContentClip}">
                                <ContentPresenter x:Name="ContentPresenter"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding ContentControl.Content}"
                                                  ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                                  ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ClipContent" Value="True">
                            <Setter TargetName="ContentPresenter" Property="Clip" Value="{Binding ContentClip, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>
</ResourceDictionary>
