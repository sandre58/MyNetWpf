<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Button.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ctrl:PackIcon x:Key="MyNet.PackIcons.Check"
                   Width="24"
                   Height="24"
                   x:Shared="False"
                   FlowDirection="LeftToRight"
                   Kind="Check" />

    <!--  Filled  -->
    <Style x:Key="MyNet.Styles.ToggleButton.Filled" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border x:Name="mouseOver"
                                Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                Visibility="Collapsed" />
                        <ctrl:Ripple Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     Content="{TemplateBinding Content}"
                                     ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                     ContentTemplate="{TemplateBinding ContentTemplate}"
                                     Focusable="False"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ctrl:Ripple.Clip>
                                <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </ctrl:Ripple.Clip>
                        </ctrl:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="mouseOver" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Filled.Custom" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
        <Setter Property="Background" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Filled.Primary" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Filled.Accent" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Filled.Foreground" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

    <!--  Outlined  -->
    <Style x:Key="MyNet.Styles.ToggleButton.Outlined" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Outlined.Primary" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Primary}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Outlined.Accent" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Accent}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Outlined.Custom" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Outlined.Foreground" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Foreground}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    </Style>

    <!--  Text  -->
    <Style x:Key="MyNet.Styles.ToggleButton.Text" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Text.Primary" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Primary}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Text.Accent" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Accent}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Text.Custom" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Text.Foreground" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Foreground}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <!--  Elevation  -->
    <Style x:Key="MyNet.Styles.ToggleButton.Elevation" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Control}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
                            <Grid>
                                <Border x:Name="border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                        Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" />
                            </Grid>
                        </AdornerDecorator>
                        <ctrl:Ripple Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     Content="{TemplateBinding Content}"
                                     ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                     ContentTemplate="{TemplateBinding ContentTemplate}"
                                     Focusable="False"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ctrl:Ripple.Clip>
                                <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </ctrl:Ripple.Clip>
                        </ctrl:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Elevation.Custom" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Elevation}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
        <Setter Property="Background" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Elevation.Primary" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Elevation.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Elevation.Accent" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Elevation.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Elevation.Foreground" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Elevation.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

    <!--  Rounded Filled  -->
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Filled" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Ellipse x:Name="HoverEllipse"
                                 Fill="{TemplateBinding Background}"
                                 Stroke="{TemplateBinding BorderBrush}"
                                 StrokeThickness="{Binding BorderThickness, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:ThicknessToDoubleConverter.Top}}" />
                        <Ellipse x:Name="CheckedEllipse" Fill="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" RenderTransformOrigin="0.5, 0.5">
                            <Ellipse.RenderTransform>
                                <ScaleTransform x:Name="CheckedEllipseScale" CenterX="0.5" CenterY="0.5" ScaleX="1.0" ScaleY="1.0" />
                            </Ellipse.RenderTransform>
                        </Ellipse>
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" To="{StaticResource MyNet.Opacity.Disabled}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1.0" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleY" Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1.0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleY" Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="1.0"
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         To="1.0"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="0"
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         To="0"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="HoverEllipse" Property="Fill" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Filled.Custom" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
        <Setter Property="Background" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Filled.Primary" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Filled.Accent" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Filled.Foreground" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

    <!--  Rounded Outlined  -->
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Outlined" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Outlined.Primary" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Primary}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Outlined.Accent" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Accent}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Outlined.Custom" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Outlined.Foreground" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Foreground}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    </Style>

    <!--  Rounded Text  -->
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Text" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Text.Primary" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Primary}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Text.Accent" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Accent}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Text.Custom" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Custom}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Text.Foreground" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Foreground}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <!--  Icon  -->
    <Style x:Key="MyNet.Styles.ToggleButton.Icon" BasedOn="{StaticResource MyNet.Styles.Button.Icon}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground), Opacity={StaticResource MyNet.Opacity.Secondary}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsMouseOverForeground)}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground)}" />
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Icon.Primary" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Icon}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Icon.Accent" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Icon}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Icon.Foreground" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Icon}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <!--  Action  -->
    <Style x:Key="MyNet.Styles.ToggleButton.Action" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ElevationAssist.Elevation" Value="Dp0" />
        <Setter Property="p:ToggleButtonAssist.OnContent" Value="{StaticResource MyNet.PackIcons.Check}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}">
                        <Grid x:Name="OffGrid" Background="{TemplateBinding Background}" RenderTransformOrigin=".5,.5">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              FlowDirection="LeftToRight" />
                            <Grid.Clip>
                                <EllipseGeometry RadiusX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2.0}" RadiusY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2.0}">
                                    <EllipseGeometry.Center>
                                        <MultiBinding Converter="{x:Static c:PointValueConverter.Default}">
                                            <Binding Converter="{x:Static c:MathConverter.Divide}"
                                                     ConverterParameter="2.0"
                                                     Path="Width"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Converter="{x:Static c:MathConverter.Divide}"
                                                     ConverterParameter="2.0"
                                                     Path="Height"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </EllipseGeometry.Center>
                                </EllipseGeometry>
                            </Grid.Clip>
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                        <Grid x:Name="OnGrid" Background="{TemplateBinding Background}" RenderTransformOrigin=".5,.5">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ToggleButtonAssist.OnContent)}"
                                              ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ToggleButtonAssist.OnContentTemplate)}"
                                              FlowDirection="LeftToRight" />
                            <Grid.Clip>
                                <EllipseGeometry RadiusX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2.0}" RadiusY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2.0}">
                                    <EllipseGeometry.Center>
                                        <MultiBinding Converter="{x:Static c:PointValueConverter.Default}">
                                            <Binding Converter="{x:Static c:MathConverter.Divide}"
                                                     ConverterParameter="2.0"
                                                     Path="Width"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Converter="{x:Static c:MathConverter.Divide}"
                                                     ConverterParameter="2.0"
                                                     Path="Height"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </EllipseGeometry.Center>
                                </EllipseGeometry>
                            </Grid.Clip>
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OnScaleTransform" ScaleX="0" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" To="0.38" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OffScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OnScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OnScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OffScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OffScaleTransform"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="0"
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="OnScaleTransform"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OffScaleTransform"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="1"
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="OnScaleTransform"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="0"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="IndeterminateCheck"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Action.Primary" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Action.Accent" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Action.Custom" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Action.Foreground" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="Foreground" Value="{me:BrushBinding Path=Background, RelativeSource={RelativeSource Self}, Contrast=True}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

    <!--  Switch  -->
    <sys:Double x:Key="ToggleButtonWidth">40</sys:Double>
    <sys:Double x:Key="ToggleButtonHeight">20</sys:Double>
    <Style x:Key="MyNet.Styles.ToggleButton.Switch" BasedOn="{StaticResource MyNet.Styles.Button.Filled}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding Foreground, RelativeSource={RelativeSource Mode=Self}, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="p:ToggleButtonAssist.OnContent" Value="{Binding Content, RelativeSource={RelativeSource Self}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="8 6 0 0" />
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Width="{Binding Source={StaticResource ToggleButtonWidth}, Converter={x:Static c:MathConverter.Subtract}, ConverterParameter=4}"
                                           Height="{Binding Source={StaticResource ToggleButtonHeight}, Converter={x:Static c:MathConverter.Subtract}, ConverterParameter=4}"
                                           Margin="2 1 0 0"
                                           HorizontalAlignment="Left"
                                           VerticalAlignment="Center"
                                           RadiusX="10"
                                           RadiusY="10"
                                           Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}"
                                           StrokeDashArray="1 2"
                                           StrokeThickness="1" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid Grid.Column="0" Width="{StaticResource ToggleButtonWidth}" Height="{StaticResource ToggleButtonHeight}">
                            <Rectangle x:Name="ToggleRectangle"
                                       Width="{StaticResource ToggleButtonWidth}"
                                       Height="{StaticResource ToggleButtonHeight}"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Fill="{TemplateBinding Background}"
                                       RadiusX="10"
                                       RadiusY="10"
                                       Stroke="{TemplateBinding BorderBrush}"
                                       StrokeThickness="1" />
                            <Rectangle x:Name="MouseOverToggleRectangle"
                                       Width="{StaticResource ToggleButtonWidth}"
                                       Height="{StaticResource ToggleButtonHeight}"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Fill="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                       RadiusX="10"
                                       RadiusY="10"
                                       StrokeThickness="1"
                                       Visibility="Collapsed" />
                            <Rectangle x:Name="ActiveToggleRectangle"
                                       Width="{StaticResource ToggleButtonWidth}"
                                       Height="{StaticResource ToggleButtonHeight}"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Fill="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                       Opacity="0.0"
                                       RadiusX="10"
                                       RadiusY="10"
                                       StrokeThickness="0" />
                            <Ellipse x:Name="ToggleEllipse"
                                     Width="12"
                                     Height="12"
                                     Margin="0"
                                     HorizontalAlignment="Center"
                                     VerticalAlignment="Center"
                                     Fill="{TemplateBinding Foreground}"
                                     RenderTransformOrigin="0.5, 0.5">
                                <Ellipse.RenderTransform>
                                    <TranslateTransform X="-9" />
                                </Ellipse.RenderTransform>
                            </Ellipse>
                            <Ellipse x:Name="ActiveToggleEllipse"
                                     Width="12"
                                     Height="12"
                                     Margin="0"
                                     HorizontalAlignment="Center"
                                     VerticalAlignment="Center"
                                     Fill="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     Opacity="0.0"
                                     RenderTransformOrigin="0.5, 0.5">
                                <Ellipse.RenderTransform>
                                    <TranslateTransform X="-9" />
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Grid>
                        <ContentPresenter x:Name="ContentPresenter"
                                          Grid.Column="1"
                                          Margin="8 0 0 0"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="ContentPresenter" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="Content" Value="">
                            <Setter TargetName="ContentPresenter" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ToggleRectangle"
                                                         Storyboard.TargetProperty="(Rectangle.Opacity)"
                                                         From="1.0"
                                                         To="0.0"
                                                         Duration="00:00:00.167" />
                                        <DoubleAnimation Storyboard.TargetName="ActiveToggleRectangle"
                                                         Storyboard.TargetProperty="(Rectangle.Opacity)"
                                                         From="0.0"
                                                         To="1.0"
                                                         Duration="00:00:00.167" />
                                        <DoubleAnimation Storyboard.TargetName="ToggleEllipse"
                                                         Storyboard.TargetProperty="(Ellipse.Opacity)"
                                                         From="1.0"
                                                         To="0.0"
                                                         Duration="00:00:00.167" />
                                        <DoubleAnimation Storyboard.TargetName="ActiveToggleEllipse"
                                                         Storyboard.TargetProperty="(Ellipse.Opacity)"
                                                         From="0.0"
                                                         To="1.0"
                                                         Duration="00:00:00.167" />
                                        <DoubleAnimation Storyboard.TargetName="ToggleEllipse"
                                                         Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)"
                                                         From="-9"
                                                         To="9"
                                                         Duration="00:00:00.167" />
                                        <DoubleAnimation Storyboard.TargetName="ActiveToggleEllipse"
                                                         Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)"
                                                         From="-9"
                                                         To="9"
                                                         Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ToggleRectangle"
                                                         Storyboard.TargetProperty="(Rectangle.Opacity)"
                                                         From="0.0"
                                                         To="1.0"
                                                         Duration="00:00:00.167" />
                                        <DoubleAnimation Storyboard.TargetName="ActiveToggleRectangle"
                                                         Storyboard.TargetProperty="(Rectangle.Opacity)"
                                                         From="1.0"
                                                         To="0.0"
                                                         Duration="00:00:00.167" />
                                        <DoubleAnimation Storyboard.TargetName="ToggleEllipse"
                                                         Storyboard.TargetProperty="(Ellipse.Opacity)"
                                                         From="0.0"
                                                         To="1.0"
                                                         Duration="00:00:00.167" />
                                        <DoubleAnimation Storyboard.TargetName="ActiveToggleEllipse"
                                                         Storyboard.TargetProperty="(Ellipse.Opacity)"
                                                         From="1.0"
                                                         To="0.0"
                                                         Duration="00:00:00.167" />
                                        <DoubleAnimation Storyboard.TargetName="ToggleEllipse"
                                                         Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)"
                                                         From="9"
                                                         To="-9"
                                                         Duration="00:00:00.167" />
                                        <DoubleAnimation Storyboard.TargetName="ActiveToggleEllipse"
                                                         Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)"
                                                         From="9"
                                                         To="-9"
                                                         Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MouseOverToggleRectangle" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding Path=(p:ToggleButtonAssist.OnContent), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding Path=(p:ToggleButtonAssist.OnContentTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Switch.Accent" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Switch.Custom" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Switch.Foreground" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
    </Style>

    <!--  Switch alternate  -->
    <Style x:Key="MyNet.Styles.ToggleButton.Switch.Alternate" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Medium}}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0 0 2 2" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <SineEase x:Key="RippleEasingFunction" EasingMode="EaseInOut" />
                        <Storyboard x:Key="ShowRipple">
                            <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}"
                                             Storyboard.TargetName="RippleThumb"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.26"
                                             Duration="0" />
                            <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}"
                                             Storyboard.TargetName="RippleThumb"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                             From="1"
                                             To="2.5"
                                             Duration="0:0:0.2" />
                            <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}"
                                             Storyboard.TargetName="RippleThumb"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                             From="1"
                                             To="2.5"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                        <Storyboard x:Key="HideRipple">
                            <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}"
                                             Storyboard.TargetName="RippleThumb"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.3" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Viewbox Width="34">
                        <Grid>
                            <Rectangle x:Name="Track"
                                       Width="40"
                                       Height="15"
                                       Margin="4.211 5 4.211 0"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Top"
                                       Fill="{TemplateBinding BorderBrush}"
                                       RadiusX="7.5"
                                       RadiusY="7.5"
                                       Stroke="{x:Null}" />
                            <Grid x:Name="ThumbHolder" HorizontalAlignment="Left" VerticalAlignment="Top">
                                <Ellipse x:Name="RippleThumb"
                                         Width="25"
                                         Height="25"
                                         Margin="0"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBackground)}"
                                         IsHitTestVisible="False"
                                         Opacity="0"
                                         RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                                <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
                                    <Ellipse x:Name="Thumb"
                                             Width="25"
                                             Height="25"
                                             Margin="0 0 0 0"
                                             HorizontalAlignment="Center"
                                             VerticalAlignment="Center"
                                             Effect="{DynamicResource MyNet.Shadows.Elevation1}"
                                             Fill="{TemplateBinding Background}"
                                             RenderTransformOrigin="0.5,0.5"
                                             Stroke="{x:Null}" />
                                </AdornerDecorator>
                                <ContentPresenter x:Name="ContentPresenter"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  FlowDirection="LeftToRight" />
                                <Grid.RenderTransform>
                                    <TranslateTransform X="0" Y="0" />
                                </Grid.RenderTransform>
                            </Grid>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ThumbHolder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="23.5">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <QuadraticEase EasingMode="EaseOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ThumbHolder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="23.5" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <QuadraticEase EasingMode="EaseOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ThumbHolder"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                                         To="23.5"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ThumbHolder"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                                         To="0"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Thumb" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBackground)}" />
                            <Setter TargetName="Track" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBorderBrush)}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="p:ToggleButtonAssist.HasOnContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ToggleButtonAssist.OnContent)}" />
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ToggleButtonAssist.OnContentTemplate)}" />
                        </MultiTrigger>
                        <Trigger Property="Button.IsDefaulted" Value="true" />
                        <Trigger Property="IsMouseOver" Value="true" />
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ShowRipple}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HideRipple}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground)}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Switch.Alternate.Accent" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch.Alternate}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Switch.Alternate.Custom" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch.Alternate}" TargetType="{x:Type ToggleButton}">
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.Switch.Alternate.Foreground" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch.Alternate}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Checked}}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
    </Style>
</ResourceDictionary>