<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Menu.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.ComboBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Button.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.TextBlock.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.TextBox.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--  Selected Items  -->
    <DataTemplate x:Key="MyNet.DataTemplates.MultiComboBox.SelectedItem">
        <TextBlock HorizontalAlignment="Stretch"
                   VerticalAlignment="Center"
                   Text="{me:Translation}"
                   TextTrimming="CharacterEllipsis"
                   TextWrapping="NoWrap" />
    </DataTemplate>

    <Style x:Key="MyNet.Styles.MultiComboBoxSelectedItem" TargetType="{x:Type ctrl:MultiComboBoxSelectedItem}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Secondary}" />
        <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:MultiComboBoxSelectedItem}">
                    <Grid Margin="1 1 1 0">
                        <Border Grid.ColumnSpan="3" Background="{TemplateBinding Background}" CornerRadius="10" />
                        <Grid Margin="6 1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="AUto" />
                            </Grid.ColumnDefinitions>

                            <ContentControl VerticalAlignment="Center" Content="{TemplateBinding DataContext}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                            <Button x:Name="PART_RemoveItemButton"
                                    Style="{StaticResource MyNet.Styles.Button.Icon.Tool}"
                                    Grid.Column="1"
                                    Width="12"
                                    Height="12"
                                    Margin="2 0 -3 0">
                                <Button.Visibility>
                                    <MultiBinding Converter="{x:Static c:MultipleBooleanToVisibilityConverter.AndCollapse}">
                                        <Binding Path="ShowRemoveItemButton" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ctrl:MultiComboBox}}" />
                                        <Binding Converter="{x:Static c:NotBooleanConverter.Default}" Path="IsReadOnly" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ctrl:MultiComboBox}}" />
                                    </MultiBinding>
                                </Button.Visibility>
                                <ctrl:PackIcon Width="12"
                                             Height="12"
                                             Margin="0"
                                             Kind="CloseCircle" />
                            </Button>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.MultiComboBoxSelectedItems" TargetType="{x:Type ctrl:MultiComboBoxSelectedItems}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.MultiComboBoxSelectedItem}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:MultiComboBoxSelectedItems}">
                    <ScrollViewer CanContentScroll="True"
                                  Focusable="False"
                                  Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                                  HorizontalScrollBarVisibility="Disabled"
                                  OverridesDefaultStyle="True">
                        <ItemsPresenter />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel ClipToBounds="False" Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.MultiComboBoxItem" BasedOn="{StaticResource MyNet.Styles.ComboBoxItem}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="p:ComboBoxAssist.ShowSelectedItem" Value="{Binding Path=(p:ComboBoxAssist.ShowSelectedItem), RelativeSource={RelativeSource AncestorType={x:Type ctrl:MultiComboBox}}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:MultiComboBox}}}" />
    </Style>

    <!--  MultiComboBox  -->
    <ControlTemplate x:Key="MyNet.Templates.MultiComboBox" TargetType="{x:Type ctrl:MultiComboBox}">
        <Grid>
            <AdornerDecorator>
                <Border x:Name="border"
                        ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}"
                        ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                        SnapsToDevicePixels="True">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition x:Name="columnCaret" Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                        </Grid.ColumnDefinitions>

                        <!--  Mouse Over  -->
                        <Border x:Name="mouseOver"
                                Grid.ColumnSpan="2"
                                Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                Visibility="Collapsed" />

                        <!--  Ripple on focus  -->
                        <Border Grid.ColumnSpan="2"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                RenderTransformOrigin="0.5,0.5"
                                Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
                            </Border.RenderTransform>
                        </Border>

                        <ToggleButton x:Name="toggleButton"
                                      Style="{StaticResource MyNet.Styles.ToggleButton.Embedded.ComboBox}"
                                      Grid.ColumnSpan="2"
                                      Padding="{TemplateBinding Padding}"
                                      p:ComboBoxAssist.ShowCaret="{Binding Path=(p:ComboBoxAssist.ShowCaret), RelativeSource={RelativeSource TemplatedParent}}"
                                      p:ComboBoxAssist.ShowDropDownPopup="{Binding Path=(p:ComboBoxAssist.ShowDropDownPopup), RelativeSource={RelativeSource TemplatedParent}}"
                                      p:TextFieldAssist.IsReadOnly="{TemplateBinding IsReadOnly}"
                                      p:TextFieldAssist.RippleOnFocusEnabled="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), RelativeSource={RelativeSource TemplatedParent}}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      BorderThickness="0"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />

                        <Grid Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!--  Icon  -->
                            <ContentControl x:Name="Icon"
                                            Grid.Column="0"
                                            Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}"
                                            VerticalAlignment="Center"
                                            Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}"
                                            Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}"
                                            Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                                <ContentControl.Resources>
                                    <Style BasedOn="{StaticResource MyNet.Styles.PackIcon}" TargetType="{x:Type ctrl:PackIcon}">
                                        <Setter Property="Width" Value="20" />
                                        <Setter Property="Height" Value="20" />
                                    </Style>
                                    <Style BasedOn="{StaticResource MyNet.Styles.GeometryIcon}" TargetType="{x:Type ctrl:GeometryIcon}">
                                        <Setter Property="Width" Value="20" />
                                        <Setter Property="Height" Value="20" />
                                    </Style>
                                </ContentControl.Resources>
                            </ContentControl>

                            <!--  Content  -->
                            <Grid x:Name="grid"
                                  Grid.Column="1"
                                  MinWidth="1"
                                  MinHeight="18">
                                <Grid Grid.Column="0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <!--  Prefix  -->
                                    <TextBlock x:Name="PrefixTextBlock"
                                               Grid.Column="0"
                                               Margin="{StaticResource MyNet.Margins.Small.Horizontal}"
                                               FontSize="{TemplateBinding FontSize}"
                                               Opacity="{TemplateBinding p:HintAssist.HintOpacity}"
                                               Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                                        <TextBlock.Visibility>
                                            <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                                                <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                                                <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                                            </MultiBinding>
                                        </TextBlock.Visibility>
                                    </TextBlock>

                                    <!--  Selected Item  -->
                                    <Grid Grid.Column="1"
                                          Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <ctrl:MultiComboBoxSelectedItems x:Name="PART_MultiComboBoxSelectedItems"
                                                                         Style="{StaticResource MyNet.Styles.MultiComboBoxSelectedItems}"
                                                                         DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                                                                         Focusable="False"
                                                                         ItemTemplate="{TemplateBinding SelectedItemTemplate}"
                                                                         ItemsSource="{TemplateBinding SelectedItems}"
                                                                         Visibility="{Binding HasSelectedItems, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                                        <TextBox x:Name="PART_EditableTextBox"
                                                 Style="{StaticResource MyNet.Styles.TextBox.Embedded}"
                                                 Grid.Row="1"
                                                 Margin="0 1 0 0"
                                                 p:TextFieldAssist.Mask="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:TextFieldAssist.Mask)}"
                                                 CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"
                                                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                                 SelectionBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}"
                                                 Visibility="Collapsed" />
                                    </Grid>

                                    <!--  Suffix  -->
                                    <TextBlock x:Name="SuffixTextBlock"
                                               Grid.Column="2"
                                               Margin="{StaticResource MyNet.Margins.Small.Horizontal}"
                                               FontSize="{TemplateBinding FontSize}"
                                               Opacity="{TemplateBinding p:HintAssist.HintOpacity}"
                                               Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />

                                    <!--  Clear button  -->
                                    <Button x:Name="PART_ClearButton" Style="{StaticResource MyNet.Styles.Button.Icon.Tool.Clear}" Grid.Column="3">
                                        <Button.Visibility>
                                            <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                                                <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                                                <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                                            </MultiBinding>
                                        </Button.Visibility>
                                    </Button>

                                    <!--  Down Button  -->
                                    <RepeatButton x:Name="PART_NumericDown"
                                                  Style="{StaticResource MyNet.Styles.Button.Icon.Tool}"
                                                  Grid.Column="4"
                                                  Command="{Binding Path=(p:ComboBoxAssist.DownCommand), RelativeSource={RelativeSource TemplatedParent}}"
                                                  CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                  Content="{me:Icon Kind=Minus}"
                                                  Visibility="Collapsed" />

                                    <!--  Up Button  -->
                                    <RepeatButton x:Name="PART_NumericUp"
                                                  Style="{StaticResource MyNet.Styles.Button.Icon.Tool}"
                                                  Grid.Column="5"
                                                  Command="{Binding Path=(p:ComboBoxAssist.UpCommand), RelativeSource={RelativeSource TemplatedParent}}"
                                                  CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                  Content="{me:Icon Kind=Plus}"
                                                  Visibility="Collapsed" />
                                </Grid>

                                <!--  SmartHint  -->
                                <ctrl:SmartHint x:Name="Hint"
                                                Grid.Column="0"
                                                Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}"
                                                FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}"
                                                FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}"
                                                FontFamily="{TemplateBinding p:HintAssist.FontFamily}"
                                                FontSize="{TemplateBinding FontSize}"
                                                HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}"
                                                HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}"
                                                UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                                    <ctrl:SmartHint.Hint>
                                        <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                                            <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                                        </Border>
                                    </ctrl:SmartHint.Hint>
                                </ctrl:SmartHint>
                            </Grid>
                        </Grid>
                    </Grid>
                </Border>
            </AdornerDecorator>

            <!--  Underline  -->
            <ctrl:Underline x:Name="Underline"
                            Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}"
                            IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                            Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />

            <!--  Helper text  -->
            <Canvas VerticalAlignment="Bottom">
                <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
                    <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
                </Grid>
            </Canvas>

            <!--  Popup  -->
            <ctrl:ComboBoxPopup x:Name="PART_Popup"
                                Grid.Column="0"
                                AllowsTransparency="True"
                                Background="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource TemplatedParent}}"
                                ClassicContentTemplate="{StaticResource MyNet.Styles.ContentControl.Embedded.ComboBox.Popup}"
                                ContentMargin="6,0,6,6"
                                ContentMinWidth="{Binding Path=ActualWidth, ElementName=border}"
                                DefaultVerticalOffset="-1"
                                DownVerticalOffset="0"
                                Focusable="False"
                                HorizontalOffset="-7"
                                Placement="Custom"
                                PlacementTarget="{Binding ElementName=border}"
                                PopupAnimation="Slide"
                                RelativeHorizontalOffset="0"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                TextElement.Foreground="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}"
                                UpVerticalOffset="15"
                                UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                VerticalOffset="0">
                <ctrl:ComboBoxPopup.IsOpen>
                    <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
                        <Binding Path="IsDropDownOpen" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="(p:ComboBoxAssist.ShowDropDownPopup)" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                </ctrl:ComboBoxPopup.IsOpen>
                <ctrl:ComboBoxPopup.Style>
                    <Style TargetType="{x:Type ctrl:ComboBoxPopup}">
                        <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container.Bottom}" />
                        <Style.Triggers>
                            <Trigger Property="OpenDirection" Value="Up">
                                <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container.Top}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ctrl:ComboBoxPopup.Style>
                <ContentControl>
                    <ctrl:DynamicScrollViewer MinHeight="1"
                                              MaxHeight="{Binding Path=MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}"
                                              Background="{Binding Background, ElementName=PART_Popup}"
                                              Foreground="{Binding ElementName=PART_Popup, Path=(TextElement.Foreground)}">
                        <Grid>
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" Visibility="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}"
                                       Margin="16 8"
                                       Text="{me:Resource NoResults}"
                                       Visibility="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
                        </Grid>
                    </ctrl:DynamicScrollViewer>
                </ContentControl>
            </ctrl:ComboBoxPopup>

            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Focused">
                        <Storyboard TargetName="RippleOnFocusScaleTransform">
                            <DoubleAnimation Storyboard.TargetProperty="ScaleX"
                                             From="0"
                                             To="1"
                                             Duration="0:0:0.3">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetProperty="ScaleY"
                                             From="0"
                                             To="1"
                                             Duration="0:0:0.3">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation BeginTime="0:0:0.45"
                                             Storyboard.TargetProperty="ScaleX"
                                             To="0"
                                             Duration="0" />
                            <DoubleAnimation BeginTime="0:0:0.45"
                                             Storyboard.TargetProperty="ScaleY"
                                             To="0"
                                             Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unfocused">
                        <Storyboard TargetName="RippleOnFocusScaleTransform">
                            <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
                            <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <ControlTemplate.Triggers>
            <!--  Icon Alignment  -->
            <Trigger Property="p:IconAssist.Alignment" Value="Right">
                <Setter TargetName="Icon" Property="Grid.Column" Value="2" />
            </Trigger>
            <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="p:IconAssist.Alignment" Value="Top">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <!--  Show DropDown Popup  -->
            <Trigger Property="p:ComboBoxAssist.ShowUpDownButton" Value="True">
                <Setter TargetName="PART_NumericDown" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_NumericUp" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="p:ComboBoxAssist.ShowDropDownPopup" Value="False">
                <Setter TargetName="PART_EditableTextBox" Property="HorizontalAlignment" Value="Stretch" />
                <Setter TargetName="columnCaret" Property="MinWidth" Value="0" />
            </Trigger>

            <!--  Show Caret  -->
            <Trigger Property="p:ComboBoxAssist.ShowCaret" Value="False">
                <Setter TargetName="columnCaret" Property="MinWidth" Value="0" />
            </Trigger>

            <!--  IsEditable  -->
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(p:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>


            <!--  Hint  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition Property="p:HintAssist.IsFloating" Value="True" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                    <Condition Property="p:HintAssist.IsFloating" Value="True" />
                    <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <Trigger Property="p:HintAssist.IsFloating" Value="True">
                <Setter TargetName="Hint" Property="FloatingOffset">
                    <Setter.Value>
                        <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="grid" Property="Margin">
                    <Setter.Value>
                        <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="toggleButton" Property="p:TextFieldAssist.TextBoxViewMargin">
                    <Setter.Value>
                        <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  IsMouseOver  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsKeyboardFocused" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
                <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>

            <!--  IsKeyboardFocused  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Underline" Property="IsActive" Value="True" />
                <Setter Property="Background" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Self}}" />
                <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="toggleButton" Property="BorderBrush" Value="{Binding Path=(p:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>

            <!--  IsDropDownOpen  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownOpen" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Underline" Property="IsActive" Value="True" />
                <Setter Property="Background" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Self}}" />
                <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="toggleButton" Property="BorderBrush" Value="{Binding Path=(p:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>

            <!--  Validation.HasError  -->
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
                <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
                <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <!--  IsEnabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
                <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
            </MultiTrigger>

            <!--  IsReadOnly  -->
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Opacity" Value="1" />
                <Setter TargetName="grid" Property="Opacity" Value="1" />
                <Setter TargetName="border" Property="Opacity" Value="1" />
                <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
                <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_NumericDown" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_NumericUp" Property="Visibility" Value="Collapsed" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>

        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style x:Key="MyNet.Styles.MultiComboBox" TargetType="{x:Type ctrl:MultiComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="BorderThickness" Value="0 0 0 1" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
        <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
        <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
        <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.MultiComboBox}" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
        <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
        <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
        <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
        <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="p:IconAssist.Alignment" Value="Left" />
        <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.ComboBox.HelperText}" />
        <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
        <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
        <Setter Property="IsTextSearchEnabled" Value="True" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.MultiComboBoxItem}" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="p:ComboBoxAssist.ShowSelectedItem" Value="True" />
        <Setter Property="SelectionMode" Value="Multiple" />
        <Setter Property="SelectedItemTemplate" Value="{StaticResource MyNet.DataTemplates.MultiComboBox.SelectedItem}" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="p:ComboBoxAssist.ShowSelectedItem" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.MultiComboBox.Foreground" BasedOn="{StaticResource MyNet.Styles.MultiComboBox}" TargetType="{x:Type ctrl:MultiComboBox}">
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

    <Style x:Key="MyNet.Styles.MultiComboBox.Filled" BasedOn="{StaticResource MyNet.Styles.MultiComboBox}" TargetType="{x:Type ctrl:MultiComboBox}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Control.Background.Secondary}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    </Style>
    <Style x:Key="MyNet.Styles.MultiComboBox.Filled.Foreground" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.Filled}" TargetType="{x:Type ctrl:MultiComboBox}">
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Checked}}" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

    <Style x:Key="MyNet.Styles.MultiComboBox.Outlined" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.Filled}" TargetType="{x:Type ctrl:MultiComboBox}">
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
        <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="2" />
        <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    </Style>
    <Style x:Key="MyNet.Styles.MultiComboBox.Outlined.Foreground" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.Outlined}" TargetType="{x:Type ctrl:MultiComboBox}">
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Checked}}" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    </Style>
</ResourceDictionary>