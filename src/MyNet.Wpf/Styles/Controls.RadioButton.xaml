<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Button.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.CheckBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.FocusVisualStyle.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.PackIcon.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.GeometryIcon.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="MyNet.Styles.RadioButton" BasedOn="{StaticResource MyNet.Styles.CheckBox}" TargetType="{x:Type RadioButton}">
        <Setter Property="p:CheckBoxAssist.UncheckedPath" Value="M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
        <Setter Property="p:CheckBoxAssist.CheckedPath" Value="M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7Z" />
        <Setter Property="p:CheckBoxAssist.IndeterminatePath" Value="M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7Z" />
    </Style>
    <Style x:Key="MyNet.Styles.RadioButton.Accent" BasedOn="{StaticResource MyNet.Styles.RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    </Style>
    <Style x:Key="MyNet.Styles.RadioButton.Foreground" BasedOn="{StaticResource MyNet.Styles.RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

    <Style x:Key="MyNet.Styles.RadioButton.Chip" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip}" TargetType="{x:Type RadioButton}">
        <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
    </Style>
    <Style x:Key="MyNet.Styles.RadioButton.Chip.Accent" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Accent}" TargetType="{x:Type RadioButton}">
        <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
    </Style>
    <Style x:Key="MyNet.Styles.RadioButton.Chip.Foreground" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Foreground}" TargetType="{x:Type RadioButton}">
        <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
    </Style>

    <Style x:Key="MyNet.Styles.RadioButton.Chip.Alternate" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Alternate}" TargetType="{x:Type RadioButton}">
        <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
    </Style>
    <Style x:Key="MyNet.Styles.RadioButton.Chip.Alternate.Accent" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Alternate.Accent}" TargetType="{x:Type RadioButton}">
        <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
    </Style>
    <Style x:Key="MyNet.Styles.RadioButton.Chip.Alternate.Foreground" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Alternate.Foreground}" TargetType="{x:Type RadioButton}">
        <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
    </Style>

    <Style x:Key="MyNet.Styles.RadioButton.Tab" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="BorderThickness" Value="0 0 0 2" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="MinWidth" Value="80" />
        <Setter Property="Padding" Value="16 4 16 4" />
        <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Icon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Resources>
                        <Style BasedOn="{StaticResource MyNet.Styles.PackIcon}" TargetType="{x:Type ctrl:PackIcon}">
                            <Setter Property="Width" Value="24" />
                            <Setter Property="Height" Value="24" />
                        </Style>
                        <Style BasedOn="{StaticResource MyNet.Styles.GeometryIcon}" TargetType="{x:Type ctrl:GeometryIcon}">
                            <Setter Property="Width" Value="24" />
                            <Setter Property="Height" Value="24" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid SnapsToDevicePixels="true">
                        <Border Margin="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <ctrl:Ripple x:Name="contentPresenter"
                                         Padding="{TemplateBinding Padding}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Content="{TemplateBinding Content}"
                                         ContentTemplate="{TemplateBinding ContentTemplate}"
                                         Focusable="False"
                                         Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <Border x:Name="SelectionHighlightBorder"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Visibility="Hidden" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="1.0" />
                            <Setter TargetName="SelectionHighlightBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="1.0" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>