<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Duration x:Key="ExpandDuration">0:0:0.250</Duration>
    <Duration x:Key="CollapseDuration">0:0:0.200</Duration>

    <KeyTime x:Key="ExpandKeyTime">0:0:0.250</KeyTime>
    <KeyTime x:Key="CollapseKeyTime">0:0:0.200</KeyTime>


    <Style x:Key="MyNet.Styles.ToggleButton.Embedded.Expander" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource ExpandKeyTime}" Value="180" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource CollapseKeyTime}" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ctrl:PackIcon x:Name="ExpandPath"
                                       Width="24"
                                       Height="24"
                                       Foreground="{TemplateBinding Foreground}"
                                       Kind="ChevronDown"
                                       Opacity="{StaticResource MyNet.Opacity.Medium}"
                                       RenderTransformOrigin="0.5 0.5">
                            <ctrl:PackIcon.RenderTransform>
                                <RotateTransform x:Name="ExpandPathRotateTransform" />
                            </ctrl:PackIcon.RenderTransform>
                        </ctrl:PackIcon>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.ToggleButton.Embedded.Expander.Header.Horizontal" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ctrl:Card Padding="{Binding Path=(p:ExpanderAssist.HorizontalHeaderPadding), RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}"
                               p:ElevationAssist.Elevation="{Binding Path=(p:ElevationAssist.Elevation), RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}"
                               Background="{TemplateBinding Background}"
                               Foreground="{TemplateBinding Foreground}"
                               UniformCornerRadius="{Binding Path=(p:ThemeAssist.UniformCornerRadius), RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="16" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter Grid.Column="0"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />

                            <ToggleButton x:Name="ExpanderButton"
                                          Grid.Column="2"
                                          VerticalAlignment="Center"
                                          Focusable="False"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          RenderTransformOrigin="0.5 0.5">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Up">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="180" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>

                        </Grid>
                    </ctrl:Card>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.ToggleButton.Embedded.Expander.Header.Vertical" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{Binding Path=(p:ExpanderAssist.VerticalHeaderPadding), RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Background="{TemplateBinding Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="16" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <ToggleButton x:Name="ExpanderButton"
                                          Grid.Row="0"
                                          VerticalAlignment="Center"
                                          Focusable="False"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          RenderTransformOrigin="0.5 0.5">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander}">
                                        <Style.Triggers>

                                            <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Left">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="90" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Right">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="-90" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>

                            <ContentPresenter Grid.Row="2"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.Expander" TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates">

                                <VisualStateGroup.Transitions>
                                    <VisualTransition To="Expanded">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="ContentPanel"
                                                             Storyboard.TargetProperty="Opacity"
                                                             From="0"
                                                             To="1"
                                                             Duration="{DynamicResource ExpandDuration}" />
                                            <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform"
                                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                             From="0"
                                                             To="1"
                                                             Duration="{DynamicResource ExpandDuration}">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility" Duration="0:0:0">
                                                <DiscreteObjectKeyFrame KeyTime="0%" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>

                                    <VisualTransition To="Collapsed">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="ContentPanel"
                                                             Storyboard.TargetProperty="Opacity"
                                                             From="1"
                                                             To="0"
                                                             Duration="{DynamicResource CollapseDuration}" />
                                            <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform"
                                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                             From="1"
                                                             To="0"
                                                             Duration="{DynamicResource CollapseDuration}">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility" Duration="{DynamicResource CollapseDuration}">
                                                <DiscreteObjectKeyFrame KeyTime="100%" Value="{x:Static Visibility.Collapsed}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>

                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ContentPanel"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform"
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                         To="1"
                                                         Duration="0" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0%" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ContentPanel"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform"
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                         To="0"
                                                         Duration="0" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="100%" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <DockPanel Background="{TemplateBinding Background}">
                            <ToggleButton Name="HeaderSite"
                                          Background="{TemplateBinding p:HeaderAssist.Background}"
                                          BorderThickness="0"
                                          Content="{TemplateBinding Header}"
                                          ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          Cursor="Hand"
                                          DockPanel.Dock="Top"
                                          Focusable="False"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          IsTabStop="False"
                                          TextElement.FontSize="{TemplateBinding p:HeaderAssist.FontSize}" />

                            <Border Name="ContentSite">
                                <Border.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform x:Name="ContentSiteScaleTransform" />
                                        <RotateTransform Angle="{Binding Path=ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander}, Converter={x:Static c:ExpanderRotateAngleConverter.Default}}" />
                                    </TransformGroup>
                                </Border.LayoutTransform>

                                <Grid Name="ContentPanel"
                                      Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid.LayoutTransform>
                                        <RotateTransform Angle="{Binding Path=ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander}, Converter={x:Static c:ExpanderRotateAngleConverter.Default}, ConverterParameter=-1}" />
                                    </Grid.LayoutTransform>

                                    <ContentPresenter Name="PART_Content"
                                                      ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                                      ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                      Focusable="False"
                                                      Visibility="Collapsed" />

                                </Grid>
                            </Border>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Header.Vertical}" />
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Header.Vertical}" />
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Header.Horizontal}" />
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Down">
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Header.Horizontal}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
        <Setter Property="p:ExpanderAssist.HorizontalHeaderPadding" Value="{StaticResource MyNet.Margins.Default}" />
        <Setter Property="p:ExpanderAssist.VerticalHeaderPadding" Value="{StaticResource MyNet.Margins.Default}" />
        <Setter Property="p:HeaderAssist.Background" Value="Transparent" />
        <Setter Property="p:HeaderAssist.FontSize" Value="{StaticResource MyNet.Font.Size.Caption}" />
        <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
    </Style>

    <Style x:Key="MyNet.Styles.Expander.Bordered" TargetType="{x:Type Expander}" BasedOn="{StaticResource MyNet.Styles.Expander}">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <ContentControl Margin="{StaticResource MyNet.Margins.Default.Bottom}" Content="{Binding}" />
                        <Border Height="1"
                                Margin="0 0 -40 0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Bottom"
                                Background="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
        <Setter Property="p:ExpanderAssist.HorizontalHeaderPadding" Value="0" />
    </Style>
    <Style x:Key="MyNet.Styles.Expander.Bordered.Foreground" TargetType="{x:Type Expander}" BasedOn="{StaticResource MyNet.Styles.Expander.Bordered}">
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    </Style>

</ResourceDictionary>