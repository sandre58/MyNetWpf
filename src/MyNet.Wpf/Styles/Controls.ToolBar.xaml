<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MyNet.Wpf.Converters"
                    xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls"
                    xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions"
                    xmlns:p="clr-namespace:MyNet.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Bases.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Button.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.FocusVisualStyle.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.CheckBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.ComboBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.DatePicker.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Separator.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.Menu.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.ListBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.GroupBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.ToggleButton.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/Controls.TextBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.Badged.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.TimePicker.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.MultiComboBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.DropDownButton.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.SplitButton.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.NumericUpDown.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Styles/MyNet.ColorPicker.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="MyNet.Styles.Thumb.Embedded.ToolBar" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="Transparent" SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile"
                                              Viewbox="0,0,4,4"
                                              ViewboxUnits="Absolute"
                                              Viewport="0,0,4,4"
                                              ViewportUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z" />
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="SizeAll" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.ToggleButton.Embedded.ToolBar.Overflow.Vertical" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{StaticResource MyNet.CornerRadius.Control.Bottom}"
                            SnapsToDevicePixels="true">
                        <Viewbox Width="16" Height="16">
                            <Canvas Width="24" Height="24">
                                <Path Data="M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z" Fill="{TemplateBinding Foreground}" />
                            </Canvas>
                        </Viewbox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.ToggleButton.Embedded.ToolBar.Overflow.Horizontal" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Embedded.ToolBar.Overflow.Vertical}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{StaticResource MyNet.CornerRadius.Control.Right}"
                            SnapsToDevicePixels="true">
                        <Viewbox Width="16" Height="16" Margin="8 0 8 0">
                            <Canvas Width="24" Height="24">
                                <Path Data="M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z" Fill="{TemplateBinding Foreground}" />
                            </Canvas>
                        </Viewbox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MyNet.Styles.Button.ToolBar" BasedOn="{StaticResource MyNet.Styles.Button.Text}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="46" />
        <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.ToolBar.Elevation" BasedOn="{StaticResource MyNet.Styles.Button.Elevation}" TargetType="{x:Type ButtonBase}">
        <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="46" />
        <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.ToolBar.Elevation.Primary" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar.Elevation}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ToggleButton.ToolBar" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Text}" TargetType="ToggleButton">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="46" />
        <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.DropDownButton.ToolBar" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Text}" TargetType="{x:Type ctrl:DropDownButton}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="46" />
        <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.DropDownButton.ToolBar.Elevation" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Elevation}" TargetType="{x:Type ctrl:DropDownButton}">
        <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="46" />
        <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.DropDownButton.ToolBar.Elevation.Primary" BasedOn="{StaticResource MyNet.Styles.DropDownButton.ToolBar.Elevation}" TargetType="{x:Type ctrl:DropDownButton}">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.SplitButton.ToolBar" BasedOn="{StaticResource MyNet.Styles.SplitButton.Text}" TargetType="{x:Type ctrl:SplitButton}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="46" />
        <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.SplitButton.ToolBar.Elevation" BasedOn="{StaticResource MyNet.Styles.SplitButton.Elevation}" TargetType="{x:Type ctrl:SplitButton}">
        <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="46" />
        <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.SplitButton.ToolBar.Elevation.Primary" BasedOn="{StaticResource MyNet.Styles.SplitButton.ToolBar.Elevation}" TargetType="{x:Type ctrl:SplitButton}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    </Style>
    <Style x:Key="MyNet.Styles.ComboBox.ToolBar" BasedOn="{StaticResource MyNet.Styles.ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
        <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="46" />
        <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
        <Setter Property="p:ComboBoxAssist.ShowSelectedItem" Value="True" />
        <Setter Property="p:ComboBoxAssist.ShowDropDownPopup" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton Name="PART_Toggle"
                                      Style="{StaticResource MyNet.Styles.ToggleButton.Filled}"
                                      Width="Auto"
                                      Height="Auto"
                                      Padding="{TemplateBinding Padding}"
                                      HorizontalAlignment="Stretch"
                                      VerticalAlignment="Stretch"
                                      HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                      p:RippleAssist.Feedback="{TemplateBinding p:RippleAssist.Feedback}"
                                      p:ThemeAssist.CornerRadius="{TemplateBinding p:ThemeAssist.CornerRadius}"
                                      p:ThemeAssist.IsCheckedBackground="{TemplateBinding p:ThemeAssist.IsCheckedBackground}"
                                      p:ThemeAssist.IsCheckedBorderBrush="{TemplateBinding p:ThemeAssist.IsCheckedBorderBrush}"
                                      p:ThemeAssist.IsCheckedForeground="{TemplateBinding p:ThemeAssist.IsCheckedForeground}"
                                      p:ThemeAssist.IsMouseOverBackground="{TemplateBinding p:ThemeAssist.IsMouseOverBackground}"
                                      p:ThemeAssist.IsMouseOverBorderBrush="{TemplateBinding p:ThemeAssist.IsMouseOverBorderBrush}"
                                      p:ThemeAssist.IsMouseOverForeground="{TemplateBinding p:ThemeAssist.IsMouseOverForeground}"
                                      Background="{TemplateBinding Background}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      BorderThickness="{TemplateBinding BorderThickness}"
                                      ContentTemplate="{x:Null}"
                                      Cursor="{TemplateBinding Cursor}"
                                      Focusable="{TemplateBinding Focusable}"
                                      FontSize="{TemplateBinding FontSize}"
                                      FontWeight="{TemplateBinding FontWeight}"
                                      Foreground="{TemplateBinding Foreground}"
                                      IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
                                      IsTabStop="False"
                                      TabIndex="{TemplateBinding TabIndex}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="Col0" Width="*" />
                                    <ColumnDefinition x:Name="Col1" Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="Row0" Height="Auto" />
                                    <RowDefinition x:Name="Row1" Height="Auto" />
                                </Grid.RowDefinitions>
                                <ctrl:PackIcon x:Name="Caret"
                                               Grid.Row="0"
                                               Grid.Column="1"
                                               Width="18"
                                               Height="18"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               Kind="ChevronDown"
                                               RenderTransformOrigin="0.5, 0.5"
                                               Visibility="{Binding Path=(p:ComboBoxAssist.ShowCaret), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                                    <ctrl:PackIcon.RenderTransform>
                                        <RotateTransform Angle="0" />
                                    </ctrl:PackIcon.RenderTransform>
                                </ctrl:PackIcon>
                                <ContentControl x:Name="Content"
                                                Grid.Row="0"
                                                Grid.Column="0"
                                                Content="{TemplateBinding SelectionBoxItem}"
                                                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                            </Grid>
                        </ToggleButton>
                        <!--  Popup  -->
                        <ctrl:ComboBoxPopup x:Name="PART_Popup"
                                            Grid.Column="0"
                                            AllowsTransparency="True"
                                            Background="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource TemplatedParent}}"
                                            ClassicContentTemplate="{StaticResource MyNet.Styles.ContentControl.Embedded.ComboBox.Popup}"
                                            ContentMargin="6,0,6,6"
                                            ContentMinWidth="{Binding Path=ActualWidth, ElementName=PART_Toggle}"
                                            DefaultVerticalOffset="-1"
                                            DownVerticalOffset="0"
                                            Focusable="False"
                                            HorizontalOffset="-7"
                                            Placement="Custom"
                                            PlacementTarget="{Binding ElementName=PART_Toggle}"
                                            PopupAnimation="Slide"
                                            RelativeHorizontalOffset="0"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            TextElement.Foreground="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}"
                                            UpVerticalOffset="15"
                                            UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                            VerticalOffset="0">
                            <ctrl:ComboBoxPopup.IsOpen>
                                <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
                                    <Binding Path="IsDropDownOpen" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="(p:ComboBoxAssist.ShowDropDownPopup)" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </ctrl:ComboBoxPopup.IsOpen>
                            <ctrl:ComboBoxPopup.Style>
                                <Style TargetType="{x:Type ctrl:ComboBoxPopup}">
                                    <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container.Bottom}" />
                                    <Style.Triggers>
                                        <Trigger Property="OpenDirection" Value="Up">
                                            <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container.Top}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ctrl:ComboBoxPopup.Style>
                            <ContentControl>
                                <ctrl:DynamicScrollViewer MinHeight="1"
                                                          MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                                          Background="{Binding Background, ElementName=PART_Popup}"
                                                          Foreground="{Binding ElementName=PART_Popup, Path=(TextElement.Foreground)}">
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ctrl:DynamicScrollViewer>
                            </ContentControl>
                        </ctrl:ComboBoxPopup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Caret"
                                                         Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)"
                                                         From="0"
                                                         To="180"
                                                         Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Caret"
                                                         Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)"
                                                         From="180"
                                                         To="0"
                                                         Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="true">
                <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyNet.Styles.ListBox.ToolBar" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle}" TargetType="{x:Type ListBox}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Small.Vertical}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
        <Setter Property="p:ElevationAssist.Elevation" Value="Dp0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource MyNet.Styles.ListBoxItem}" TargetType="ListBoxItem">
                    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Small.Horizontal}" />
                    <Setter Property="MinWidth" Value="46" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="VerticalAlignment" Value="Stretch" />
                    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Small}" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyNet.Styles.CheckBox.ToolBar" BasedOn="{StaticResource MyNet.Styles.CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.RadioButton.ToolBar" BasedOn="{StaticResource MyNet.Styles.RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.MultiComboBox.ToolBar" BasedOn="{StaticResource MyNet.Styles.MultiComboBox}" TargetType="{x:Type ctrl:MultiComboBox}">
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.DatePicker.ToolBar" BasedOn="{StaticResource MyNet.Styles.DatePicker}" TargetType="{x:Type DatePicker}">
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.TimePicker.ToolBar" BasedOn="{StaticResource MyNet.Styles.TimePicker}" TargetType="{x:Type ctrl:TimePicker}">
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.ColorPicker.ToolBar" BasedOn="{StaticResource MyNet.Styles.ColorPicker}" TargetType="{x:Type ctrl:ColorPicker}">
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.TextBox.ToolBar" BasedOn="{StaticResource MyNet.Styles.TextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.NumericUpDown.ToolBar" BasedOn="{StaticResource MyNet.Styles.NumericUpDown}" TargetType="{x:Type ctrl:NumericUpDown}">
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.GroupBox.ToolBar" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean.Caption}" TargetType="{x:Type GroupBox}">
        <Setter Property="p:HeaderAssist.FontSize" Value="11" />
        <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="Center" />
        <Setter Property="p:HeaderAssist.Padding" Value="0" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="p:HeaderAssist.Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    </Style>
    <Style x:Key="MyNet.Styles.Badged.ToolBar" BasedOn="{StaticResource MyNet.Styles.Badged}" TargetType="{x:Type ctrl:Badged}">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>
    <Style x:Key="MyNet.Styles.Label.ToolBar" BasedOn="{StaticResource {x:Type Label}}" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style x:Key="MyNet.Styles.ToolBar" TargetType="{x:Type ToolBar}">
        <Style.Resources>
            <Style BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" TargetType="{x:Type Button}" />
            <Style BasedOn="{StaticResource MyNet.Styles.ToggleButton.ToolBar}" TargetType="{x:Type ToggleButton}" />
            <Style BasedOn="{StaticResource MyNet.Styles.DropDownButton.ToolBar}" TargetType="{x:Type ctrl:DropDownButton}" />
            <Style BasedOn="{StaticResource MyNet.Styles.SplitButton.ToolBar}" TargetType="{x:Type ctrl:SplitButton}" />
            <Style BasedOn="{StaticResource MyNet.Styles.ComboBox.ToolBar}" TargetType="{x:Type ComboBox}" />
            <Style BasedOn="{StaticResource MyNet.Styles.ListBox.ToolBar}" TargetType="{x:Type ListBox}" />
            <Style BasedOn="{StaticResource MyNet.Styles.MultiComboBox.ToolBar}" TargetType="{x:Type ctrl:MultiComboBox}" />
            <Style BasedOn="{StaticResource MyNet.Styles.DatePicker.ToolBar}" TargetType="{x:Type DatePicker}" />
            <Style BasedOn="{StaticResource MyNet.Styles.TimePicker.ToolBar}" TargetType="{x:Type ctrl:TimePicker}" />
            <Style BasedOn="{StaticResource MyNet.Styles.ColorPicker.ToolBar}" TargetType="{x:Type ctrl:ColorPicker}" />
            <Style BasedOn="{StaticResource MyNet.Styles.TextBox.ToolBar}" TargetType="{x:Type TextBox}" />
            <Style BasedOn="{StaticResource MyNet.Styles.NumericUpDown.ToolBar}" TargetType="{x:Type ctrl:NumericUpDown}" />
            <Style BasedOn="{StaticResource MyNet.Styles.GroupBox.ToolBar}" TargetType="{x:Type GroupBox}" />
            <Style BasedOn="{StaticResource MyNet.Styles.Badged.ToolBar}" TargetType="{x:Type ctrl:Badged}" />
            <Style BasedOn="{StaticResource MyNet.Styles.Label.ToolBar}" TargetType="{x:Type Label}" />
            <Style BasedOn="{StaticResource MyNet.Styles.Separator.Vertical}" TargetType="{x:Type Separator}" />
        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
        <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
        <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
        <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Small}" />
        <Setter Property="MinHeight" Value="54" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
        <Setter Property="FocusManager.IsFocusScope" Value="False" />
        <Setter Property="ToolBarTray.IsLocked" Value="true" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="p:IconAssist.Alignment" Value="Top" />
        <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Bottom}" />
        <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
        <Setter Property="p:LayoutAssist.InnerMargin" Value="{StaticResource MyNet.Margins.Small}" />
        <Setter Property="p:LayoutAssist.InnerPadding" Value="2 5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <ctrl:Card Padding="0"
                               p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               ClipContent="False"
                               UniformCornerRadius="{TemplateBinding p:ThemeAssist.UniformCornerRadius}">
                        <DockPanel x:Name="Grid">
                            <Grid x:Name="OverflowGrid" HorizontalAlignment="Right" DockPanel.Dock="Right">
                                <ToggleButton x:Name="OverflowButton"
                                              Style="{StaticResource MyNet.Styles.ToggleButton.Embedded.ToolBar.Overflow.Horizontal}"
                                              Background="{TemplateBinding Background}"
                                              ClickMode="Press"
                                              FocusVisualStyle="{x:Null}"
                                              Foreground="{TemplateBinding Foreground}"
                                              IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HasOverflowItems, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                                <Popup x:Name="OverflowPopup"
                                       Margin="1"
                                       AllowsTransparency="true"
                                       Focusable="false"
                                       IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                       Placement="Bottom"
                                       PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                       StaysOpen="false">
                                    <Popup.CacheMode>
                                        <BitmapCache EnableClearType="True" />
                                    </Popup.CacheMode>
                                    <Grid>
                                        <Border Background="White" Opacity="0.002" />
                                        <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" Background="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource Mode=TemplatedParent}}" Foreground="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                            <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                                                  Margin="2"
                                                                  FocusVisualStyle="{x:Null}"
                                                                  Focusable="true"
                                                                  KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                  KeyboardNavigation.TabNavigation="Cycle"
                                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                  WrapWidth="200" />
                                        </ctrl:Card>
                                    </Grid>
                                </Popup>
                            </Grid>
                            <Border x:Name="MainPanelBorder" Padding="{TemplateBinding Padding}">
                                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                    <Thumb x:Name="ToolBarThumb"
                                           Style="{StaticResource MyNet.Styles.Thumb.Embedded.ToolBar}"
                                           Width="10"
                                           Margin="-3 -1 4 0"
                                           Padding="6 5 1 3" />
                                    <ContentPresenter x:Name="ToolBarHeader"
                                                      Margin="4 0 4 0"
                                                      HorizontalAlignment="Center"
                                                      VerticalAlignment="Center"
                                                      ContentSource="Header"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    <ToolBarPanel x:Name="PART_ToolBarPanel"
                                                  Margin="0 0 2 0"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  IsItemsHost="true"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </DockPanel>
                            </Border>
                        </DockPanel>
                    </ctrl:Card>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="Grid" Property="Margin" Value="1 3 1 1" />
                            <Setter TargetName="OverflowButton" Property="Style" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.ToolBar.Overflow.Vertical}" />
                            <Setter TargetName="ToolBarThumb" Property="Height" Value="10" />
                            <Setter TargetName="ToolBarThumb" Property="Width" Value="Auto" />
                            <Setter TargetName="ToolBarThumb" Property="Margin" Value="-1 -3 0 0" />
                            <Setter TargetName="ToolBarThumb" Property="Padding" Value="5 6 6 1" />
                            <Setter TargetName="ToolBarHeader" Property="Margin" Value="0 0 0 4" />
                            <Setter TargetName="PART_ToolBarPanel" Property="Margin" Value="1 0 2 2" />
                            <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="OverflowGrid" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="OverflowGrid" Property="VerticalAlignment" Value="Bottom" />
                            <Setter TargetName="OverflowPopup" Property="Placement" Value="Right" />
                            <Setter TargetName="MainPanelBorder" Property="Margin" Value="0 0 0 11" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.Button.ToolBar.Validate" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Positive}" />
        <Setter Property="Content" Value="{me:Resource Validate}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Check}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.ToolBar.Cancel" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Negative}" />
        <Setter Property="Content" Value="{me:Resource Cancel}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Cancel}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.ToolBar.Restore" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{me:Resource Restore}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=SettingsBackupRestore}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.ToolBar.Refresh" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{me:Resource Refresh}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=CircularArrows}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.ToolBar.Add" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{me:Resource Add}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Add}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.ToolBar.Edit" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{me:Resource Edit}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Edit}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.ToolBar.Remove" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{me:Resource Remove}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Trash}" />
    </Style>
    <Style x:Key="MyNet.Styles.Button.ToolBar.Open" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{me:Resource Open}" />
        <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Eye}" />
    </Style>

    <Style x:Key="MyNet.Styles.ToolBar.Transparent" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource MyNet.Styles.ToolBar}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="p:IconAssist.Alignment" Value="Left" />
        <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
        <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="p:LayoutAssist.InnerMargin" Value="2 0" />
        <Setter Property="p:LayoutAssist.InnerPadding" Value="11 5" />
    </Style>

    <Style x:Key="MyNet.Styles.ToolBar.Tools" BasedOn="{StaticResource MyNet.Styles.ToolBar.Transparent}" TargetType="{x:Type ToolBar}">
        <Setter Property="p:LayoutAssist.InnerMargin" Value="0" />
        <Setter Property="p:LayoutAssist.InnerPadding" Value="{StaticResource MyNet.Margins.Small}" />
        <Style.Resources>
            <Style BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon.Foreground}" TargetType="{x:Type ctrl:DropDownButton}">
                <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
                <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
            </Style>
            <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}" TargetType="{x:Type Button}">
                <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
                <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="MyNet.Styles.ToolBar.FileMenu" BasedOn="{StaticResource MyNet.Styles.ToolBar}" TargetType="{x:Type ToolBar}">
        <Style.Resources>
            <Style BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" TargetType="{x:Type Button}">
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
            </Style>
            <Style BasedOn="{StaticResource MyNet.Styles.ToggleButton.ToolBar}" TargetType="{x:Type ToggleButton}">
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
                <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
                <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
                <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
            </Style>
            <Style BasedOn="{StaticResource MyNet.Styles.Separator.Horizontal}" TargetType="{x:Type Separator}" />
        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent.Dark}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Dark.Foreground}" />
        <Setter Property="p:IconAssist.Alignment" Value="Left" />
        <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Large.Right}" />
        <Setter Property="p:LayoutAssist.InnerMargin" Value="0 1" />
        <Setter Property="p:LayoutAssist.InnerPadding" Value="20 10" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyNet.Styles.ToolBarTray" TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="Transparent" />
    </Style>
</ResourceDictionary>