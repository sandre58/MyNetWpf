<!--
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
-->
<!--
Source files:
Styles\Base.Icons.xaml
Styles\Bases.xaml
Styles\Controls.Button.xaml
Styles\Controls.Calendar.xaml
Styles\Controls.CheckBox.xaml
Styles\Controls.ComboBox.xaml
Styles\Controls.ContentControl.xaml
Styles\Controls.DataGrid.xaml
Styles\Controls.DatePicker.xaml
Styles\Controls.Expander.xaml
Styles\Controls.FocusVisualStyle.xaml
Styles\Controls.GridSplitter.xaml
Styles\Controls.GroupBox.xaml
Styles\Controls.Image.xaml
Styles\Controls.ItemsControl.xaml
Styles\Controls.Label.xaml
Styles\Controls.ListBox.xaml
Styles\Controls.ListView.xaml
Styles\Controls.Menu.xaml
Styles\Controls.PasswordBox.xaml
Styles\Controls.ProgressBar.xaml
Styles\Controls.RadioButton.xaml
Styles\Controls.ScrollBar.xaml
Styles\Controls.ScrollViewer.xaml
Styles\Controls.Separator.xaml
Styles\Controls.Slider.xaml
Styles\Controls.TabControl.xaml
Styles\Controls.TextBlock.xaml
Styles\Controls.TextBox.xaml
Styles\Controls.Thumb.xaml
Styles\Controls.ToggleButton.xaml
Styles\Controls.ToolBar.xaml
Styles\Controls.ToolTip.xaml
Styles\Controls.TreeView.xaml
Styles\Controls.Validation.xaml
Styles\Mahapps.WindowButtonCommands.xaml
Styles\MyNet.ApplicationIcon.xaml
Styles\MyNet.AutoSuggestBox.xaml
Styles\MyNet.Badged.xaml
Styles\MyNet.BusyControl.xaml
Styles\MyNet.Calendar.xaml
Styles\MyNet.Card.xaml
Styles\MyNet.Chip.xaml
Styles\MyNet.Clock.xaml
Styles\MyNet.CodeBlock.xaml
Styles\MyNet.ColorCanvas.xaml
Styles\MyNet.ColorEyeDropper.xaml
Styles\MyNet.ColorHSVPicker.xaml
Styles\MyNet.ColorPicker.xaml
Styles\MyNet.CommandsBar.xaml
Styles\MyNet.ContentDialog.xaml
Styles\MyNet.ContentExpander.xaml
Styles\MyNet.DataTemplates.xaml
Styles\MyNet.DrawerHost.xaml
Styles\MyNet.DropDownButton.xaml
Styles\MyNet.DynamicScrollBar.xaml
Styles\MyNet.DynamicScrollViewer.xaml
Styles\MyNet.ExtendedWindow.xaml
Styles\MyNet.Flipper.xaml
Styles\MyNet.GeometryIcon.xaml
Styles\MyNet.GhostControl.xaml
Styles\MyNet.ImagePicker.xaml
Styles\MyNet.LoadingIndicator.xaml
Styles\MyNet.MessageView.xaml
Styles\MyNet.MonthPicker.xaml
Styles\MyNet.MultiComboBox.xaml
Styles\MyNet.NavigationFrame.xaml
Styles\MyNet.NavigationPage.xaml
Styles\MyNet.NavigationView.xaml
Styles\MyNet.NumericUpDown.xaml
Styles\MyNet.OverlayDialogControl.xaml
Styles\MyNet.PackIcon.xaml
Styles\MyNet.PictureControl.xaml
Styles\MyNet.PopupEx.xaml
Styles\MyNet.RatingBar.xaml
Styles\MyNet.RevealPasswordBox.xaml
Styles\MyNet.RichTextEditor.xaml
Styles\MyNet.Ripple.xaml
Styles\MyNet.SelectionCommandsBar.xaml
Styles\MyNet.SimpleStackPanel.xaml
Styles\MyNet.SmartHint.xaml
Styles\MyNet.SplitButton.xaml
Styles\MyNet.TimePicker.xaml
Styles\MyNet.Toast.xaml
Styles\MyNet.TransitioningContent.xaml
Styles\MyNet.Underline.xaml
Styles\MyNet.VirtualizingGridView.xaml
Styles\MyNet.VirtualizingItemsControl.xaml
Styles\MyNet.VirtualizingWrapPanel.xaml
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ctrl="clr-namespace:MyNet.Wpf.Controls" xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:p="clr-namespace:MyNet.Wpf.Parameters" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:c="clr-namespace:MyNet.Wpf.Converters" xmlns:cmd="clr-namespace:MyNet.Wpf.Commands" xmlns:me="clr-namespace:MyNet.Wpf.MarkupExtensions" xmlns:b="clr-namespace:MyNet.Wpf.Behaviors" xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls" xmlns:busy="clr-namespace:MyNet.UI.Busy.Models;assembly=MyNet.UI" xmlns:s="clr-namespace:MyNet.Wpf.Selectors" xmlns:models="clr-namespace:MyNet.Observable;assembly=MyNet.Observable" xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes" xmlns:media="clr-namespace:MyNet.Wpf.Media" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="po d" xmlns:controlzEx="urn:controlzex" xmlns:dialSettings="clr-namespace:MyNet.UI.Dialogs.Settings;assembly=MyNet.UI" xmlns:notif="clr-namespace:MyNet.UI.Notifications;assembly=MyNet.UI">
  <ResourceDictionary.MergedDictionaries />
  <Geometry x:Key="MyNet.Geometries.Foot" po:Freeze="True">M18.3313312530518,4.47466659545898L19.846061706543,4.62646055221558 21.7239437103271,5.21648120880127 23.3418369293213,6.44668531417847 23.8585586547852,7.36496829986572 24.0766048431396,8.5190315246582 23.7810935974121,10.7147674560547 23.0195255279541,12.4733963012695 22.2365245819092,14.2477712631226 21.8767185211182,16.4907455444336 21.2611198425293,18.3269214630127 20.5235157012939,18.9572620391846 19.5277214050293,19.2000026702881 18.1812648773193,18.9933128356934 17.3465423583984,18.4375648498535 16.9131603240967,17.6292285919189 16.7707271575928,16.6647853851318 17.0931167602539,15.1356287002563 17.8848533630371,14.0511646270752 18.6924495697021,13.0223913192749 19.0624237060547,11.6603107452393 18.5863628387451,10.0264301300049 17.5390281677246,8.93793773651123 16.4916915893555,7.89725971221924 16.0156307220459,6.40682649612427 16.2644805908203,5.37332439422607 16.8722057342529,4.79043388366699 18.3313312530518,4.47466659545898z M5.75009346008301,4.47465419769287L7.20868492126465,4.79043340682983 7.81618309020996,5.37333059310913 8.06493949890137,6.40683126449585 7.58886766433716,7.89726448059082 6.54150915145874,8.93793869018555 5.49415063858032,10.0264291763306 5.01807880401611,11.6603136062622 5.38811731338501,13.0223913192749 6.1959023475647,14.0511569976807 6.98793697357178,15.1356153488159 7.31072473526001,16.6647720336914 7.16815614700317,17.6292190551758 6.73471307754517,18.437557220459 5.89986181259155,18.9933128356934 4.5530686378479,19.2000026702881 3.55755519866943,18.9572620391846 2.82000923156738,18.3269233703613 2.20432209968567,16.4907569885254 1.84450244903564,14.2477693557739 1.0614492893219,12.4733877182007 0.299771368503571,10.7147579193115 0.00407753000035882,8.51902484893799 0.222220063209534,7.36496210098267 0.739003360271454,6.44667911529541 2.35698747634888,5.21647262573242 4.23502063751221,4.62644958496094 5.75009346008301,4.47465419769287z M23.4613094329834,3.73060441017151L23.7955856323242,3.92074012756348 23.9422073364258,4.39665651321411 23.8174476623535,4.87744903564453 23.492208480835,5.08369445800781 23.1585731506348,4.89355897903442 23.0101127624512,4.41764307022095 23.1357002258301,3.93685054779053 23.4613094329834,3.73060441017151z M0.619690716266632,3.7305862903595L0.9450843334198,3.93685531616211 1.07089924812317,4.417649269104 0.922358810901642,4.89356803894043 0.589089214801788,5.08371019363403 0.263433277606964,4.87744140625 0.138480380177498,4.39664697647095 0.285258442163467,3.92072892189026 0.619690716266632,3.7305862903595z M1.43937730789185,2.53559684753418L1.85089468955994,2.73003125190735 2.10622000694275,3.25054240226746 2.05548167228699,3.85997319221497 1.70391201972961,4.17462730407715 1.25851535797119,4.01186227798462 0.978497326374054,3.46656227111816 1.02912354469299,2.85600638389587 1.38080525398254,2.54247760772705 1.43937730789185,2.53559684753418z M22.6413917541504,2.5355920791626L22.6999130249023,2.54247069358826 23.051628112793,2.85601735115051 23.1025161743164,3.4665789604187 22.8225021362305,4.01187086105347 22.3771171569824,4.1746392250061 22.0254039764404,3.85996699333191 21.974515914917,3.25053143501282 22.2299385070801,2.7300271987915 22.6413917541504,2.5355920791626z M2.91413617134094,1.52538454532623L3.41278386116028,1.83178746700287 3.62004995346069,2.57248067855835 3.4128212928772,3.31317329406738 2.9135365486145,3.6195764541626 2.41342616081238,3.31317329406738 2.20672202110291,2.57248067855835 2.4140636920929,1.83178746700287 2.91413617134094,1.52538454532623z M21.1669216156006,1.52537333965302L21.6664543151855,1.83178269863129 21.8737163543701,2.57246661186218 21.6673927307129,3.31318235397339 21.1681213378906,3.61959624290466 20.6683216094971,3.31318235397339 20.4610252380371,2.57246661186218 20.6679458618164,1.83178269863129 21.1669216156006,1.52537333965302z M19.1145801544189,0.799981832504272L19.7093620300293,1.15237045288086 20.0176162719727,1.97841763496399 19.8504867553711,2.89351630210876 19.271821975708,3.32253527641296 18.6211624145508,3.01088833808899 18.2785243988037,2.14344763755798 18.4468631744385,1.22985076904297 19.024923324585,0.80233359336853 19.1145801544189,0.799981832504272z M4.96622467041016,0.799968183040619L5.05587959289551,0.802318155765533 5.63417863845825,1.22985732555389 5.80229425430298,2.14344096183777 5.45938730239868,3.01089549064636 4.80867481231689,3.32254910469055 4.23015069961548,2.89350962638855 4.06315994262695,1.97842586040497 4.37154531478882,1.15236508846283 4.96622467041016,0.799968183040619z M16.3480205535889,3.38493955496233E-05L17.2013492584229,0.454524487257004 17.6995277404785,1.60638654232025 17.5447273254395,2.92313599586487 16.779727935791,3.58059072494507 15.8519086837769,3.19204664230347 15.30433177948,1.98442423343658 15.458909034729,0.667679190635681 16.2241325378418,0.010256570763886 16.3480205535889,3.38493955496233E-05z M7.73343896865845,2.16491607716307E-05L7.85733509063721,0.0102458065375686 8.62212562561035,0.667680859565735 8.77625370025635,1.98442661762238 8.22945594787598,3.19203686714172 7.30172443389893,3.58057236671448 6.53607177734375,2.92313742637634 6.38130617141724,1.60639190673828 6.87976741790771,0.454509913921356 7.73343896865845,2.16491607716307E-05z</Geometry>
  <Geometry x:Key="MyNet.Geometries.LeftFoot" po:Freeze="True">M12.750093460083,4.47465419769287L14.2086849212646,4.79043340682983 14.81618309021,5.37333059310913 15.0649394989014,6.40683126449585 14.5888671875,7.89726448059082 13.5415096282959,8.93793869018555 12.4941501617432,10.0264291763306 12.0180788040161,11.6603136062622 12.3881168365479,13.0223913192749 13.1959018707275,14.0511569976807 13.9879369735718,15.1356153488159 14.3107242584229,16.6647720336914 14.168155670166,17.6292190551758 13.734712600708,18.437557220459 12.8998622894287,18.9933128356934 11.5530681610107,19.2000026702881 10.5575551986694,18.9572620391846 9.82000923156738,18.3269233703613 9.20432186126709,16.4907569885254 8.84450244903564,14.2477693557739 8.06144905090332,12.4733877182007 7.29977130889893,10.7147579193115 7.00407743453979,8.51902484893799 7.22221994400024,7.36496210098267 7.73900318145752,6.44667911529541 9.35698699951172,5.21647262573242 11.2350206375122,4.62644958496094 12.750093460083,4.47465419769287z M7.61969089508057,3.7305862903595L7.94508457183838,3.93685531616211 8.07089900970459,4.417649269104 7.92235898971558,4.89356803894043 7.58908939361572,5.08371019363403 7.2634334564209,4.87744140625 7.1384801864624,4.39664697647095 7.28525829315186,3.92072892189026 7.61969089508057,3.7305862903595z M8.43937683105469,2.53559684753418L8.85089492797852,2.73003125190735 9.10622024536133,3.25054240226746 9.05548191070557,3.85997319221497 8.70391178131104,4.17462730407715 8.25851535797119,4.01186227798462 7.97849750518799,3.46656227111816 8.02912330627441,2.85600638389587 8.38080501556396,2.54247760772705 8.43937683105469,2.53559684753418z M9.91413593292236,1.52538454532623L10.4127836227417,1.83178746700287 10.6200504302979,2.57248067855835 10.41282081604,3.31317329406738 9.91353607177734,3.6195764541626 9.41342639923096,3.31317329406738 9.20672225952148,2.57248067855835 9.41406345367432,1.83178746700287 9.91413593292236,1.52538454532623z M11.9662246704102,0.799968183040619L12.0558795928955,0.802318155765533 12.6341781616211,1.22985732555389 12.8022937774658,2.14344096183777 12.4593868255615,3.01089549064636 11.8086748123169,3.32254910469055 11.2301502227783,2.89350962638855 11.063159942627,1.97842586040497 11.371545791626,1.15236508846283 11.9662246704102,0.799968183040619z M14.7334384918213,2.16491607716307E-05L14.8573350906372,0.0102458065375686 15.6221256256104,0.667680859565735 15.7762537002563,1.98442661762238 15.229455947876,3.19203686714172 14.3017244338989,3.58057236671448 13.5360717773438,2.92313742637634 13.3813056945801,1.60639190673828 13.8797674179077,0.454509913921356 14.7334384918213,2.16491607716307E-05z</Geometry>
  <Geometry x:Key="MyNet.Geometries.RightFoot" po:Freeze="True">M10.3313312530518,4.47466659545898L11.8460626602173,4.62646055221558 13.7239437103271,5.21648120880127 15.3418378829956,6.44668531417847 15.8585577011108,7.36496829986572 16.0766048431396,8.5190315246582 15.7810945510864,10.7147674560547 15.0195255279541,12.4733963012695 14.2365245819092,14.2477712631226 13.8767185211182,16.4907455444336 13.2611198425293,18.3269214630127 12.5235147476196,18.9572620391846 11.5277214050293,19.2000026702881 10.1812648773193,18.9933128356934 9.34654140472412,18.4375648498535 8.91316032409668,17.6292285919189 8.77072715759277,16.6647853851318 9.09311676025391,15.1356287002563 9.88485240936279,14.0511646270752 10.6924495697021,13.0223913192749 11.0624237060547,11.6603107452393 10.5863628387451,10.0264301300049 9.53902721405029,8.93793773651123 8.49169158935547,7.89725971221924 8.0156307220459,6.40682649612427 8.26448059082031,5.37332439422607 8.87220573425293,4.79043388366699 10.3313312530518,4.47466659545898z M15.4613094329834,3.73060441017151L15.7955856323242,3.92074012756348 15.9422073364258,4.39665651321411 15.8174476623535,4.87744903564453 15.492208480835,5.08369445800781 15.1585731506348,4.89355897903442 15.0101127624512,4.41764307022095 15.1357002258301,3.93685054779053 15.4613094329834,3.73060441017151z M14.6413917541504,2.5355920791626L14.6999130249023,2.54247069358826 15.051628112793,2.85601735115051 15.1025161743164,3.4665789604187 14.8225021362305,4.01187086105347 14.3771171569824,4.1746392250061 14.0254039764404,3.85996699333191 13.974515914917,3.25053143501282 14.2299385070801,2.7300271987915 14.6413917541504,2.5355920791626z M13.1669216156006,1.52537333965302L13.6664533615112,1.83178269863129 13.8737163543701,2.57246661186218 13.6673927307129,3.31318235397339 13.1681213378906,3.61959624290466 12.6683216094971,3.31318235397339 12.4610252380371,2.57246661186218 12.6679458618164,1.83178269863129 13.1669216156006,1.52537333965302z M11.1145801544189,0.799981832504272L11.7093620300293,1.15237045288086 12.0176162719727,1.97841763496399 11.8504858016968,2.89351630210876 11.271821975708,3.32253527641296 10.6211624145508,3.01088833808899 10.2785243988037,2.14344763755798 10.4468631744385,1.22985076904297 11.024923324585,0.80233359336853 11.1145801544189,0.799981832504272z M8.34802055358887,3.38493955496233E-05L9.20135021209717,0.454524487257004 9.69952774047852,1.60638654232025 9.54472637176514,2.92313599586487 8.77972793579102,3.58059072494507 7.85190868377686,3.19204664230347 7.30433177947998,1.98442423343658 7.458909034729,0.667679190635681 8.2241325378418,0.010256570763886 8.34802055358887,3.38493955496233E-05z</Geometry>
  <Geometry x:Key="MyNet.Geometries.Female" po:Freeze="True">M10.5256090164185,0.000330621231114492L11.5492296218872,0.0856225118041039 11.9504079818726,0.177830100059509 13.406720161438,0.34994900226593 14.5561408996582,1.09205901622772 16.0732803344727,3.55522990226746 16.7797508239746,6.10529851913452 16.9158363342285,6.95602989196777 16.9534797668457,7.28022003173828 17.1963520050049,8.32847118377686 17.7306728363037,10.1226501464844 18.2649898529053,11.8183727264404 18.5078620910645,12.5712537765503 18.5736980438232,13.230920791626 18.1573066711426,13.6184940338135 17.6329917907715,13.8015098571777 17.3750438690186,13.8475074768066 17.340461730957,14.4478549957275 16.6511211395264,14.9159698486328 15.7186326980591,15.246054649353 14.9545984268188,15.432315826416 14.8885641098022,15.445746421814 14.898232460022,15.4808464050293 16.0800647735596,17.0449295043945 17.9731101989746,18.1806964874268 19.7301959991455,18.8731536865234 20.5041522979736,19.1073036193848 21.8174171447754,19.6420764923096 22.8090877532959,20.3967037200928 23.4358558654785,21.0701961517334 23.6544017791748,21.3615798950195 23.6544017791748,23.0290393829346 0,23.0290393829346 0,20.4351387023926 1.54359555244446,19.3543243408203 2.11876940727234,19.1584415435791 2.3465461730957,19.1073036193848 5.00386905670166,18.1662578582764 6.68329334259033,17.1479930877686 7.60843086242676,16.2084827423096 8.00289440155029,15.5037059783936 8.01156997680664,15.4794454574585 7.98202800750732,15.4794702529907 6.93447780609131,15.3153591156006 6.36118841171265,15.1396903991699 5.57201814651489,14.5951824188232 5.23601627349854,14.1649169921875 5.18789863586426,13.7806463241577 5.45064640045166,13.5182981491089 4.80941581726074,13.5048494338989 4.53921556472778,13.4567222595215 4.09548330307007,13.1285438537598 4.02207851409912,12.7077827453613 4.19940710067749,12.1905584335327 5.0269775390625,9.83532810211182 5.49254035949707,8.05622386932373 5.69750785827637,6.93142700195313 5.74329423904419,6.53912162780762 5.94815826416016,4.31174039840698 6.04306936264038,3.67718863487244 6.08302879333496,3.45087027549744 7.01434516906738,1.7007749080658 8.1693286895752,0.653043925762177 9.39180660247803,0.141591235995293 10.5256090164185,0.000330621231114492z</Geometry>
  <Geometry x:Key="MyNet.Geometries.Male" po:Freeze="True">M10.9937953948975,0L12.3762741088867,0.182556211948395 13.5967416763306,1.0133364200592 13.8138122558594,1.04839277267456 14.3605298995972,1.18744432926178 15.8159332275391,1.98082673549652 16.4111347198486,2.73680448532104 16.7090091705322,3.80007147789001 16.5528182983398,5.22145080566406 15.7858152389526,7.05176591873169 16.0998821258545,7.17096757888794 16.2311038970947,7.88290548324585 16.1826648712158,8.12061882019043 16.0411529541016,8.66032409667969 15.812273979187,9.24186515808105 15.5017356872559,9.60508918762207 15.4766778945923,9.96956253051758 15.3167123794556,10.8944816589355 14.8946552276611,12.1271047592163 14.0833234786987,13.4146814346313 14.0821361541748,13.4146680831909 14.096227645874,13.5088491439819 14.903525352478,14.9232091903687 16.2983493804932,15.8808660507202 17.6198616027832,16.4243030548096 18.207218170166,16.5960083007813 20.0266494750977,17.1788234710693 21.5696620941162,17.838529586792 22.6396484375,18.3785266876221 23.0400009155273,18.6022148132324 23.0400009155273,21.0340805053711 0,21.0340805053711 0,17.9337787628174 0.633630573749542,17.585542678833 1.96818935871124,17.0863189697266 3.29131960868835,16.6384201049805 3.89066433906555,16.4441623687744 5.97634220123291,15.7793521881104 6.62626838684082,15.5019865036011 6.83486604690552,15.2626943588257 7.02097272872925,15.1373128890991 8.0158052444458,14.3938274383545 8.47998237609863,13.3538236618042 8.48241996765137,13.3452205657959 8.47714138031006,13.3390007019043 7.84645891189575,12.2560911178589 7.25449371337891,9.46357250213623 7.03160619735718,9.16958427429199 6.80995082855225,8.57424449920654 6.56544637680054,7.47746992111206 6.60363817214966,7.18624496459961 7.11290407180786,6.84933614730835 6.9921612739563,6.3882908821106 6.7706127166748,5.24331283569336 6.65927934646606,3.77164006233215 6.86918115615845,2.33050990104675 7.06797742843628,2.03540635108948 7.68469715118408,1.35274457931519 8.74983692169189,0.586498320102692 10.2938938140869,0.0406411774456501 10.9937953948975,0z</Geometry>
  <ctrl:PackIcon x:Key="MyNet.Icons.Minus.Tool" Width="18" Height="18" x:Shared="False" Kind="Minus" />
  <ctrl:PackIcon x:Key="MyNet.Icons.Plus.Tool" Width="18" Height="18" x:Shared="False" Kind="Plus" />
  <ctrl:PackIcon x:Key="MyNet.Icons.ChevronLeft.Medium" Width="24" Height="24" x:Shared="False" Kind="ChevronLeft" />
  <ctrl:PackIcon x:Key="MyNet.Icons.ChevronRight.Medium" Width="24" Height="24" x:Shared="False" Kind="ChevronRight" />
  <FontFamily x:Key="MyNet.Font.Family.Daggersquare">pack://application:,,,/MyNet.Wpf;component/Fonts/#DAGGERSQUARE</FontFamily>
  <FontFamily x:Key="MyNet.Font.Family.Jersey">pack://application:,,,/MyNet.Wpf;component/Fonts/#Jersey M54</FontFamily>
  <FontFamily x:Key="MyNet.Font.Family.Nuvel">pack://application:,,,/MyNet.Wpf;component/Fonts/#Nuvel</FontFamily>
  <FontFamily x:Key="MyNet.Font.Family.Roboto">pack://application:,,,/MyNet.Wpf;component/Fonts/Roboto/#Roboto</FontFamily>
  <FontFamily x:Key="MyNet.Font.Family.Noto">pack://application:,,,/MyNet.Wpf;component/Fonts/Noto/#Noto</FontFamily>
  <FontFamily x:Key="MyNet.Font.Family.Icons">pack://application:,,,/MyNet.Wpf;component/Fonts/#FluentSystemIcons-Regular</FontFamily>
  <FontFamily x:Key="MyNet.Font.Family.Icons.Filled">pack://application:,,,/MyNet.Wpf;component/Fonts/#FluentSystemIcons-Filled</FontFamily>
  <FontFamily x:Key="MyNet.Font.Family.FiraCode">pack://application:,,,/MyNet.Wpf;component/Fonts/#Fira Code</FontFamily>
  <FontFamily x:Key="MyNet.Font.Family.Digital">pack://application:,,,/MyNet.Wpf;component/Fonts/#DS-Digital</FontFamily>
  <sys:Double x:Key="MyNet.Font.Size.Secondary">10</sys:Double>
  <sys:Double x:Key="MyNet.Font.Size">12</sys:Double>
  <sys:Double x:Key="MyNet.Font.Size.Menu">12</sys:Double>
  <sys:Double x:Key="MyNet.Font.Size.Button">12</sys:Double>
  <sys:Double x:Key="MyNet.Font.Size.Tab">14</sys:Double>
  <sys:Double x:Key="MyNet.Font.Size.Caption">16</sys:Double>
  <sys:Double x:Key="MyNet.Font.Size.Title">20</sys:Double>
  <sys:Double x:Key="MyNet.Font.Size.Header">30</sys:Double>
  <FontWeight x:Key="MyNet.Font.Weight">Normal</FontWeight>
  <FontWeight x:Key="MyNet.Font.Weight.Button">Normal</FontWeight>
  <FontWeight x:Key="MyNet.Font.Weight.ToolTip">Normal</FontWeight>
  <FontWeight x:Key="MyNet.Font.Weight.Header">Medium</FontWeight>
  <Color x:Key="MyNet.Colors.Red">#F44336</Color>
  <Color x:Key="MyNet.Colors.White">#FFFFFF</Color>
  <Color x:Key="MyNet.Colors.Black">#000000</Color>
  <Color x:Key="MyNet.Colors.Gold">#FFD700</Color>
  <Color x:Key="MyNet.Colors.Female">#c90076</Color>
  <Color x:Key="MyNet.Colors.Male">#2986cc</Color>
  <sys:Double x:Key="MyNet.Opacity.Default">1</sys:Double>
  <sys:Double x:Key="MyNet.Opacity.Secondary">0.7</sys:Double>
  <sys:Double x:Key="MyNet.Opacity.Medium">0.56</sys:Double>
  <sys:Double x:Key="MyNet.Opacity.Overlay">0.40</sys:Double>
  <sys:Double x:Key="MyNet.Opacity.Disabled">0.40</sys:Double>
  <sys:Double x:Key="MyNet.Opacity.Border">0.35</sys:Double>
  <sys:Double x:Key="MyNet.Opacity.Checked">0.18</sys:Double>
  <sys:Double x:Key="MyNet.Opacity.Focused">0.15</sys:Double>
  <sys:Double x:Key="MyNet.Opacity.Hovered">0.12</sys:Double>
  <sys:Double x:Key="MyNet.Opacity.Filled">0.10</sys:Double>
  <sys:Double x:Key="MyNet.Margin.Small">2</sys:Double>
  <sys:Double x:Key="MyNet.Margin.Default">5</sys:Double>
  <sys:Double x:Key="MyNet.Margin.Medium">10</sys:Double>
  <sys:Double x:Key="MyNet.Margin.Large">15</sys:Double>
  <sys:Double x:Key="MyNet.Margin.VeryLarge">20</sys:Double>
  <sys:Double x:Key="MyNet.Margin.Huge">40</sys:Double>
  <Thickness x:Key="MyNet.Paddings.TextField.Default" Bottom="4" Left="2" Right="2" Top="4" />
  <sys:Double x:Key="MyNet.Widths.Control.Huge">400</sys:Double>
  <sys:Double x:Key="MyNet.Widths.Control.VeryLarge">200</sys:Double>
  <sys:Double x:Key="MyNet.Widths.Control.Large">150</sys:Double>
  <sys:Double x:Key="MyNet.Widths.Control.Medium">100</sys:Double>
  <sys:Double x:Key="MyNet.UniformCornerRadius.Control">2</sys:Double>
  <sys:Double x:Key="MyNet.UniformCornerRadius.Container">4</sys:Double>
  <VerticalAlignment x:Key="MyNet.VerticalAlignment.Control">Center</VerticalAlignment>
  <HorizontalAlignment x:Key="MyNet.HorizontalAlignment.Control">Left</HorizontalAlignment>
  <VerticalAlignment x:Key="MyNet.VerticalAlignment.Container">Stretch</VerticalAlignment>
  <HorizontalAlignment x:Key="MyNet.HorizontalAlignment.Container">Stretch</HorizontalAlignment>
  <p:Elevation x:Key="MyNet.Elevation.Button">Dp2</p:Elevation>
  <p:Elevation x:Key="MyNet.Elevation.Container">Dp1</p:Elevation>
  <p:Elevation x:Key="MyNet.Elevation.Control">Dp0</p:Elevation>
  <p:Elevation x:Key="MyNet.Elevation.Popup">Dp2</p:Elevation>
  <Style x:Key="MyNet.Styles.ToggleButton.Embedded.ComboBox" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="ClickMode" Value="Press" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid>
            <Border x:Name="ToggleTemplateRoot" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
              <ctrl:PackIcon x:Name="arrow" Width="18" Height="18" Margin="{Binding Path=(p:TextFieldAssist.TextBoxViewMargin), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Right" VerticalAlignment="Center" Foreground="{TemplateBinding BorderBrush}" Kind="ChevronDown" RenderTransformOrigin="0.5, 0.5">
                <ctrl:PackIcon.RenderTransform>
                  <RotateTransform Angle="0" />
                </ctrl:PackIcon.RenderTransform>
                <ctrl:PackIcon.Visibility>
                  <MultiBinding Converter="{x:Static c:MultipleBooleanToVisibilityConverter.AndCollapse}">
                    <Binding Path="(p:ComboBoxAssist.ShowCaret)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Path="(p:ComboBoxAssist.ShowDropDownPopup)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Converter="{x:Static c:NotBooleanConverter.Default}" Path="(p:TextFieldAssist.IsReadOnly)" RelativeSource="{RelativeSource TemplatedParent}" />
                  </MultiBinding>
                </ctrl:PackIcon.Visibility>
              </ctrl:PackIcon>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="arrow" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="0" To="180" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="arrow" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="180" To="0" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.ContentControl" TargetType="{x:Type ContentControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Embedded.DataGrid" TargetType="{x:Type ComboBox}">
    <Setter Property="Focusable" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <TextBlock IsHitTestVisible="False" Text="{TemplateBinding Text}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Button.Embedded.DatePicker" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="ClickMode" Value="Release" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="White" Opacity="0.002" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Duration x:Key="ExpandDuration">0:0:0.250</Duration>
  <Duration x:Key="CollapseDuration">0:0:0.200</Duration>
  <KeyTime x:Key="ExpandKeyTime">0:0:0.250</KeyTime>
  <KeyTime x:Key="CollapseKeyTime">0:0:0.200</KeyTime>
  <Style x:Key="MyNet.Styles.Image" TargetType="{x:Type Image}">
    <Setter Property="RenderOptions.BitmapScalingMode" Value="Fant" />
    <Setter Property="RenderOptions.CachingHint" Value="Cache" />
    <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
    <Setter Property="RenderOptions.EdgeMode" Value="Aliased" />
  </Style>
  <Style x:Key="MyNet.Styles.ItemsControl" TargetType="{x:Type ItemsControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsItemsHost="True" IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Contained" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ItemsControl}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Standard" />
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}, Converter={x:Static c:CountToBooleanConverter.NotAny}}" Value="True" />
          <Condition Binding="{Binding Path=(p:ItemsControlAssist.EmptyTemplate), RelativeSource={RelativeSource Self}, Converter={x:Static c:NullToBooleanConverter.FalseIfNull}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Template" Value="{Binding Path=(p:ItemsControlAssist.EmptyTemplate), RelativeSource={RelativeSource Self}}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}, Converter={x:Static c:CountToBooleanConverter.One}}" Value="True" />
          <Condition Binding="{Binding Path=(p:ItemsControlAssist.SingleTemplate), RelativeSource={RelativeSource Self}, Converter={x:Static c:NullToBooleanConverter.FalseIfNull}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Template" Value="{Binding Path=(p:ItemsControlAssist.SingleTemplate), RelativeSource={RelativeSource Self}}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}, Converter={x:Static c:CountToBooleanConverter.Many}}" Value="True" />
          <Condition Binding="{Binding Path=(p:ItemsControlAssist.ManyTemplate), RelativeSource={RelativeSource Self}, Converter={x:Static c:NullToBooleanConverter.FalseIfNull}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Template" Value="{Binding Path=(p:ItemsControlAssist.ManyTemplate), RelativeSource={RelativeSource Self}}" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ListSortDirectionIndicator" TargetType="{x:Type ctrl:ListSortDirectionIndicator}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ListSortDirectionIndicator}">
          <Viewbox Margin="0 0 0 0">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="Direction">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" From="None" To="Descending">
                    <VisualTransition.GeneratedEasingFunction>
                      <CubicEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" To="1" Duration="0:0:0.2" />
                      <DoubleAnimation BeginTime="0:0:0.2" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" To="90" Duration="0:0:0.2" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition GeneratedDuration="0" From="None" To="Ascending">
                    <VisualTransition.GeneratedEasingFunction>
                      <CubicEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" To="1" Duration="0:0:0.2" />
                      <DoubleAnimation BeginTime="0:0:0.2" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" To="-90" Duration="0:0:0.2">
                        <DoubleAnimation.EasingFunction>
                          <CubicEase EasingMode="EaseOut" />
                        </DoubleAnimation.EasingFunction>
                      </DoubleAnimation>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition GeneratedDuration="0" From="Descending" To="Ascending">
                    <VisualTransition.GeneratedEasingFunction>
                      <CubicEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" To="1" Duration="0">
                        <DoubleAnimation.EasingFunction>
                          <CubicEase EasingMode="EaseOut" />
                        </DoubleAnimation.EasingFunction>
                      </DoubleAnimation>
                      <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" From="90" To="-90" Duration="0:0:0.2" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition GeneratedDuration="0" From="Descending" To="None">
                    <VisualTransition.GeneratedEasingFunction>
                      <CubicEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" To="0" Duration="0:0:0.2" />
                      <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" To="90" Duration="0" />
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition GeneratedDuration="0" From="Ascending" To="Descending">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" From="-90" To="90" Duration="0:0:0.2" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition GeneratedDuration="0" From="Ascending" To="None">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" To="-90" Duration="0" />
                      <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" To="0" Duration="0:0:0.2" />
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="None">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Descending">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                      <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                      <EasingDoubleKeyFrame KeyTime="0" Value="90" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Ascending">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                      <EasingDoubleKeyFrame KeyTime="0" Value="-90" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                      <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="path" Width="24" Height="24" Data="M4,11V13H16L10.5,18.5L11.92,19.92L19.84,12L11.92,4.08L10.5,5.5L16,11H4Z" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5" Stretch="Fill">
              <Path.RenderTransform>
                <TransformGroup>
                  <ScaleTransform ScaleY="0" />
                  <SkewTransform />
                  <RotateTransform />
                  <TranslateTransform />
                </TransformGroup>
              </Path.RenderTransform>
            </Path>
          </Viewbox>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Style.DynamicScrollViewer.Embedded.ListView" TargetType="{x:Type ctrl:DynamicScrollViewer}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:DynamicScrollViewer}">
          <Grid Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <GridViewHeaderRowPresenter x:Name="PART_GridViewHeaderRowPresenter" Grid.ColumnSpan="2" AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ClipToBounds="False" ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="{Binding Path=(p:ListViewAssist.ShowHeader), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <ScrollContentPresenter Name="PART_ScrollContentPresenter" Grid.Row="1" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" KeyboardNavigation.DirectionalNavigation="Local" />
            <ctrl:DynamicScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="2" Grid.ColumnSpan="2" VerticalAlignment="Bottom" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ctrl:DynamicScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="1" Grid.Column="1" HorizontalAlignment="Right" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="{Binding Path=(p:ScrollViewerAssist.IsAutoHideEnabled), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" />
  </Style>
  <me:TextContextMenu x:Key="MyNet.ContextMenu.Text" x:Shared="False" />
  <sys:Double x:Key="FallBackValueZero">0</sys:Double>
  <Size x:Key="FallBackValueSize" Width="0" Height="0" />
  <Point x:Key="FallBackValuePoint" X="0" Y="0" />
  <Style x:Key="MyNet.Styles.RepeatButton.Embedded.ScrollBar.Page" TargetType="{x:Type RepeatButton}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="Transparent" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.RepeatButton.Embedded.Slider" TargetType="{x:Type RepeatButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="Transparent" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Key="MyNet.DataTemplates.Icon.TabItem">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <ContentControl x:Name="Icon" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
      <ContentControl x:Name="Content" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding}" />
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" Value="{x:Static ctrl:Alignment.Left}">
        <Setter TargetName="Content" Property="Grid.Column" Value="1" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" Value="{x:Static ctrl:Alignment.Top}">
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="1" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" Value="{x:Static ctrl:Alignment.Right}">
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="1" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" Value="{x:Static ctrl:Alignment.Bottom}">
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="1" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <Style x:Key="MyNet.Styles.TextBlock" TargetType="{x:Type TextBlock}">
    <Setter Property="TextOptions.TextHintingMode" Value="Fixed" />
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    <Setter Property="TextWrapping" Value="NoWrap" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="p:GlobalizationAssist.UpdateOnCultureChanged" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.Thumb" TargetType="{x:Type Thumb}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Border.CornerRadius" Value="0" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Padding" Value="8" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border x:Name="PART_Border" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding Border.CornerRadius}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ctrl:PackIcon x:Key="MyNet.PackIcons.Check" Width="24" Height="24" x:Shared="False" FlowDirection="LeftToRight" Kind="Check" />
  <sys:Double x:Key="ToggleButtonWidth">40</sys:Double>
  <sys:Double x:Key="ToggleButtonHeight">20</sys:Double>
  <Style x:Key="MyNet.Styles.ToolBarTray" TargetType="{x:Type ToolBarTray}">
    <Setter Property="Background" Value="Transparent" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Embedded.TreeViewItem" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Height" Value="16" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Unchecked" To="Checked">
                    <VisualTransition.GeneratedEasingFunction>
                      <QuarticEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="45" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition GeneratedDuration="0" To="Unchecked">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                        <EasingDoubleKeyFrame KeyTime="0" Value="45" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition GeneratedDuration="0" To="Checked">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition GeneratedDuration="0" From="Checked" To="Unchecked">
                    <VisualTransition.GeneratedEasingFunction>
                      <QuarticEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                        <EasingDoubleKeyFrame KeyTime="0" Value="45" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="45" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Viewbox>
              <Canvas Width="24" Height="24">
                <Path x:Name="ExpandPath" Data="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" Fill="{TemplateBinding Foreground}" RenderTransformOrigin=".5,.5" SnapsToDevicePixels="True" Stroke="{TemplateBinding Foreground}">
                  <Path.RenderTransform>
                    <TransformGroup>
                      <ScaleTransform />
                      <SkewTransform />
                      <RotateTransform Angle="0" CenterX="4" CenterY="4" />
                      <TranslateTransform />
                    </TransformGroup>
                  </Path.RenderTransform>
                </Path>
              </Canvas>
            </Viewbox>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Width" Value="16" />
  </Style>
  <SineEase x:Key="BadgeEase" EasingMode="EaseOut" />
  <Style x:Key="MyNet.Styles.CalendarItemsControl" TargetType="{x:Type ctrl:CalendarItemsControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <ctrl:CalendarPanel BorderBrush="{Binding InnerBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}" BorderThickess="{Binding InnerBorderThickess, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}" Columns="{Binding ColumnsCount, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}" IsItemsHost="True" Rows="{Binding RowsCount, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Contained" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="False" />
  </Style>
  <Style x:Key="MyNet.Styles.Thumb.Embedded.Clock" TargetType="{x:Type Thumb}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Ellipse Fill="{TemplateBinding Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Thickness x:Key="CodeBlockPadding">11,5,11,6</Thickness>
  <Thickness x:Key="CodeBlockBorderThemeThickness">1</Thickness>
  <Cursor x:Key="MyNet.Cursors.EyeDropper">pack://application:,,,/MyNet.Wpf;component/Cursors/EyeDropper.cur</Cursor>
  <Style x:Key="MyNet.Styles.Button.Embedded.ColorPicker" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="ClickMode" Value="Release" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="White" Opacity="0.002" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Duration x:Key="DynamicScrollAnimationDuration">0:0:0.16</Duration>
  <Duration x:Key="DynamicButtonHoverAnimationDuration">0:0:0.16</Duration>
  <Style x:Key="MyNet.Styles.DynamicScrollViewer" TargetType="{x:Type ctrl:DynamicScrollViewer}">
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:DynamicScrollViewer}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" />
            <ctrl:DynamicScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" IsScrolling="{TemplateBinding IsScrollingVertically}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{TemplateBinding VerticalOffset}" />
            <ctrl:DynamicScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" IsScrolling="{TemplateBinding IsScrollingHorizontally}" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{TemplateBinding HorizontalOffset}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="p:ScrollViewerAssist.IgnorePadding" Value="False">
              <Setter TargetName="PART_ScrollContentPresenter" Property="Margin" Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
  </Style>
  <SineEase x:Key="FlipEase" EasingMode="EaseInOut" po:Freeze="True" />
  <Style x:Key="MyNet.Styles.GeometryIcon" TargetType="{x:Type ctrl:GeometryIcon}">
    <Setter Property="FlowDirection" Value="LeftToRight" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Height" Value="16" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:GeometryIcon}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Viewbox FlowDirection="{TemplateBinding FlowDirection}">
              <Canvas Width="24" Height="24">
                <Path Data="{Binding Data, RelativeSource={RelativeSource TemplatedParent}}" Fill="{TemplateBinding Foreground}" />
              </Canvas>
            </Viewbox>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Width" Value="16" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Embedded.ImagePicker" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="ClickMode" Value="Release" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="White" Opacity="0.002" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.LoadingIndicator.Arcs" TargetType="{x:Type ctrl:LoadingIndicator}">
    <Border x:Name="TemplateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <Border.Resources>
        <Style TargetType="{x:Type Canvas}">
          <Setter Property="RenderTransform">
            <Setter.Value>
              <RotateTransform />
            </Setter.Value>
          </Setter>
          <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        </Style>
      </Border.Resources>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="SizeStates">
          <VisualState x:Name="Large" />
          <VisualState x:Name="Small" />
        </VisualStateGroup>
        <VisualStateGroup x:Name="ActiveStates">
          <VisualState x:Name="Inactive" />
          <VisualState x:Name="Active">
            <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}">
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas0" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:3.000" Value="360" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas1" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:2.000" Value="-360" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Grid Background="Transparent">
        <Grid.RenderTransform>
          <TransformGroup>
            <ScaleTransform ScaleX="0.5" ScaleY="0.5" />
            <TranslateTransform X="10" Y="10" />
          </TransformGroup>
        </Grid.RenderTransform>
        <Canvas x:Name="PART_Canvas0" Opacity="1.0">
          <Path Stroke="{TemplateBinding Foreground}" StrokeThickness="10">
            <Path.Data>
              <PathGeometry>
                <PathGeometry.Transform>
                  <TranslateTransform X="20" Y="-20" />
                </PathGeometry.Transform>
                <PathGeometry.Figures>
                  <PathFigureCollection>
                    <PathFigure StartPoint="0,0">
                      <PathFigure.Segments>
                        <PathSegmentCollection>
                          <ArcSegment IsLargeArc="True" Point="40,40" Size="40,40" SweepDirection="CounterClockwise" />
                        </PathSegmentCollection>
                      </PathFigure.Segments>
                    </PathFigure>
                  </PathFigureCollection>
                </PathGeometry.Figures>
              </PathGeometry>
            </Path.Data>
          </Path>
        </Canvas>
        <Canvas x:Name="PART_Canvas1" Opacity="0.3">
          <Path Stroke="{TemplateBinding Foreground}" StrokeThickness="10">
            <Path.Data>
              <PathGeometry>
                <PathGeometry.Transform>
                  <TranslateTransform X="-7" Y="7" />
                </PathGeometry.Transform>
                <PathGeometry.Figures>
                  <PathFigureCollection>
                    <PathFigure StartPoint="0,0">
                      <PathFigure.Segments>
                        <PathSegmentCollection>
                          <ArcSegment IsLargeArc="True" Point="40,40" Size="30,30" SweepDirection="Clockwise" />
                        </PathSegmentCollection>
                      </PathFigure.Segments>
                    </PathFigure>
                  </PathFigureCollection>
                </PathGeometry.Figures>
              </PathGeometry>
            </Path.Data>
          </Path>
        </Canvas>
      </Grid>
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.LoadingIndicator.ArcsRing" TargetType="{x:Type ctrl:LoadingIndicator}">
    <Border x:Name="TemplateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <Border.Resources>
        <Style TargetType="{x:Type Canvas}">
          <Setter Property="Opacity" Value="0.3" />
        </Style>
        <Style TargetType="{x:Type Path}">
          <Setter Property="StrokeThickness" Value="10" />
        </Style>
      </Border.Resources>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="SizeStates">
          <VisualState x:Name="Large" />
          <VisualState x:Name="Small" />
        </VisualStateGroup>
        <VisualStateGroup x:Name="ActiveStates">
          <VisualState x:Name="Inactive" />
          <VisualState x:Name="Active">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.000" RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas0" Storyboard.TargetProperty="(UIElement.Opacity)">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.100" RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas1" Storyboard.TargetProperty="(UIElement.Opacity)">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.200" RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas2" Storyboard.TargetProperty="(UIElement.Opacity)">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.300" RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas3" Storyboard.TargetProperty="(UIElement.Opacity)">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.400" RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas4" Storyboard.TargetProperty="(UIElement.Opacity)">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.500" RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas5" Storyboard.TargetProperty="(UIElement.Opacity)">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.600" RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas6" Storyboard.TargetProperty="(UIElement.Opacity)">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.700" RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas7" Storyboard.TargetProperty="(UIElement.Opacity)">
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Grid Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent" RenderTransformOrigin="0.5,0.5">
        <Grid.RenderTransform>
          <ScaleTransform ScaleX="0.5" ScaleY="0.5" />
        </Grid.RenderTransform>
        <Canvas x:Name="PART_Canvas0">
          <Canvas.RenderTransform>
            <TranslateTransform X="0" Y="-14" />
          </Canvas.RenderTransform>
          <Path Data="M 10,0 A 40,40 0 0 1 30,0" Stroke="{TemplateBinding Foreground}" />
        </Canvas>
        <Canvas x:Name="PART_Canvas1">
          <Canvas.RenderTransform>
            <TranslateTransform X="12" Y="-12" />
          </Canvas.RenderTransform>
          <Path Data="M 40,14 A 40,40 0 0 0 24,0" Stroke="{TemplateBinding Foreground}" />
        </Canvas>
        <Canvas x:Name="PART_Canvas2">
          <Canvas.RenderTransform>
            <TranslateTransform X="14" Y="0" />
          </Canvas.RenderTransform>
          <Path Data="M 40,10 A 40,40 0 0 1 40,30" Stroke="{TemplateBinding Foreground}" />
        </Canvas>
        <Canvas x:Name="PART_Canvas3">
          <Canvas.RenderTransform>
            <TranslateTransform X="12" Y="12" />
          </Canvas.RenderTransform>
          <Path Data="M 40,24 A 40,40 0 0 1 24,40" Stroke="{TemplateBinding Foreground}" />
        </Canvas>
        <Canvas x:Name="PART_Canvas4">
          <Canvas.RenderTransform>
            <TranslateTransform X="0" Y="14" />
          </Canvas.RenderTransform>
          <Path Data="M 10,40 A 40,40 0 0 0 30,40" Stroke="{TemplateBinding Foreground}" />
        </Canvas>
        <Canvas x:Name="PART_Canvas5">
          <Canvas.RenderTransform>
            <TranslateTransform X="-12" Y="12" />
          </Canvas.RenderTransform>
          <Path Data="M 0,24 A 40,40 0 0 0 14,40" Stroke="{TemplateBinding Foreground}" />
        </Canvas>
        <Canvas x:Name="PART_Canvas6">
          <Canvas.RenderTransform>
            <TranslateTransform X="-14" Y="0" />
          </Canvas.RenderTransform>
          <Path Data="M 0,10 A 40,40 0 0 0 0,30" Stroke="{TemplateBinding Foreground}" />
        </Canvas>
        <Canvas x:Name="PART_Canvas7">
          <Canvas.RenderTransform>
            <TranslateTransform X="-12" Y="-12" />
          </Canvas.RenderTransform>
          <Path Data="M 0,14 A 40,40 0 0 1 14,0" Stroke="{TemplateBinding Foreground}" />
        </Canvas>
      </Grid>
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.LoadingIndicator.DoubleBounce" TargetType="{x:Type ctrl:LoadingIndicator}">
    <Border x:Name="TemplateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="SizeStates">
          <VisualState x:Name="Large" />
          <VisualState x:Name="Small" />
        </VisualStateGroup>
        <VisualStateGroup x:Name="ActiveStates">
          <VisualState x:Name="Inactive" />
          <VisualState x:Name="Active">
            <Storyboard RepeatBehavior="Forever" SpeedRatio="{TemplateBinding SpeedRatio}" Duration="0:0:1.000">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse0" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <EasingDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:1.000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse0" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <EasingDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:1.000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <EasingDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <EasingDoubleKeyFrame KeyTime="0:0:1.000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <EasingDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <EasingDoubleKeyFrame KeyTime="0:0:1.000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Grid Background="Transparent">
        <Ellipse x:Name="PART_Ellipse0" Fill="{TemplateBinding Foreground}" Opacity="0.3" RenderTransformOrigin="0.5,0.5">
          <Ellipse.RenderTransform>
            <ScaleTransform />
          </Ellipse.RenderTransform>
        </Ellipse>
        <Ellipse x:Name="PART_Ellipse1" Fill="{TemplateBinding Foreground}" Opacity="0.3" RenderTransformOrigin="0.5,0.5">
          <Ellipse.RenderTransform>
            <ScaleTransform />
          </Ellipse.RenderTransform>
        </Ellipse>
      </Grid>
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.LoadingIndicator.FlipPlane" TargetType="{x:Type ctrl:LoadingIndicator}">
    <Border x:Name="TemplateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="SizeStates">
          <VisualState x:Name="Large" />
          <VisualState x:Name="Small" />
        </VisualStateGroup>
        <VisualStateGroup x:Name="ActiveStates">
          <VisualState x:Name="Inactive" />
          <VisualState x:Name="Active">
            <Storyboard RepeatBehavior="Forever" SpeedRatio="{TemplateBinding SpeedRatio}" Duration="0:0:1.600">
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.000" Storyboard.TargetName="PART_Rect" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.800" Storyboard.TargetName="PART_Rect" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Grid Background="Transparent">
        <Rectangle x:Name="PART_Rect" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
          <Rectangle.RenderTransform>
            <ScaleTransform />
          </Rectangle.RenderTransform>
        </Rectangle>
      </Grid>
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.LoadingIndicator.Pulse" TargetType="{x:Type ctrl:LoadingIndicator}">
    <Border x:Name="TemplateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="SizeStates">
          <VisualState x:Name="Large" />
          <VisualState x:Name="Small" />
        </VisualStateGroup>
        <VisualStateGroup x:Name="ActiveStates">
          <VisualState x:Name="Inactive" />
          <VisualState x:Name="Active">
            <Storyboard RepeatBehavior="Forever" SpeedRatio="{TemplateBinding SpeedRatio}" Duration="0:0:1.500">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.500" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.500" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimation Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="(UIElement.Opacity)" From="1" To="0" Duration="0:0:1.500" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Grid Background="Transparent">
        <Ellipse x:Name="PART_Ellipse" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
          <Ellipse.RenderTransform>
            <ScaleTransform />
          </Ellipse.RenderTransform>
        </Ellipse>
      </Grid>
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.LoadingIndicator.Ring" TargetType="{x:Type ctrl:LoadingIndicator}">
    <Border x:Name="TemplateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="SizeStates">
          <VisualState x:Name="Large" />
          <VisualState x:Name="Small" />
        </VisualStateGroup>
        <VisualStateGroup x:Name="ActiveStates">
          <VisualState x:Name="Inactive" />
          <VisualState x:Name="Active">
            <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}">
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.000" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse0" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.100" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.200" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse2" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.300" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse3" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.400" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse4" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.500" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.600" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse6" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.700" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse7" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.000" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse0" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.100" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.200" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse2" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.300" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse3" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.400" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse4" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.500" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.600" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse6" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.700" RepeatBehavior="Forever" Storyboard.TargetName="PART_Ellipse7" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="Transparent">
        <Grid.Resources>
          <Style TargetType="{x:Type Ellipse}">
            <Setter Property="Height" Value="{Binding Height, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:LoadingIndicator}}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=0.2}" />
            <Setter Property="RenderTransform">
              <Setter.Value>
                <ScaleTransform ScaleX="0" ScaleY="0" />
              </Setter.Value>
            </Setter>
            <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
            <Setter Property="Width" Value="{Binding Width, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:LoadingIndicator}}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=0.2}" />
          </Style>
        </Grid.Resources>
        <Grid.ColumnDefinitions>
          <ColumnDefinition />
          <ColumnDefinition />
          <ColumnDefinition />
          <ColumnDefinition />
          <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition />
          <RowDefinition />
          <RowDefinition />
          <RowDefinition />
          <RowDefinition />
        </Grid.RowDefinitions>
        <Ellipse x:Name="PART_Ellipse0" Grid.Row="0" Grid.RowSpan="1" Grid.Column="2" Grid.ColumnSpan="1" Fill="{TemplateBinding Foreground}" />
        <Ellipse x:Name="PART_Ellipse1" Grid.Row="0" Grid.RowSpan="2" Grid.Column="3" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
        <Ellipse x:Name="PART_Ellipse2" Grid.Row="2" Grid.RowSpan="1" Grid.Column="4" Grid.ColumnSpan="1" Fill="{TemplateBinding Foreground}" />
        <Ellipse x:Name="PART_Ellipse3" Grid.Row="3" Grid.RowSpan="2" Grid.Column="3" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
        <Ellipse x:Name="PART_Ellipse4" Grid.Row="4" Grid.RowSpan="1" Grid.Column="2" Grid.ColumnSpan="1" Fill="{TemplateBinding Foreground}" />
        <Ellipse x:Name="PART_Ellipse5" Grid.Row="3" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
        <Ellipse x:Name="PART_Ellipse6" Grid.Row="2" Grid.RowSpan="1" Grid.Column="0" Grid.ColumnSpan="1" Fill="{TemplateBinding Foreground}" />
        <Ellipse x:Name="PART_Ellipse7" Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
      </Grid>
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.LoadingIndicator.ThreeDots" TargetType="{x:Type ctrl:LoadingIndicator}">
    <Border x:Name="TemplateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <Border.Resources>
        <Style TargetType="Ellipse">
          <Setter Property="Height" Value="20" />
          <Setter Property="RenderTransform">
            <Setter.Value>
              <ScaleTransform ScaleX="0" ScaleY="0" />
            </Setter.Value>
          </Setter>
          <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
          <Setter Property="Width" Value="20" />
        </Style>
      </Border.Resources>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="SizeStates">
          <VisualState x:Name="Large" />
          <VisualState x:Name="Small" />
        </VisualStateGroup>
        <VisualStateGroup x:Name="ActiveStates">
          <VisualState x:Name="Inactive" />
          <VisualState x:Name="Active">
            <Storyboard RepeatBehavior="Forever" SpeedRatio="{TemplateBinding SpeedRatio}" Duration="0:0:1.900">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse0" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.500" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.600" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.100" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.750" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.850" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.350" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse2" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.500" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.000" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.100" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.600" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse0" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.500" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.600" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.100" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.750" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.850" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.350" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse2" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.500" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.000" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.100" Value="1" />
                <LinearDoubleKeyFrame KeyTime="0:0:1.600" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Border Background="Transparent">
        <Grid Width="70" Height="20">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <Ellipse x:Name="PART_Ellipse0" Grid.Column="0" Fill="{TemplateBinding Foreground}" />
          <Ellipse x:Name="PART_Ellipse1" Grid.Column="2" Fill="{TemplateBinding Foreground}" />
          <Ellipse x:Name="PART_Ellipse2" Grid.Column="4" Fill="{TemplateBinding Foreground}" />
        </Grid>
      </Border>
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.LoadingIndicator.Wave" TargetType="{x:Type ctrl:LoadingIndicator}">
    <ControlTemplate.Resources>
      <Style TargetType="Rectangle">
        <Setter Property="RenderTransform">
          <Setter.Value>
            <ScaleTransform />
          </Setter.Value>
        </Setter>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="6" />
      </Style>
    </ControlTemplate.Resources>
    <Border Name="TemplateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="SizeStates">
          <VisualState x:Name="Large" />
          <VisualState x:Name="Small" />
        </VisualStateGroup>
        <VisualStateGroup x:Name="ActiveStates">
          <VisualState x:Name="Inactive" />
          <VisualState x:Name="Active">
            <Storyboard RepeatBehavior="Forever" SpeedRatio="{TemplateBinding SpeedRatio}" Duration="0:0:1.000">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Rect0" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.100" Value="1.6" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.150" Value="1.6" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.350" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Rect1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.150" Value="1.6" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.200" Value="1.6" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Rect2" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.200" Value="1.6" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="1.6" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.450" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Rect3" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="1.6" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.300" Value="1.6" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.500" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Rect4" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                <LinearDoubleKeyFrame KeyTime="0:0:0.300" Value="1.6" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.350" Value="1.6" />
                <LinearDoubleKeyFrame KeyTime="0:0:0.550" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Grid Background="Transparent">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="6" />
          <ColumnDefinition Width="5" />
          <ColumnDefinition Width="6" />
          <ColumnDefinition Width="5" />
          <ColumnDefinition Width="6" />
          <ColumnDefinition Width="5" />
          <ColumnDefinition Width="6" />
          <ColumnDefinition Width="5" />
          <ColumnDefinition Width="6" />
          <ColumnDefinition Width="5" />
        </Grid.ColumnDefinitions>
        <Rectangle x:Name="PART_Rect0" Grid.Column="0" Fill="{TemplateBinding Foreground}" />
        <Rectangle x:Name="PART_Rect1" Grid.Column="2" Fill="{TemplateBinding Foreground}" />
        <Rectangle x:Name="PART_Rect2" Grid.Column="4" Fill="{TemplateBinding Foreground}" />
        <Rectangle x:Name="PART_Rect3" Grid.Column="6" Fill="{TemplateBinding Foreground}" />
        <Rectangle x:Name="PART_Rect4" Grid.Column="8" Fill="{TemplateBinding Foreground}" />
      </Grid>
    </Border>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.LoadingIndicator.Foreground" TargetType="{x:Type ctrl:LoadingIndicator}">
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <sys:Double x:Key="MyNet.Widths.MessageView.Buttons">105</sys:Double>
  <Style x:Key="MyNet.Styles.Button.Embedded.MonthPicker" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="ClickMode" Value="Release" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="White" Opacity="0.002" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Key="MyNet.DataTemplates.MultiComboBox.SelectedItem">
    <TextBlock HorizontalAlignment="Stretch" VerticalAlignment="Center" Text="{me:Translation}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
  </DataTemplate>
  <Style x:Key="MyNet.Styles.NavigationFrame" TargetType="{x:Type ctrl:NavigationFrame}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:NavigationFrame}">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="True" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter Grid.Row="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.PackIcon" TargetType="{x:Type ctrl:PackIcon}">
    <Setter Property="FlowDirection" Value="LeftToRight" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Height" Value="16" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:PackIcon}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Viewbox FlowDirection="{TemplateBinding FlowDirection}">
              <Canvas Width="24" Height="24">
                <Path Data="{Binding Data, RelativeSource={RelativeSource TemplatedParent}}" Fill="{TemplateBinding Foreground}" />
              </Canvas>
            </Viewbox>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Width" Value="16" />
  </Style>
  <Style x:Key="MyNet.Styles.PopupEx" TargetType="{x:Type ctrl:PopupEx}">
    <Setter Property="AllowsTransparency" Value="True" />
    <Setter Property="Placement" Value="Custom" />
    <Setter Property="PopupAnimation" Value="Slide" />
  </Style>
  <sys:Double x:Key="NoContentFloatingScale">1.0</sys:Double>
  <CubicEase x:Key="AnimationEasingFunction" EasingMode="EaseInOut" />
  <Style x:Key="MyNet.Styles.Button.Embedded.TimePicker" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="ClickMode" Value="Release" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="White" Opacity="0.002" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.VirtualizingGridView" TargetType="{x:Type ctrl:VirtualizingGridView}">
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <ctrl:VirtualizingWrapPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" Orientation="Vertical" SpacingMode="StartAndEndOnly" StretchItems="False" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:VirtualizingGridView}">
          <Grid>
            <ctrl:DynamicScrollViewer x:Name="PART_ContentHost">
              <ItemsPresenter />
            </ctrl:DynamicScrollViewer>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsGrouping" Value="True">
              <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Standard" />
  </Style>
  <Style x:Key="MyNet.Styles.VirtualizingItemsControl" TargetType="{x:Type ctrl:VirtualizingItemsControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <ctrl:VirtualizingWrapPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" Orientation="Vertical" SpacingMode="StartAndEndOnly" StretchItems="False" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Margin" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:VirtualizingItemsControl}">
          <ctrl:DynamicScrollViewer CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Focusable="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
          </ctrl:DynamicScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Standard" />
  </Style>
  <Style x:Key="MyNet.Styles.VirtualizingWrapPanel" TargetType="{x:Type ctrl:VirtualizingWrapPanel}">
    <Setter Property="IsVirtualizing" Value="True" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="VirtualizationMode" Value="Standard" />
  </Style>
  <SolidColorBrush x:Key="MyNet.Brushes.Red" Color="{StaticResource MyNet.Colors.Red}" po:Freeze="true" />
  <SolidColorBrush x:Key="MyNet.Brushes.White" Color="{StaticResource MyNet.Colors.White}" po:Freeze="true" />
  <SolidColorBrush x:Key="MyNet.Brushes.Black" Color="{StaticResource MyNet.Colors.Black}" po:Freeze="true" />
  <SolidColorBrush x:Key="MyNet.Brushes.Gold" Color="{StaticResource MyNet.Colors.Gold}" po:Freeze="true" />
  <SolidColorBrush x:Key="MyNet.Brushes.Female" Color="{StaticResource MyNet.Colors.Female}" po:Freeze="true" />
  <SolidColorBrush x:Key="MyNet.Brushes.Male" Color="{StaticResource MyNet.Colors.Male}" po:Freeze="true" />
  <DropShadowEffect x:Key="MyNet.Shadows.Elevation1" BlurRadius="3" Direction="270" Opacity="0.45" RenderingBias="Performance" ShadowDepth="1" Color="{DynamicResource MyNet.Colors.Shadow}" po:Freeze="True" />
  <DropShadowEffect x:Key="MyNet.Shadows.Elevation2" BlurRadius="5" Direction="270" Opacity="0.45" RenderingBias="Performance" ShadowDepth="1.5" Color="{DynamicResource MyNet.Colors.Shadow}" po:Freeze="True" />
  <DropShadowEffect x:Key="MyNet.Shadows.Elevation3" BlurRadius="7" Direction="270" Opacity="0.45" RenderingBias="Performance" ShadowDepth="2" Color="{DynamicResource MyNet.Colors.Shadow}" po:Freeze="True" />
  <DropShadowEffect x:Key="MyNet.Shadows.Elevation4" BlurRadius="9" Direction="270" Opacity="0.45" RenderingBias="Performance" ShadowDepth="2.5" Color="{DynamicResource MyNet.Colors.Shadow}" po:Freeze="True" />
  <DropShadowEffect x:Key="MyNet.Shadows.Elevation5" BlurRadius="11" Direction="270" Opacity="0.45" RenderingBias="Performance" ShadowDepth="3" Color="{DynamicResource MyNet.Colors.Shadow}" po:Freeze="True" />
  <DropShadowEffect x:Key="MyNet.Shadows.Elevation6" BlurRadius="13" Direction="270" Opacity="0.45" RenderingBias="Performance" ShadowDepth="3.5" Color="{DynamicResource MyNet.Colors.Shadow}" po:Freeze="True" />
  <DropShadowEffect x:Key="MyNet.Shadows.Elevation7" BlurRadius="15" Direction="270" Opacity="0.45" RenderingBias="Performance" ShadowDepth="4" Color="{DynamicResource MyNet.Colors.Shadow}" po:Freeze="True" />
  <DropShadowEffect x:Key="MyNet.Shadows.Elevation8" BlurRadius="17" Direction="270" Opacity="0.45" RenderingBias="Performance" ShadowDepth="4.5" Color="{DynamicResource MyNet.Colors.Shadow}" po:Freeze="True" />
  <DropShadowEffect x:Key="MyNet.Shadows.Elevation12" BlurRadius="25" Direction="270" Opacity="0.45" RenderingBias="Performance" ShadowDepth="6.5" Color="{DynamicResource MyNet.Colors.Shadow}" po:Freeze="True" />
  <DropShadowEffect x:Key="MyNet.Shadows.Elevation16" BlurRadius="33" Direction="270" Opacity="0.45" RenderingBias="Performance" ShadowDepth="8.5" Color="{DynamicResource MyNet.Colors.Shadow}" po:Freeze="True" />
  <DropShadowEffect x:Key="MyNet.Shadows.Elevation24" BlurRadius="49" Direction="270" Opacity="0.45" RenderingBias="Performance" ShadowDepth="12.5" Color="{DynamicResource MyNet.Colors.Shadow}" po:Freeze="True" />
  <Thickness x:Key="MyNet.Margins.Small" Bottom="{StaticResource MyNet.Margin.Small}" Left="{StaticResource MyNet.Margin.Small}" Right="{StaticResource MyNet.Margin.Small}" Top="{StaticResource MyNet.Margin.Small}" />
  <Thickness x:Key="MyNet.Margins.Small.Horizontal" Left="{StaticResource MyNet.Margin.Small}" Right="{StaticResource MyNet.Margin.Small}" />
  <Thickness x:Key="MyNet.Margins.Small.Vertical" Bottom="{StaticResource MyNet.Margin.Small}" Top="{StaticResource MyNet.Margin.Small}" />
  <Thickness x:Key="MyNet.Margins.Small.Left" Left="{StaticResource MyNet.Margin.Small}" />
  <Thickness x:Key="MyNet.Margins.Small.Right" Right="{StaticResource MyNet.Margin.Small}" />
  <Thickness x:Key="MyNet.Margins.Small.Top" Top="{StaticResource MyNet.Margin.Small}" />
  <Thickness x:Key="MyNet.Margins.Small.Bottom" Bottom="{StaticResource MyNet.Margin.Small}" />
  <Thickness x:Key="MyNet.Margins.Default" Bottom="{StaticResource MyNet.Margin.Default}" Left="{StaticResource MyNet.Margin.Default}" Right="{StaticResource MyNet.Margin.Default}" Top="{StaticResource MyNet.Margin.Default}" />
  <Thickness x:Key="MyNet.Margins.Default.Horizontal" Left="{StaticResource MyNet.Margin.Default}" Right="{StaticResource MyNet.Margin.Default}" />
  <Thickness x:Key="MyNet.Margins.Default.Vertical" Bottom="{StaticResource MyNet.Margin.Default}" Top="{StaticResource MyNet.Margin.Default}" />
  <Thickness x:Key="MyNet.Margins.Default.Left" Left="{StaticResource MyNet.Margin.Default}" />
  <Thickness x:Key="MyNet.Margins.Default.Right" Right="{StaticResource MyNet.Margin.Default}" />
  <Thickness x:Key="MyNet.Margins.Default.Top" Top="{StaticResource MyNet.Margin.Default}" />
  <Thickness x:Key="MyNet.Margins.Default.Bottom" Bottom="{StaticResource MyNet.Margin.Default}" />
  <Thickness x:Key="MyNet.Margins.Medium" Bottom="{StaticResource MyNet.Margin.Medium}" Left="{StaticResource MyNet.Margin.Medium}" Right="{StaticResource MyNet.Margin.Medium}" Top="{StaticResource MyNet.Margin.Medium}" />
  <Thickness x:Key="MyNet.Margins.Medium.Horizontal" Left="{StaticResource MyNet.Margin.Medium}" Right="{StaticResource MyNet.Margin.Medium}" />
  <Thickness x:Key="MyNet.Margins.Medium.Vertical" Bottom="{StaticResource MyNet.Margin.Medium}" Top="{StaticResource MyNet.Margin.Medium}" />
  <Thickness x:Key="MyNet.Margins.Medium.Left" Left="{StaticResource MyNet.Margin.Medium}" />
  <Thickness x:Key="MyNet.Margins.Medium.Right" Right="{StaticResource MyNet.Margin.Medium}" />
  <Thickness x:Key="MyNet.Margins.Medium.Top" Top="{StaticResource MyNet.Margin.Medium}" />
  <Thickness x:Key="MyNet.Margins.Medium.Bottom" Bottom="{StaticResource MyNet.Margin.Medium}" />
  <Thickness x:Key="MyNet.Margins.Large" Bottom="{StaticResource MyNet.Margin.Large}" Left="{StaticResource MyNet.Margin.Large}" Right="{StaticResource MyNet.Margin.Large}" Top="{StaticResource MyNet.Margin.Large}" />
  <Thickness x:Key="MyNet.Margins.Large.Horizontal" Left="{StaticResource MyNet.Margin.Large}" Right="{StaticResource MyNet.Margin.Large}" />
  <Thickness x:Key="MyNet.Margins.Large.Vertical" Bottom="{StaticResource MyNet.Margin.Large}" Top="{StaticResource MyNet.Margin.Large}" />
  <Thickness x:Key="MyNet.Margins.Large.Left" Left="{StaticResource MyNet.Margin.Large}" />
  <Thickness x:Key="MyNet.Margins.Large.Right" Right="{StaticResource MyNet.Margin.Large}" />
  <Thickness x:Key="MyNet.Margins.Large.Top" Top="{StaticResource MyNet.Margin.Large}" />
  <Thickness x:Key="MyNet.Margins.Large.Bottom" Bottom="{StaticResource MyNet.Margin.Large}" />
  <Thickness x:Key="MyNet.Margins.VeryLarge" Bottom="{StaticResource MyNet.Margin.VeryLarge}" Left="{StaticResource MyNet.Margin.VeryLarge}" Right="{StaticResource MyNet.Margin.VeryLarge}" Top="{StaticResource MyNet.Margin.VeryLarge}" />
  <Thickness x:Key="MyNet.Margins.VeryLarge.Bottom" Bottom="{StaticResource MyNet.Margin.VeryLarge}" />
  <Thickness x:Key="MyNet.Margins.VeryLarge.Top" Top="{StaticResource MyNet.Margin.VeryLarge}" />
  <Thickness x:Key="MyNet.Margins.VeryLarge.Horizontal" Bottom="0" Left="{StaticResource MyNet.Margin.VeryLarge}" Right="{StaticResource MyNet.Margin.VeryLarge}" Top="0" />
  <Thickness x:Key="MyNet.Margins.VeryLarge.Vertical" Bottom="{StaticResource MyNet.Margin.VeryLarge}" Top="{StaticResource MyNet.Margin.VeryLarge}" />
  <Thickness x:Key="MyNet.Margins.VeryLarge.Right" Right="{StaticResource MyNet.Margin.VeryLarge}" />
  <Thickness x:Key="MyNet.Margins.VeryLarge.Left" Left="{StaticResource MyNet.Margin.VeryLarge}" />
  <Thickness x:Key="MyNet.Margins.Huge.Horizontal" Left="{StaticResource MyNet.Margin.Huge}" Right="{StaticResource MyNet.Margin.Huge}" />
  <Thickness x:Key="MyNet.Margins.Huge.Vertical" Bottom="{StaticResource MyNet.Margin.Huge}" Top="{StaticResource MyNet.Margin.Huge}" />
  <Thickness x:Key="MyNet.Margins.Huge" Bottom="{StaticResource MyNet.Margin.Huge}" Left="{StaticResource MyNet.Margin.Huge}" Right="{StaticResource MyNet.Margin.Huge}" Top="{StaticResource MyNet.Margin.Huge}" />
  <Thickness x:Key="MyNet.Margins.Huge.Bottom" Bottom="{StaticResource MyNet.Margin.Huge}" />
  <Thickness x:Key="MyNet.Margins.Huge.Top" Top="{StaticResource MyNet.Margin.Huge}" />
  <Thickness x:Key="MyNet.Margins.Huge.Right" Right="{StaticResource MyNet.Margin.Huge}" Top="0" />
  <Thickness x:Key="MyNet.Margins.Huge.Left" Left="{StaticResource MyNet.Margin.Huge}" />
  <CornerRadius x:Key="MyNet.CornerRadius.Control" BottomLeft="{StaticResource MyNet.UniformCornerRadius.Control}" BottomRight="{StaticResource MyNet.UniformCornerRadius.Control}" TopLeft="{StaticResource MyNet.UniformCornerRadius.Control}" TopRight="{StaticResource MyNet.UniformCornerRadius.Control}" />
  <CornerRadius x:Key="MyNet.CornerRadius.Control.Top" TopLeft="{StaticResource MyNet.UniformCornerRadius.Control}" TopRight="{StaticResource MyNet.UniformCornerRadius.Control}" />
  <CornerRadius x:Key="MyNet.CornerRadius.Control.Bottom" BottomLeft="{StaticResource MyNet.UniformCornerRadius.Control}" BottomRight="{StaticResource MyNet.UniformCornerRadius.Control}" />
  <CornerRadius x:Key="MyNet.CornerRadius.Control.Left" BottomLeft="{StaticResource MyNet.UniformCornerRadius.Control}" TopLeft="{StaticResource MyNet.UniformCornerRadius.Control}" />
  <CornerRadius x:Key="MyNet.CornerRadius.Control.Right" BottomRight="{StaticResource MyNet.UniformCornerRadius.Control}" TopRight="{StaticResource MyNet.UniformCornerRadius.Control}" />
  <CornerRadius x:Key="MyNet.CornerRadius.Container" BottomLeft="{StaticResource MyNet.UniformCornerRadius.Container}" BottomRight="{StaticResource MyNet.UniformCornerRadius.Container}" TopLeft="{StaticResource MyNet.UniformCornerRadius.Container}" TopRight="{StaticResource MyNet.UniformCornerRadius.Container}" />
  <CornerRadius x:Key="MyNet.CornerRadius.Container.Top" TopLeft="{StaticResource MyNet.UniformCornerRadius.Container}" TopRight="{StaticResource MyNet.UniformCornerRadius.Container}" />
  <CornerRadius x:Key="MyNet.CornerRadius.Container.Bottom" BottomLeft="{StaticResource MyNet.UniformCornerRadius.Container}" BottomRight="{StaticResource MyNet.UniformCornerRadius.Container}" />
  <CornerRadius x:Key="MyNet.CornerRadius.Container.Left" BottomLeft="{StaticResource MyNet.UniformCornerRadius.Container}" TopLeft="{StaticResource MyNet.UniformCornerRadius.Container}" />
  <CornerRadius x:Key="MyNet.CornerRadius.Container.Right" BottomRight="{StaticResource MyNet.UniformCornerRadius.Container}" TopRight="{StaticResource MyNet.UniformCornerRadius.Container}" />
  <DataTemplate x:Key="MyNet.DataTemplates.Icon">
    <DataTemplate.Resources>
      <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
      </Style>
      <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
      </Style>
    </DataTemplate.Resources>
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition x:Name="Row1" Height="Auto" />
        <RowDefinition x:Name="Row2" Height="Auto" />
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition x:Name="Col1" Width="Auto" />
        <ColumnDefinition x:Name="Col2" Width="*" />
      </Grid.ColumnDefinitions>
      <ContentControl x:Name="Icon" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
      <ContentControl x:Name="Content" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{Binding}" />
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}" Value="{x:Static ctrl:Alignment.Left}">
        <Setter TargetName="Content" Property="Grid.Column" Value="1" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}" Value="{x:Static ctrl:Alignment.Top}">
        <Setter TargetName="Col1" Property="Width" Value="*" />
        <Setter TargetName="Col2" Property="Width" Value="Auto" />
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="1" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
        <Setter TargetName="Row1" Property="Height" Value="Auto" />
        <Setter TargetName="Row2" Property="Height" Value="*" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}" Value="{x:Static ctrl:Alignment.Right}">
        <Setter TargetName="Col1" Property="Width" Value="*" />
        <Setter TargetName="Col2" Property="Width" Value="Auto" />
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="1" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
        <Setter TargetName="Row1" Property="Height" Value="*" />
        <Setter TargetName="Row2" Property="Height" Value="Auto" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}" Value="{x:Static ctrl:Alignment.Bottom}">
        <Setter TargetName="Col1" Property="Width" Value="*" />
        <Setter TargetName="Col2" Property="Width" Value="Auto" />
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="1" />
        <Setter TargetName="Row1" Property="Height" Value="*" />
        <Setter TargetName="Row2" Property="Height" Value="Auto" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <Style x:Key="MyNet.Styles.DateDisplayControl" TargetType="{x:Type ctrl:DateDisplayControl}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:DateDisplayControl}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <StackPanel Margin="0" Orientation="Vertical">
              <TextBlock x:Name="ComponentThreeTextBlock" HorizontalAlignment="Left" FontSize="15" FontWeight="Normal" Text="{TemplateBinding ComponentThreeContent}" />
              <StackPanel x:Name="ComponentOneTwoWrapper" HorizontalAlignment="Left" Orientation="Horizontal">
                <TextBlock Margin="0 0 10 0" FontSize="30" FontWeight="Normal" Text="{TemplateBinding ComponentTwoContent}" />
                <TextBlock FontSize="30" FontWeight="Normal" Text="{TemplateBinding ComponentOneContent}" />
              </StackPanel>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsDayInFirstComponent" Value="True">
              <Setter TargetName="ComponentThreeTextBlock" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ComponentOneTwoWrapper" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
              <Setter TargetName="ComponentThreeTextBlock" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="p:CalendarAssist.Orientation" Value="Horizontal">
              <Setter TargetName="ComponentOneTwoWrapper" Property="Orientation" Value="Vertical" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:GlobalizationAssist.UpdateOnCultureChanged" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Embedded.Calendar.Header" TargetType="{x:Type Button}">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="FontSize" Value="10.5" />
    <Setter Property="FontWeight" Value="{StaticResource MyNet.Font.Weight.Button}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Cursor="Hand">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ctrl:DateDisplayControl x:Name="buttonContent" Style="{StaticResource MyNet.Styles.DateDisplayControl}" p:CalendarAssist.Orientation="{TemplateBinding p:CalendarAssist.Orientation}" Foreground="{TemplateBinding Foreground}" IsEnabled="{TemplateBinding IsEnabled}">
              <ctrl:DateDisplayControl.DisplayDate>
                <MultiBinding Converter="{x:Static c:CalendarDateCoalesceConverter.Default}" Mode="OneWay">
                  <Binding Path="DisplayDate" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Calendar}}" />
                  <Binding Path="SelectedDate" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Calendar}}" />
                </MultiBinding>
              </ctrl:DateDisplayControl.DisplayDate>
            </ctrl:DateDisplayControl>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Chip" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Margin="2" RadiusX="16" RadiusY="16" SnapsToDevicePixels="True" Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}" StrokeDashArray="1 2" StrokeThickness="1" />
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Height" Value="32" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid ClipToBounds="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                    <VisualTransition.GeneratedEasingFunction>
                      <CircleEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Normal" />
                <VisualState Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup Name="CheckStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition To="Checked">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                      <ThicknessAnimation Storyboard.TargetName="IconControl" Storyboard.TargetProperty="Margin" To="4,0,4,0" Duration="0:0:0.2" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition To="CheckedUnfocused">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                      <ThicknessAnimation Storyboard.TargetName="IconControl" Storyboard.TargetProperty="Margin" To="4,0,4,0" Duration="0:0:0.2" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition To="Unchecked">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
                      <ThicknessAnimation Storyboard.TargetName="IconControl" Storyboard.TargetProperty="Margin" To="-16,0,10,0" Duration="0:0:0.2" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="IconControl" Storyboard.TargetProperty="Margin" To="4,0,4,0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="CheckedUnfocused">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="IconControl" Storyboard.TargetProperty="Margin" To="4,0,4,0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="IconControl" Storyboard.TargetProperty="Margin" To="-16,0,10,0" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <Border x:Name="SelectedBackgroundBorder" Grid.Column="0" Grid.ColumnSpan="2" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <Border x:Name="MouseOverBorder" Grid.Column="0" Grid.ColumnSpan="2" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" />
            <ctrl:PackIcon x:Name="IconControl" Grid.Column="0" Width="16" Height="16" Margin="-16 0 0 0" VerticalAlignment="Center" IsTabStop="False" Kind="Check" Visibility="{Binding Path=(p:CheckBoxAssist.ShowCheck), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <ContentControl x:Name="Content" Grid.Column="1" Margin="0 0 10 0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentTemplateSelector}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" IsTabStop="False" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <Trigger Property="p:CheckBoxAssist.ShowCheck" Value="False">
              <Setter TargetName="Content" Property="Margin" Value="10 0 10 0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="p:CheckBoxAssist.ShowCheck" Value="True" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="16" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Chip.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Chip.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Chip.Alternate" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground), Opacity={StaticResource MyNet.Opacity.Checked}}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Chip.Alternate.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Alternate}">
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Chip.Alternate.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Alternate}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <ControlTemplate x:Key="MyNet.Styles.ContentControl.Embedded.ComboBox.Popup" TargetType="{x:Type ContentControl}">
    <Grid MinWidth="{Binding Path=ContentMinWidth, RelativeSource={RelativeSource AncestorType=ctrl:ComboBoxPopup}, Converter={x:Static c:MathConverter.Add}, ConverterParameter=2}" Margin="{Binding Path=ContentMargin, RelativeSource={RelativeSource AncestorType=ctrl:ComboBoxPopup}}">
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      <Border Background="Transparent" BorderBrush="{DynamicResource MyNet.Brushes.Shadow}" BorderThickness="1" CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource AncestorType=ctrl:ComboBoxPopup}}">
        <Border.Effect>
          <BlurEffect Radius="5" />
        </Border.Effect>
      </Border>
      <Border Margin="1" Background="{Binding ElementName=PART_Popup, Path=Background}" CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource AncestorType=ctrl:ComboBoxPopup}}">
        <Grid SnapsToDevicePixels="True">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>
          <Border Grid.Row="0" Height="4" />
          <ContentPresenter Grid.Row="1" />
          <Border Grid.Row="2" Height="4" />
        </Grid>
      </Border>
    </Grid>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.Thumb.Embedded.GridRowHeader" TargetType="{x:Type Thumb}" BasedOn="{StaticResource MyNet.Styles.Thumb}">
    <Setter Property="Cursor" Value="SizeNS" />
    <Setter Property="Height" Value="8" />
    <Setter Property="Padding" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.Thumb.Embedded.GridColumnHeader" TargetType="{x:Type Thumb}" BasedOn="{StaticResource MyNet.Styles.Thumb}">
    <Setter Property="Cursor" Value="SizeWE" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Width" Value="8" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Embedded.DataGrid" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock}">
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <Border Margin="-1 0 -1 -4" Padding="1 0 1 2" BorderBrush="{DynamicResource MyNet.Brushes.Validation.Error}" BorderThickness="0 0 0 2">
            <AdornedElementPlaceholder />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.ContentControl.Embedded.DataGrid" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource MyNet.Styles.ContentControl}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{me:Translation}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <Border Margin="-1 0 -1 -4" Padding="1 0 1 2" BorderBrush="{DynamicResource MyNet.Brushes.Validation.Error}" BorderThickness="0 0 0 2">
            <AdornedElementPlaceholder />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.ContentControl.Embedded.DataGrid.Color" TargetType="{x:Type ContentControl}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:SimpleStackPanel VerticalAlignment="Center" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
            <Grid Width="14" Height="14" VerticalAlignment="Center" Visibility="{Binding Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
              <Border Margin="2" Background="{DynamicResource MyNet.Brushes.Transparency.Small}" CornerRadius="2" Effect="{StaticResource MyNet.Shadows.Elevation1}">
                <Border Background="{Binding Converter={x:Static c:ColorToBrushConverter.Default}}" CornerRadius="2" />
              </Border>
            </Grid>
            <TextBlock IsHitTestVisible="False" Text="{Binding}" />
          </ctrl:SimpleStackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Focusable" Value="True" />
  </Style>
  <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Opacity)">
                      <EasingDoubleKeyFrame KeyTime="0" Value="{StaticResource MyNet.Opacity.Medium}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="Border" SnapsToDevicePixels="True">
              <Rectangle.Fill>
                <SolidColorBrush Color="{DynamicResource MyNet.Colors.Control.Background}" />
              </Rectangle.Fill>
            </Rectangle>
            <Polygon x:Name="Arrow" Margin="8 8 3 3" HorizontalAlignment="Right" VerticalAlignment="Bottom" Points="0,10 10,10 10,0" Stretch="Uniform">
              <Polygon.Fill>
                <SolidColorBrush Opacity="{StaticResource MyNet.Opacity.Medium}" Color="{DynamicResource MyNet.Colors.Application.Foreground}" />
              </Polygon.Fill>
            </Polygon>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.DataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Opacity" Value="{DynamicResource MyNet.Opacity.Secondary}" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(p:DataGridAssist.ColumnHeaderPadding)}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="GoToVisible">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="12" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="GoToHidden">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="12" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid Background="Transparent">
            <Border x:Name="HeaderBorder" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ctrl:ListSortDirectionIndicator x:Name="SortDirectionIndicator" Grid.Column="0" Width="0" Height="12" Margin="{StaticResource MyNet.Margins.Small.Right}" Focusable="False" IsTabStop="False" ListSortDirection="{TemplateBinding SortDirection}" Visibility="{Binding CanUserSortColumns, RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                <ContentPresenter x:Name="HeaderContent" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                  <ContentPresenter.Resources>
                    <Style TargetType="TextBlock">
                      <Setter Property="TextTrimming" Value="WordEllipsis" />
                      <Setter Property="p:TextBlockAssist.AutoToolTip" Value="True" />
                    </Style>
                  </ContentPresenter.Resources>
                </ContentPresenter>
              </Grid>
            </Border>
            <Thumb x:Name="PART_LeftHeaderGripper" Style="{StaticResource MyNet.Styles.Thumb.Embedded.GridColumnHeader}" HorizontalAlignment="Left" />
            <Thumb x:Name="PART_RightHeaderGripper" Style="{StaticResource MyNet.Styles.Thumb.Embedded.GridColumnHeader}" HorizontalAlignment="Right" />
          </Grid>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding CanUserSortColumns, RelativeSource={RelativeSource AncestorType=DataGrid}}" Value="True" />
                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.Setters>
                <Setter Property="Opacity" Value="1" />
                <Setter Property="Cursor" Value="Hand" />
              </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <Trigger SourceName="SortDirectionIndicator" Property="IsNeutral" Value="False">
              <Trigger.EnterActions>
                <BeginStoryboard Name="GoToVisible" Storyboard="{StaticResource GoToVisible}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <RemoveStoryboard BeginStoryboardName="GoToVisible" />
                <BeginStoryboard Storyboard="{StaticResource GoToHidden}" />
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TextBlock.FontWeight" Value="{StaticResource MyNet.Font.Weight.Header}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:DataGridAssist.ColumnHeaderPadding" Value="8 15" />
  </Style>
  <Style x:Key="MyNet.Styles.DataGridRowHeader" TargetType="{x:Type DataGridRowHeader}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
    <Setter Property="BorderThickness" Value="{Binding GridLinesVisibility, RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={x:Static c:GridLinesVisibilityBorderToThicknessConverter.Default}}" />
    <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="Opacity" Value="{DynamicResource MyNet.Opacity.Medium}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
          <Grid MinWidth="30">
            <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <Grid>
                <Control SnapsToDevicePixels="false" Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Visibility="{Binding (Validation.HasError), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" />
                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </Grid>
            </Border>
            <Thumb x:Name="PART_TopHeaderGripper" Style="{StaticResource MyNet.Styles.Thumb.Embedded.GridRowHeader}" VerticalAlignment="Top" />
            <Thumb x:Name="PART_BottomHeaderGripper" Style="{StaticResource MyNet.Styles.Thumb.Embedded.GridRowHeader}" VerticalAlignment="Bottom" />
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="True">
              <Setter Property="Opacity" Value="{DynamicResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="True">
              <Setter Property="Opacity" Value="1" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.DataGridRow" TargetType="{x:Type DataGridRow}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridRow}">
          <Border x:Name="DGR_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" SnapsToDevicePixels="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                    <VisualTransition.GeneratedEasingFunction>
                      <CircleEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Normal" />
                <VisualState x:Name="NormalAlternatingRow">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="AlternateBackground" Storyboard.TargetProperty="Opacity" From="0" To="0.03" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Disabled" />
                <VisualState x:Name="Normal_AlternatingRow">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="AlternateBackground" Storyboard.TargetProperty="Opacity" From="0" To="0.03" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="*" To="Selected">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="*" To="SelectedUnfocused">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Selected" To="Unselected">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unselected" />
                <VisualState Name="SelectedUnfocused">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Border x:Name="AlternateBackground" Background="{TemplateBinding Foreground}" Opacity="0" />
              <Border x:Name="MouseOverBorder" Background="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" />
              <Border x:Name="SelectedBackgroundBorder" Background="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" />
              <SelectiveScrollingGrid>
                <SelectiveScrollingGrid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </SelectiveScrollingGrid.ColumnDefinitions>
                <SelectiveScrollingGrid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </SelectiveScrollingGrid.RowDefinitions>
                <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <DataGridDetailsPresenter Grid.Row="1" Grid.Column="1" SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Visibility="{TemplateBinding DetailsVisibility}" />
                <DataGridRowHeader Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
              </SelectiveScrollingGrid>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="False">
              <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="SelectedBackgroundBorder" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="ValidationErrorTemplate" Value="{Binding RowValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverForeground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
    <Setter Property="p:ListBoxItemAssist.ShowSelection" Value="{Binding Path=(p:ListBoxItemAssist.ShowSelection), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Self}}" />
      </Trigger>
      <Trigger Property="IsNewItem" Value="True">
        <Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Embedded.Expander" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                      <EasingDoubleKeyFrame KeyTime="{StaticResource ExpandKeyTime}" Value="180" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                      <EasingDoubleKeyFrame KeyTime="{StaticResource CollapseKeyTime}" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ctrl:PackIcon x:Name="ExpandPath" Width="24" Height="24" Foreground="{TemplateBinding Foreground}" Kind="ChevronDown" Opacity="{StaticResource MyNet.Opacity.Medium}" RenderTransformOrigin="0.5 0.5">
              <ctrl:PackIcon.RenderTransform>
                <RotateTransform x:Name="ExpandPathRotateTransform" />
              </ctrl:PackIcon.RenderTransform>
            </ctrl:PackIcon>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Embedded.Expander.Header.Horizontal" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <ctrl:Card Padding="{Binding Path=(p:ExpanderAssist.HorizontalHeaderPadding), RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" p:ElevationAssist.Elevation="{Binding Path=(p:ElevationAssist.Elevation), RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" UniformCornerRadius="{Binding Path=(p:ThemeAssist.UniformCornerRadius), RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="16" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter Grid.Column="0" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
              <ToggleButton x:Name="ExpanderButton" Grid.Column="2" VerticalAlignment="Center" Focusable="False" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5 0.5">
                <ToggleButton.Style>
                  <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Up">
                        <Setter Property="RenderTransform">
                          <Setter.Value>
                            <RotateTransform Angle="180" />
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </ToggleButton.Style>
              </ToggleButton>
            </Grid>
          </ctrl:Card>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Embedded.Expander.Header.Vertical" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Padding="{Binding Path=(p:ExpanderAssist.VerticalHeaderPadding), RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Background="{TemplateBinding Background}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="16" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <ToggleButton x:Name="ExpanderButton" Grid.Row="0" VerticalAlignment="Center" Focusable="False" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5 0.5">
                <ToggleButton.Style>
                  <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Left">
                        <Setter Property="RenderTransform">
                          <Setter.Value>
                            <RotateTransform Angle="90" />
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>
                      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Right">
                        <Setter Property="RenderTransform">
                          <Setter.Value>
                            <RotateTransform Angle="-90" />
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </ToggleButton.Style>
              </ToggleButton>
              <ContentPresenter Grid.Row="2" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Expander" TargetType="{x:Type Expander}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ExpansionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition To="Expanded">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="ContentPanel" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="{DynamicResource ExpandDuration}" />
                      <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" Storyboard.TargetProperty="(ScaleTransform.ScaleY)" From="0" To="1" Duration="{DynamicResource ExpandDuration}">
                        <DoubleAnimation.EasingFunction>
                          <CubicEase EasingMode="EaseInOut" />
                        </DoubleAnimation.EasingFunction>
                      </DoubleAnimation>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility" Duration="0:0:0">
                        <DiscreteObjectKeyFrame KeyTime="0%" Value="{x:Static Visibility.Visible}" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition To="Collapsed">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="ContentPanel" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="{DynamicResource CollapseDuration}" />
                      <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" Storyboard.TargetProperty="(ScaleTransform.ScaleY)" From="1" To="0" Duration="{DynamicResource CollapseDuration}">
                        <DoubleAnimation.EasingFunction>
                          <CubicEase EasingMode="EaseInOut" />
                        </DoubleAnimation.EasingFunction>
                      </DoubleAnimation>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility" Duration="{DynamicResource CollapseDuration}">
                        <DiscreteObjectKeyFrame KeyTime="100%" Value="{x:Static Visibility.Collapsed}" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Expanded">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentPanel" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" Storyboard.TargetProperty="(ScaleTransform.ScaleY)" To="1" Duration="0" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility" Duration="0">
                      <DiscreteObjectKeyFrame KeyTime="0%" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Collapsed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentPanel" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" Storyboard.TargetProperty="(ScaleTransform.ScaleY)" To="0" Duration="0" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility" Duration="0">
                      <DiscreteObjectKeyFrame KeyTime="100%" Value="{x:Static Visibility.Collapsed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <DockPanel Background="{TemplateBinding Background}">
              <ToggleButton Name="HeaderSite" Background="{TemplateBinding p:HeaderAssist.Background}" BorderThickness="0" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Cursor="Hand" DockPanel.Dock="Top" Focusable="False" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" TextElement.FontSize="{TemplateBinding p:HeaderAssist.FontSize}" />
              <Border Name="ContentSite">
                <Border.LayoutTransform>
                  <TransformGroup>
                    <ScaleTransform x:Name="ContentSiteScaleTransform" />
                    <RotateTransform Angle="{Binding Path=ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander}, Converter={x:Static c:ExpanderRotateAngleConverter.Default}}" />
                  </TransformGroup>
                </Border.LayoutTransform>
                <Grid Name="ContentPanel" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                  <Grid.LayoutTransform>
                    <RotateTransform Angle="{Binding Path=ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander}, Converter={x:Static c:ExpanderRotateAngleConverter.Default}, ConverterParameter=-1}" />
                  </Grid.LayoutTransform>
                  <ContentPresenter Name="PART_Content" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Focusable="False" Visibility="Collapsed" />
                </Grid>
              </Border>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Header.Vertical}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Header.Vertical}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Header.Horizontal}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Down">
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Header.Horizontal}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    <Setter Property="p:ExpanderAssist.HorizontalHeaderPadding" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="p:ExpanderAssist.VerticalHeaderPadding" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="p:HeaderAssist.Background" Value="Transparent" />
    <Setter Property="p:HeaderAssist.FontSize" Value="{StaticResource MyNet.Font.Size.Caption}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Expander.Bordered" TargetType="{x:Type Expander}" BasedOn="{StaticResource MyNet.Styles.Expander}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <ContentControl Margin="{StaticResource MyNet.Margins.Default.Bottom}" Content="{Binding}" />
            <Border Height="1" Margin="0 0 -40 0" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Background="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type Expander}}}" />
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="IsExpanded" Value="True" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="p:ExpanderAssist.HorizontalHeaderPadding" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.Expander.Bordered.Foreground" TargetType="{x:Type Expander}" BasedOn="{StaticResource MyNet.Styles.Expander.Bordered}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
  </Style>
  <Style x:Key="MyNet.Styles.FocusVisualStyle.Rectangle">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="0" RadiusX="4" RadiusY="4" SnapsToDevicePixels="True" Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}" StrokeDashArray="1 2" StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.FocusVisualStyle.Rectangle.Margin">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="2" RadiusX="4" RadiusY="4" SnapsToDevicePixels="True" Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}" StrokeDashArray="1 2" StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.FocusVisualStyle.Rounded">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Ellipse Margin="0" SnapsToDevicePixels="True" Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}" StrokeDashArray="1 2" StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.FocusVisualStyle.Rounded.Margin">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Ellipse Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}" StrokeDashArray="1 2" StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.GridSplitter.Preview">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Fill="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.GridSplitter" TargetType="{x:Type GridSplitter}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Border}" />
    <Setter Property="PreviewStyle" Value="{StaticResource MyNet.Styles.GridSplitter.Preview}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GridSplitter}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="MouseEnter">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="0" Value="{StaticResource MyNet.Opacity.Border}" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="MouseExit">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="0" Value="{StaticResource MyNet.Opacity.Border}" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="{StaticResource MyNet.Opacity.Border}" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard x:Name="MouseExit_BeginStoryboard" Storyboard="{StaticResource MouseExit}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard x:Name="MouseEnter_BeginStoryboard" Storyboard="{StaticResource MouseEnter}" />
              </Trigger.EnterActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.ItemsControl.Scrollable" TargetType="{x:Type ItemsControl}" BasedOn="{StaticResource MyNet.Styles.ItemsControl}">
    <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ItemsControl}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ctrl:DynamicScrollViewer CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Focusable="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </ctrl:DynamicScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Key="MyNet.DataTemplates.Icon.Label">
    <DataTemplate.Resources>
      <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
      </Style>
      <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
      </Style>
    </DataTemplate.Resources>
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Name="Row1" Height="Auto" />
        <RowDefinition Name="Row2" Height="Auto" />
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Name="Col1" Width="Auto" />
        <ColumnDefinition Name="Col2" Width="*" />
      </Grid.ColumnDefinitions>
      <ContentControl Name="Icon" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource AncestorType={x:Type Label}}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type Label}}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource AncestorType={x:Type Label}}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type Label}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
      <ContentControl Name="Content" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{Binding}" />
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type Label}}}" Value="{x:Static ctrl:Alignment.Left}">
        <Setter TargetName="Content" Property="Grid.Column" Value="1" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type Label}}}" Value="{x:Static ctrl:Alignment.Top}">
        <Setter TargetName="Col1" Property="Width" Value="*" />
        <Setter TargetName="Col2" Property="Width" Value="Auto" />
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="1" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
        <Setter TargetName="Row1" Property="Height" Value="Auto" />
        <Setter TargetName="Row2" Property="Height" Value="*" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type Label}}}" Value="{x:Static ctrl:Alignment.Right}">
        <Setter TargetName="Col1" Property="Width" Value="*" />
        <Setter TargetName="Col2" Property="Width" Value="Auto" />
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="1" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
        <Setter TargetName="Row1" Property="Height" Value="*" />
        <Setter TargetName="Row2" Property="Height" Value="Auto" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type Label}}}" Value="{x:Static ctrl:Alignment.Bottom}">
        <Setter TargetName="Col1" Property="Width" Value="*" />
        <Setter TargetName="Col2" Property="Width" Value="Auto" />
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="1" />
        <Setter TargetName="Row1" Property="Height" Value="*" />
        <Setter TargetName="Row2" Property="Height" Value="Auto" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <Style x:Key="MyNet.Styles.Label.Elevation.Application.Light" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Application.light}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <DataTemplate x:Key="MyNet.DataTemplates.Icon.ListBoxItem">
    <DataTemplate.Resources>
      <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
      </Style>
      <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
      </Style>
    </DataTemplate.Resources>
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <ContentControl x:Name="Icon" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Opacity="{Binding Path=(p:IconAssist.Opacity), FallbackValue=0.0, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Visibility="{Binding Path=(p:IconAssist.Icon), FallbackValue=Collapsed, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
      <ContentControl x:Name="Content" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding}" />
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="{x:Static ctrl:Alignment.Left}">
        <Setter TargetName="Content" Property="Grid.Column" Value="1" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="{x:Static ctrl:Alignment.Top}">
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="1" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="{x:Static ctrl:Alignment.Right}">
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="1" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="{x:Static ctrl:Alignment.Bottom}">
        <Setter TargetName="Content" Property="Grid.Column" Value="0" />
        <Setter TargetName="Content" Property="Grid.Row" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Column" Value="0" />
        <Setter TargetName="Icon" Property="Grid.Row" Value="1" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <Style x:Key="MyNet.Styles.ListBoxItem" TargetType="{x:Type ListBoxItem}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Icon.ListBoxItem}" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Padding" Value="16 8" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border x:Name="BackBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                    <VisualTransition.GeneratedEasingFunction>
                      <CircleEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Normal" />
                <VisualState Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unselected" />
              </VisualStateGroup>
              <VisualStateGroup Name="FocusStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Unfocused" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Focused">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Border x:Name="MouseOverBorder" Background="{TemplateBinding p:ListBoxItemAssist.IsMouseOverBackground}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" SnapsToDevicePixels="True" />
              <Border x:Name="SelectedBorder" Background="{TemplateBinding p:ListBoxItemAssist.IsSelectedBackground}" BorderBrush="{TemplateBinding p:ListBoxItemAssist.IsSelectedBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" RenderTransformOrigin="0.5,0.5" />
              <ctrl:Ripple x:Name="Ripple" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Feedback="{TemplateBinding Foreground}" Focusable="False" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(p:ComboBoxAssist.ShowSelectedItem), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Height" Value="0" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="False">
              <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="Ripple" Property="Feedback" Value="Transparent" />
              <Setter TargetName="SelectedBorder" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ListBoxItemAssist.ShowSelection" Value="{Binding Path=(p:ListBoxItemAssist.ShowSelection), RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}" />
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ListBoxItem.Toggle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
    <Setter Property="Padding" Value="6 4" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBoxItem.Icon" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}">
            <Grid>
              <ctrl:Ripple x:Name="Ripple" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Feedback="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" Opacity="{StaticResource MyNet.Opacity.Secondary}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="Ripple" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Ripple" Property="Opacity" Value="1" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding Path=(p:ListBoxAssist.IsToggle), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Value="False" />
                <Condition Binding="{Binding SelectionMode, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" Value="Single" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Ripple" Property="Opacity" Value="1" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:RippleAssist.ClipToBounds" Value="False" />
    <Setter Property="p:RippleAssist.IsCentered" Value="True" />
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ListBoxItem.Card" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Small}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <ctrl:Card x:Name="Card" Padding="0" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Foreground="{TemplateBinding Foreground}" UniformCornerRadius="{TemplateBinding p:ThemeAssist.UniformCornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                    <VisualTransition.GeneratedEasingFunction>
                      <CircleEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Normal" />
                <VisualState Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unselected" />
              </VisualStateGroup>
              <VisualStateGroup Name="FocusStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Unfocused" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Focused">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Border x:Name="MouseOverBorder" Background="{TemplateBinding p:ListBoxItemAssist.IsMouseOverBackground}" Opacity="0" SnapsToDevicePixels="True" />
              <Border x:Name="SelectedBorder" Background="{TemplateBinding p:ListBoxItemAssist.IsSelectedBackground}" BorderBrush="{TemplateBinding p:ListBoxItemAssist.IsSelectedBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" RenderTransformOrigin="0.5,0.5" />
              <ctrl:Ripple x:Name="Ripple" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Feedback="{TemplateBinding Foreground}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </ctrl:Card>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(p:ComboBoxAssist.ShowSelectedItem), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Height" Value="0" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="False">
              <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="Ripple" Property="Feedback" Value="Transparent" />
              <Setter TargetName="SelectedBorder" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Control}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Control}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBoxItem.Chip" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Margin="2" RadiusX="16" RadiusY="16" SnapsToDevicePixels="True" Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}" StrokeDashArray="1 2" StrokeThickness="1" />
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Height" Value="32" />
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Small}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Grid ClipToBounds="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                    <VisualTransition.GeneratedEasingFunction>
                      <CircleEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Normal" />
                <VisualState Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition To="Selected">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                      <ThicknessAnimation Storyboard.TargetName="IconControl" Storyboard.TargetProperty="Margin" To="4,0,4,0" Duration="0:0:0.2" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition To="Unselected">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
                      <ThicknessAnimation Storyboard.TargetName="IconControl" Storyboard.TargetProperty="Margin" To="-16,0,10,0" Duration="0:0:0.2" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="IconControl" Storyboard.TargetProperty="Margin" To="4,0,4,0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unselected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="IconControl" Storyboard.TargetProperty="Margin" To="-16,0,10,0" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <Border x:Name="SelectedBackgroundBorder" Grid.Column="0" Grid.ColumnSpan="2" Background="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{Binding Path=(p:ListBoxItemAssist.IsSelectedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <Border x:Name="MouseOverBorder" Grid.Column="0" Grid.ColumnSpan="2" Background="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" />
            <ctrl:PackIcon x:Name="IconControl" Grid.Column="0" Width="16" Height="16" Margin="-16 0 0 0" VerticalAlignment="Center" IsTabStop="False" Kind="Check" Visibility="{Binding Path=(p:CheckBoxAssist.ShowCheck), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <ContentControl x:Name="Content" Grid.Column="1" Margin="0 0 10 0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentTemplateSelector}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" IsTabStop="False" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <Trigger Property="p:CheckBoxAssist.ShowCheck" Value="False">
              <Setter TargetName="Content" Property="Margin" Value="10 0 10 0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:CheckBoxAssist.ShowCheck" Value="{Binding Path=(p:CheckBoxAssist.ShowCheck), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="16" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBoxItem.Navigation" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush">
      <Setter.Value>
        <SolidColorBrush Opacity="0.0" Color="{DynamicResource MyNet.Colors.Control.Border}" />
      </Setter.Value>
    </Setter>
    <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Secondary}" />
    <Setter Property="Height" Value="60" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
    <Setter Property="Margin" Value="0 4 0 2" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <ControlTemplate.Resources>
            <Style TargetType="{x:Type ctrl:PackIcon}">
              <Setter Property="FrameworkElement.Height" Value="24" />
              <Setter Property="FrameworkElement.Width" Value="24" />
            </Style>
            <Style TargetType="{x:Type ctrl:GeometryIcon}">
              <Setter Property="FrameworkElement.Height" Value="24" />
              <Setter Property="FrameworkElement.Width" Value="24" />
            </Style>
          </ControlTemplate.Resources>
          <Border x:Name="MainBorder" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="{StaticResource MyNet.CornerRadius.Container}">
            <Grid>
              <Rectangle x:Name="ActiveRectangle" Width="4" Height="24" HorizontalAlignment="Left" VerticalAlignment="Center" Fill="{Binding Path=(p:ListBoxItemAssist.IsSelectedBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" Opacity="0.0" RadiusX="2" RadiusY="2" />
              <ctrl:Ripple Padding="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Feedback="{TemplateBinding p:HeaderAssist.Foreground}" Focusable="False" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <ctrl:Ripple.Clip>
                  <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                    <Binding ElementName="MainBorder" Path="ActualWidth" />
                    <Binding ElementName="MainBorder" Path="ActualHeight" />
                    <Binding ElementName="MainBorder" Path="CornerRadius" />
                    <Binding ElementName="MainBorder" Path="BorderThickness" />
                  </MultiBinding>
                </ctrl:Ripple.Clip>
                <Grid HorizontalAlignment="Stretch">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <ContentControl x:Name="Icon" Grid.Row="0" Margin="0" VerticalAlignment="Center" Content="{TemplateBinding p:IconAssist.Icon}" Foreground="{TemplateBinding p:HeaderAssist.Foreground}" />
                  <Grid x:Name="ContentGrid" Grid.Row="1" Height="15" Margin="0 2 0 0">
                    <ContentPresenter x:Name="ElementContentPresenter" HorizontalAlignment="Center" Content="{TemplateBinding Content}" TextElement.FontSize="{TemplateBinding FontSize}" TextElement.Foreground="{TemplateBinding p:HeaderAssist.Foreground}" />
                  </Grid>
                </Grid>
              </ctrl:Ripple>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="ActiveRectangle" Property="Opacity" Value="1.0" />
              <Setter TargetName="ElementContentPresenter" Property="Margin" Value="0" />
              <Setter TargetName="Icon" Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Setter TargetName="MainBorder" Property="Background" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Height" From="15" To="0" Duration="0:0:.16" />
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:.16" />
                    <DoubleAnimation Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Opacity)" From="0" To="0.3" Duration="0:0:.16" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Height" From="0" To="15" Duration="0:0:.16" />
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:.16" />
                    <DoubleAnimation Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Opacity)" From="0.3" To="0" Duration="0:0:.16" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="p:IconAssist.Icon" Value="{x:Null}">
              <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="MainBorder" Property="Background" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsSelected" Value="False" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="Icon" Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="ElementContentPresenter" Property="TextElement.Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Bottom">
              <Setter TargetName="ActiveRectangle" Property="Height" Value="4" />
              <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Center" />
              <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Bottom" />
              <Setter TargetName="ActiveRectangle" Property="Width" Value="24" />
            </Trigger>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Top">
              <Setter TargetName="ActiveRectangle" Property="Height" Value="4" />
              <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Center" />
              <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Top" />
              <Setter TargetName="ActiveRectangle" Property="Width" Value="24" />
            </Trigger>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Right">
              <Setter TargetName="ActiveRectangle" Property="Height" Value="24" />
              <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Right" />
              <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Center" />
              <Setter TargetName="ActiveRectangle" Property="Width" Value="4" />
            </Trigger>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Left">
              <Setter TargetName="ActiveRectangle" Property="Height" Value="24" />
              <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Left" />
              <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Center" />
              <Setter TargetName="ActiveRectangle" Property="Width" Value="4" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Width" Value="60" />
    <Setter Property="p:HeaderAssist.Alignment" Value="Right" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{me:BrushBinding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.Thumb.Embedded.GridViewColumnHeader" TargetType="{x:Type Thumb}" BasedOn="{StaticResource MyNet.Styles.Thumb}">
    <Setter Property="Cursor" Value="SizeWE" />
    <Setter Property="Width" Value="8" />
  </Style>
  <Style x:Key="MyNet.Styles.GridViewColumnHeader" TargetType="{x:Type GridViewColumnHeader}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=(p:ListViewAssist.HeaderHeight)}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="1 0" />
    <Setter Property="Opacity" Value="{DynamicResource MyNet.Opacity.Secondary}" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(p:DataGridAssist.ColumnHeaderPadding)}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="GoToVisible">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="12" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="GoToHidden">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="12" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <DockPanel>
            <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource MyNet.Styles.Thumb.Embedded.GridViewColumnHeader}" Margin="0 0 -8 0" DockPanel.Dock="Right" Visibility="{Binding Path=(p:ListViewAssist.AutoResizeIsEnabled), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
            <Border x:Name="HeaderBorder" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ctrl:ListSortDirectionIndicator x:Name="SortDirectionIndicator" Grid.Column="0" Width="0" Height="12" Margin="{StaticResource MyNet.Margins.Small.Right}" Focusable="False" IsTabStop="False" ListSortDirection="{Binding Path=(p:GridViewColumnHeaderAssist.SortDirection), FallbackValue={x:Null}, RelativeSource={RelativeSource TemplatedParent}}" />
                <ContentPresenter x:Name="HeaderContent" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </Grid>
            </Border>
          </DockPanel>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="p:GridViewColumnHeaderAssist.CanSort" Value="True" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter Property="Opacity" Value="1" />
                <Setter Property="Cursor" Value="Hand" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="p:GridViewColumnHeaderAssist.CanSort" Value="False">
              <Setter Property="Cursor" Value="{x:Null}" />
              <Setter Property="Opacity" Value="1" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(p:ListViewAssist.CanSort), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" Value="False">
              <Setter Property="Cursor" Value="{x:Null}" />
              <Setter Property="Opacity" Value="1" />
            </DataTrigger>
            <Trigger SourceName="SortDirectionIndicator" Property="IsNeutral" Value="False">
              <Trigger.EnterActions>
                <BeginStoryboard Name="GoToVisible" Storyboard="{StaticResource GoToVisible}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <RemoveStoryboard BeginStoryboardName="GoToVisible" />
                <BeginStoryboard Storyboard="{StaticResource GoToHidden}" />
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TextBlock.FontWeight" Value="{StaticResource MyNet.Font.Weight.Header}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:DataGridAssist.ColumnHeaderPadding" Value="8" />
    <Setter Property="p:GridViewColumnHeaderAssist.SortDirection" Value="{x:Null}" />
    <Style.Triggers>
      <Trigger Property="Role" Value="Floating">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
              <DockPanel Name="PART_FloatingHeaderCanvas">
                <Border BorderBrush="{DynamicResource MyNet.Brushes.Primary}" BorderThickness="1" />
              </DockPanel>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Role" Value="Padding">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
              <Canvas Name="PART_FloatingHeaderCanvas" />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.PasswordBox" TargetType="{x:Type PasswordBox}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <!-- Mouse Over -->
            <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Focus -->
            <Border x:Name="focus" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Ripple on focus -->
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Icon -->
              <ContentControl x:Name="Icon" Grid.Column="0" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <ContentControl.Resources>
                  <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                  <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                </ContentControl.Resources>
              </ContentControl>
              <Grid Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <!-- Content -->
                <Grid x:Name="grid" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Host Text -->
                    <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1" VerticalAlignment="Center" Panel.ZIndex="1" p:ScrollViewerAssist.IgnorePadding="True" Focusable="false" HorizontalScrollBarVisibility="Hidden" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalScrollBarVisibility="Hidden" />
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
              <!-- Clear button -->
              <Button x:Name="PART_ClearButton" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="2" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{x:Static p:TextFieldAssist.ClearCommand}" Content="{me:Icon Kind=Close,                                                       Size=16}" ToolTip="{me:Resource Clear}">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
            </Grid>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="CharacterCounterContainer" Grid.Column="1">
            <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding Path=(p:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </Grid>
      </Canvas>
    </Grid>
    <ControlTemplate.Triggers>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="3" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_ClearButton" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- IsKeyboardFocused -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.ProgressBar.Linear" TargetType="{x:Type ProgressBar}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="Height" Value="15" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="OnLoaded">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TemplateRoot" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TemplateRoot" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TemplateRoot" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="OnLoadedNoAnimation">
              <DoubleAnimation Storyboard.TargetName="TemplateRoot" Storyboard.TargetProperty="(UIElement.Opacity)" To="1" Duration="0" />
              <DoubleAnimation Storyboard.TargetName="TemplateRoot" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" To="1" Duration="0" />
              <DoubleAnimation Storyboard.TargetName="TemplateRoot" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" To="1" Duration="0" />
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid x:Name="TemplateRoot" Opacity="0" RenderTransformOrigin="0,0.5">
            <Grid.RenderTransform>
              <TransformGroup>
                <ScaleTransform ScaleX="0" ScaleY="0" />
                <SkewTransform />
                <RotateTransform />
                <TranslateTransform />
              </TransformGroup>
            </Grid.RenderTransform>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Determinate" />
                <VisualState x:Name="Indeterminate">
                  <Storyboard RepeatBehavior="Forever">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                      <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                      <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                    </DoubleAnimationUsingKeyFrames>
                    <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                      <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                      <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                      <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                    </PointAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding p:ThemeAssist.CornerRadius}" />
            <Rectangle x:Name="PART_Track" />
            <ContentControl x:Name="Value" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentStringFormat="{Binding Path=(p:ProgressBarAssist.ContentStringFormat), RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{Binding Path=(p:ProgressBarAssist.ContentTemplate), RelativeSource={RelativeSource TemplatedParent}}" FontSize="{TemplateBinding FontSize}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" Visibility="Collapsed">
              <ContentControl.Content>
                <MultiBinding Converter="{x:Static c:MathConverter.Divide}">
                  <Binding Path="Value" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                  <Binding Path="Maximum" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                </MultiBinding>
              </ContentControl.Content>
            </ContentControl>
            <Grid x:Name="PART_Indicator" HorizontalAlignment="Left" ClipToBounds="true">
              <Border x:Name="Animation" Background="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}" RenderTransformOrigin="0.5,0.5">
                <Border.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform />
                    <SkewTransform />
                    <RotateTransform />
                    <TranslateTransform />
                  </TransformGroup>
                </Border.RenderTransform>
              </Border>
              <Border x:Name="Indicator" Background="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding p:ThemeAssist.CornerRadius}">
                <Border Width="{Binding ActualWidth, ElementName=TemplateRoot}">
                  <ContentControl x:Name="Value2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentStringFormat="{Binding Path=(p:ProgressBarAssist.ContentStringFormat), RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{Binding Path=(p:ProgressBarAssist.ContentTemplate), RelativeSource={RelativeSource TemplatedParent}}" FontSize="{TemplateBinding FontSize}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" Visibility="Collapsed">
                    <ContentControl.Content>
                      <MultiBinding Converter="{x:Static c:MathConverter.Divide}">
                        <Binding Path="Value" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                        <Binding Path="Maximum" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                      </MultiBinding>
                    </ContentControl.Content>
                  </ContentControl>
                </Border>
              </Border>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="p:TransitionAssist.DisableTransitions" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard Name="BeginStoryboardOnLoadedNoAnimation" Storyboard="{StaticResource OnLoadedNoAnimation}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <RemoveStoryboard BeginStoryboardName="BeginStoryboardOnLoadedNoAnimation" />
              </Trigger.ExitActions>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsVisible" Value="True" />
                <Condition Property="p:TransitionAssist.DisableTransitions" Value="False" />
              </MultiTrigger.Conditions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Name="BeginStoryboardOnLoaded" Storyboard="{StaticResource OnLoaded}" />
              </MultiTrigger.EnterActions>
              <MultiTrigger.ExitActions>
                <RemoveStoryboard BeginStoryboardName="BeginStoryboardOnLoaded" />
              </MultiTrigger.ExitActions>
            </MultiTrigger>
            <Trigger Property="Orientation" Value="Vertical">
              <Setter Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsIndeterminate" Value="true">
              <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsIndeterminate" Value="False" />
                <Condition Property="p:ProgressBarAssist.ShowValue" Value="True" />
                <Condition Property="IsVisible" Value="True" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="Value" Property="Visibility" Value="Visible" />
                <Setter TargetName="Value2" Property="Visibility" Value="Visible" />
              </MultiTrigger.Setters>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:ProgressBarAssist.ContentStringFormat" Value="P0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ProgressBar.Linear.Accent" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource MyNet.Styles.ProgressBar.Linear}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ProgressBar.Linear.Foreground" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource MyNet.Styles.ProgressBar.Linear}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ProgressBar.Circular" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource MyNet.Styles.ProgressBar.Linear}">
    <Setter Property="Height" Value="80" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="IsIndeterminateStoryboard" RepeatBehavior="Forever" TargetProperty="Angle" TargetName="RotateTransform">
              <DoubleAnimation From="0" To="359" Duration="0:0:2" />
            </Storyboard>
            <Storyboard x:Key="IsFullyIndeterminateStoryboard">
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="FullyIndeterminateGridScaleTransform" Storyboard.TargetProperty="ScaleX">
                <SplineDoubleKeyFrame KeyTime="0" Value="0.0" />
                <SplineDoubleKeyFrame KeyTime="0:0:1" Value="1.0" />
                <SplineDoubleKeyFrame KeyTime="0:0:4" Value="0.0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimation RepeatBehavior="Forever" Storyboard.TargetName="RotateTransform" Storyboard.TargetProperty="Angle" From="00" To="359" Duration="0:0:1.25" />
            </Storyboard>
            <Storyboard x:Key="IsFullyIndeterminateScaleStoryboard2">
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="FullyIndeterminateGridScaleTransform2" Storyboard.TargetProperty="ScaleX">
                <SplineDoubleKeyFrame KeyTime="0" Value="0.0" />
                <SplineDoubleKeyFrame KeyTime="0:0:1" Value="1.0" />
                <SplineDoubleKeyFrame KeyTime="0:0:4" Value="0.0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimation RepeatBehavior="Forever" Storyboard.TargetName="RotateTransform2" Storyboard.TargetProperty="Angle" From="00" To="-359" Duration="0:0:1.5" />
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid>
            <Canvas>
              <Path Canvas.Left="2" Canvas.Top="2" RenderTransformOrigin="0, 0" Stroke="{TemplateBinding Background}" StrokeThickness="{Binding Path=(p:ProgressBarAssist.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}">
                <Path.Data>
                  <PathGeometry>
                    <PathFigure StartPoint="{Binding ElementName=PathGrid, Path=ActualWidth, FallbackValue={StaticResource FallBackValuePoint}, Converter={x:Static c:ProgressBarStartPointConverter.Default}, Mode=OneWay}">
                      <ArcSegment Size="{Binding ElementName=PathGrid, Path=ActualWidth, FallbackValue={StaticResource FallBackValueSize}, Converter={x:Static c:ProgressBarArcSizeConverter.Default}, Mode=OneWay}" SweepDirection="Clockwise">
                        <ArcSegment.Point>
                          <MultiBinding Converter="{x:Static c:ProgressBarArcEndPointConverter.Default}" ConverterParameter="{x:Static c:ProgressBarArcEndPointConverter.ParameterMidPoint}">
                            <Binding ElementName="PathGrid" FallbackValue="{StaticResource FallBackValueZero}" Path="ActualWidth" />
                            <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}" />
                          </MultiBinding>
                        </ArcSegment.Point>
                      </ArcSegment>
                      <ArcSegment Size="{Binding ElementName=PathGrid, Path=ActualWidth, FallbackValue={StaticResource FallBackValueSize}, Converter={x:Static c:ProgressBarArcSizeConverter.Default}, Mode=OneWay}" SweepDirection="Clockwise">
                        <ArcSegment.Point>
                          <MultiBinding Converter="{x:Static c:ProgressBarArcEndPointConverter.Default}">
                            <Binding ElementName="PathGrid" FallbackValue="{StaticResource FallBackValueZero}" Path="ActualWidth" />
                            <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}" />
                          </MultiBinding>
                        </ArcSegment.Point>
                      </ArcSegment>
                    </PathFigure>
                  </PathGeometry>
                </Path.Data>
              </Path>
            </Canvas>
            <Grid x:Name="TemplateRoot" ClipToBounds="False">
              <Grid x:Name="FullyIndeterminateGrid">
                <Grid.RenderTransform>
                  <ScaleTransform x:Name="FullyIndeterminateGridScaleTransform" ScaleX="0" />
                </Grid.RenderTransform>
              </Grid>
              <Grid x:Name="FullyIndeterminateGrid2">
                <Grid.RenderTransform>
                  <ScaleTransform x:Name="FullyIndeterminateGridScaleTransform2" ScaleX="0" />
                </Grid.RenderTransform>
              </Grid>
              <Grid x:Name="PathGrid" Margin="2" />
              <Grid x:Name="PathGrid2" Margin="{Binding Path=(p:ProgressBarAssist.InnerPadding), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleThicknessToConverter.All}}" />
              <Canvas>
                <Path x:Name="Path" Canvas.Left="2" Canvas.Top="2" RenderTransformOrigin="0, 0" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{Binding Path=(p:ProgressBarAssist.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}">
                  <Path.Data>
                    <PathGeometry>
                      <PathFigure StartPoint="{Binding ElementName=PathGrid, Path=ActualWidth, FallbackValue={StaticResource FallBackValuePoint}, Converter={x:Static c:ProgressBarStartPointConverter.Default}, Mode=OneWay}">
                        <ArcSegment Size="{Binding ElementName=PathGrid, Path=ActualWidth, FallbackValue={StaticResource FallBackValueSize}, Converter={x:Static c:ProgressBarArcSizeConverter.Default}, Mode=OneWay}" SweepDirection="Clockwise">
                          <ArcSegment.Point>
                            <MultiBinding Converter="{x:Static c:ProgressBarArcEndPointConverter.Default}" ConverterParameter="{x:Static c:ProgressBarArcEndPointConverter.ParameterMidPoint}">
                              <Binding ElementName="PathGrid" FallbackValue="{StaticResource FallBackValueZero}" Path="ActualWidth" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding ElementName="FullyIndeterminateGridScaleTransform" FallbackValue="{StaticResource FallBackValueZero}" Path="ScaleX" />
                            </MultiBinding>
                          </ArcSegment.Point>
                        </ArcSegment>
                        <ArcSegment Size="{Binding ElementName=PathGrid, Path=ActualWidth, FallbackValue={StaticResource FallBackValueSize}, Converter={x:Static c:ProgressBarArcSizeConverter.Default}, Mode=OneWay}" SweepDirection="Clockwise">
                          <ArcSegment.Point>
                            <MultiBinding Converter="{x:Static c:ProgressBarArcEndPointConverter.Default}">
                              <Binding ElementName="PathGrid" FallbackValue="{StaticResource FallBackValueZero}" Path="ActualWidth" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding ElementName="FullyIndeterminateGridScaleTransform" FallbackValue="{StaticResource FallBackValueZero}" Path="ScaleX" />
                            </MultiBinding>
                          </ArcSegment.Point>
                        </ArcSegment>
                      </PathFigure>
                    </PathGeometry>
                  </Path.Data>
                  <Path.RenderTransform>
                    <TransformGroup>
                      <RotateTransform x:Name="RotateTransform" CenterX="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={x:Static c:ProgressBarRotateTransformCentreConverter.Default}, Mode=OneWay}" CenterY="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={x:Static c:ProgressBarRotateTransformCentreConverter.Default}, Mode=OneWay}" />
                    </TransformGroup>
                  </Path.RenderTransform>
                </Path>
              </Canvas>
              <Canvas>
                <Path x:Name="Path2" Canvas.Left="{Binding Path=(p:ProgressBarAssist.InnerPadding), RelativeSource={RelativeSource TemplatedParent}}" Canvas.Top="{Binding Path=(p:ProgressBarAssist.InnerPadding), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0, 0" Stroke="{Binding Path=(p:ProgressBarAssist.Stroke), RelativeSource={RelativeSource TemplatedParent}}" StrokeThickness="{Binding Path=(p:ProgressBarAssist.StrokeThickness), RelativeSource={RelativeSource TemplatedParent}}">
                  <Path.Data>
                    <PathGeometry>
                      <PathFigure StartPoint="{Binding ElementName=PathGrid2, Path=ActualWidth, FallbackValue={StaticResource FallBackValuePoint}, Converter={x:Static c:ProgressBarStartPointConverter.Default}, Mode=OneWay}">
                        <ArcSegment Size="{Binding ElementName=PathGrid2, Path=ActualWidth, FallbackValue={StaticResource FallBackValueSize}, Converter={x:Static c:ProgressBarArcSizeConverter.Default}, Mode=OneWay}" SweepDirection="Counterclockwise">
                          <ArcSegment.Point>
                            <MultiBinding Converter="{x:Static c:ProgressBarArcEndPointConverter.Inverse}" ConverterParameter="{x:Static c:ProgressBarArcEndPointConverter.ParameterMidPoint}">
                              <Binding ElementName="PathGrid2" FallbackValue="{StaticResource FallBackValueZero}" Path="ActualWidth" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding ElementName="FullyIndeterminateGridScaleTransform2" FallbackValue="{StaticResource FallBackValueZero}" Path="ScaleX" />
                            </MultiBinding>
                          </ArcSegment.Point>
                        </ArcSegment>
                        <ArcSegment Size="{Binding ElementName=PathGrid2, Path=ActualWidth, FallbackValue={StaticResource FallBackValueSize}, Converter={x:Static c:ProgressBarArcSizeConverter.Default}, Mode=OneWay}" SweepDirection="Counterclockwise">
                          <ArcSegment.Point>
                            <MultiBinding Converter="{x:Static c:ProgressBarArcEndPointConverter.Inverse}">
                              <Binding ElementName="PathGrid2" Path="ActualWidth" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding FallbackValue="{StaticResource FallBackValueZero}" Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding ElementName="FullyIndeterminateGridScaleTransform2" FallbackValue="{StaticResource FallBackValueZero}" Path="ScaleX" />
                            </MultiBinding>
                          </ArcSegment.Point>
                        </ArcSegment>
                      </PathFigure>
                    </PathGeometry>
                  </Path.Data>
                  <Path.RenderTransform>
                    <TransformGroup>
                      <RotateTransform x:Name="RotateTransform2" CenterX="{Binding ElementName=PathGrid2, Path=ActualWidth, Converter={x:Static c:ProgressBarRotateTransformCentreConverter.Default}, Mode=OneWay}" CenterY="{Binding ElementName=PathGrid2, Path=ActualWidth, Converter={x:Static c:ProgressBarRotateTransformCentreConverter.Default}, Mode=OneWay}" />
                    </TransformGroup>
                  </Path.RenderTransform>
                </Path>
              </Canvas>
              <ContentControl x:Name="Value" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentStringFormat="{Binding Path=(p:ProgressBarAssist.ContentStringFormat), RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{Binding Path=(p:ProgressBarAssist.ContentTemplate), RelativeSource={RelativeSource TemplatedParent}}" FontSize="{TemplateBinding FontSize}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" Visibility="Collapsed">
                <ContentControl.Content>
                  <MultiBinding Converter="{x:Static c:MathConverter.Divide}">
                    <Binding Path="Value" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                    <Binding Path="Maximum" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                  </MultiBinding>
                </ContentControl.Content>
              </ContentControl>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(p:ProgressBarAssist.ShowSecondProgress), RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding IsVisible, RelativeSource={RelativeSource Self}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.EnterActions>
                <BeginStoryboard Name="IsFullyIndeterminateScaleStoryboard2" Storyboard="{StaticResource IsFullyIndeterminateScaleStoryboard2}" />
              </MultiDataTrigger.EnterActions>
              <MultiDataTrigger.ExitActions>
                <RemoveStoryboard BeginStoryboardName="IsFullyIndeterminateScaleStoryboard2" />
              </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsIndeterminate, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding IsVisible, RelativeSource={RelativeSource Self}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.EnterActions>
                <BeginStoryboard Name="IsIndeterminateStoryboard" Storyboard="{StaticResource IsIndeterminateStoryboard}" />
              </MultiDataTrigger.EnterActions>
              <MultiDataTrigger.ExitActions>
                <RemoveStoryboard BeginStoryboardName="IsIndeterminateStoryboard" />
              </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsIndeterminate" Value="True" />
                <Condition Property="IsVisible" Value="True" />
                <Condition Property="Value" Value="0" />
              </MultiTrigger.Conditions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Name="IsFullyIndeterminateStoryboard" Storyboard="{StaticResource IsFullyIndeterminateStoryboard}" />
              </MultiTrigger.EnterActions>
              <MultiTrigger.ExitActions>
                <RemoveStoryboard BeginStoryboardName="IsFullyIndeterminateStoryboard" />
              </MultiTrigger.ExitActions>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsIndeterminate" Value="False" />
                <Condition Property="p:ProgressBarAssist.ShowValue" Value="True" />
                <Condition Property="IsVisible" Value="True" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="Value" Property="Visibility" Value="Visible" />
              </MultiTrigger.Setters>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Width" Value="80" />
    <Setter Property="p:ProgressBarAssist.BorderThickness" Value="15" />
    <Setter Property="p:ProgressBarAssist.InnerPadding" Value="15" />
    <Setter Property="p:ProgressBarAssist.Stroke" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Secondary}}" />
    <Setter Property="p:ProgressBarAssist.StrokeThickness" Value="5" />
  </Style>
  <Style x:Key="MyNet.Styles.ProgressBar.Circular.Accent" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource MyNet.Styles.ProgressBar.Circular}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ProgressBar.Circular.Foreground" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource MyNet.Styles.ProgressBar.Circular}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.RadioButton.Chip" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip}">
    <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
  </Style>
  <Style x:Key="MyNet.Styles.RadioButton.Chip.Accent" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Accent}">
    <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
  </Style>
  <Style x:Key="MyNet.Styles.RadioButton.Chip.Foreground" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Foreground}">
    <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
  </Style>
  <Style x:Key="MyNet.Styles.RadioButton.Chip.Alternate" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Alternate}">
    <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
  </Style>
  <Style x:Key="MyNet.Styles.RadioButton.Chip.Alternate.Accent" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Alternate.Accent}">
    <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
  </Style>
  <Style x:Key="MyNet.Styles.RadioButton.Chip.Alternate.Foreground" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Chip.Alternate.Foreground}">
    <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
  </Style>
  <Style x:Key="MyNet.Styles.RadioButton.Tab" TargetType="{x:Type RadioButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderThickness" Value="0 0 0 2" />
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Icon}" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="MinHeight" Value="32" />
    <Setter Property="MinWidth" Value="80" />
    <Setter Property="Padding" Value="16 4 16 4" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <ControlTemplate.Resources>
            <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
              <Setter Property="Height" Value="24" />
              <Setter Property="Width" Value="24" />
            </Style>
            <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
              <Setter Property="Height" Value="24" />
              <Setter Property="Width" Value="24" />
            </Style>
          </ControlTemplate.Resources>
          <Grid SnapsToDevicePixels="true">
            <Border Margin="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
              <ctrl:Ripple x:Name="contentPresenter" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" Opacity="{StaticResource MyNet.Opacity.Secondary}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <Border x:Name="SelectionHighlightBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Visibility="Hidden" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="SelectionHighlightBorder" Property="Visibility" Value="Visible" />
              <Setter TargetName="contentPresenter" Property="Opacity" Value="1.0" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsChecked" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="contentPresenter" Property="Opacity" Value="1.0" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Thumb.Embedded.ScrollBar" TargetType="{x:Type Thumb}" BasedOn="{StaticResource MyNet.Styles.Thumb}">
    <Setter Property="Border.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container}" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.ScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Rectangle x:Name="PART_Corner" Grid.Row="1" Grid.Column="1" Fill="{TemplateBinding Foreground}" Visibility="{Binding Path=(p:ScrollViewerAssist.CornerRectangleVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.Column="0" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
      <Separator x:Name="PART_TopSeparator" Grid.Row="0" Grid.Column="0" Margin="0" VerticalAlignment="Top" Background="{TemplateBinding Foreground}" Opacity="{StaticResource MyNet.Opacity.Overlay}" Visibility="Visible" />
      <Separator x:Name="PART_BottomSeparator" Grid.Row="0" Grid.Column="0" Margin="0" VerticalAlignment="Bottom" Background="{TemplateBinding Foreground}" Opacity="{StaticResource MyNet.Opacity.Overlay}" Visibility="Hidden" />
      <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" HorizontalAlignment="Right" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
      <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
    </Grid>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:ScrollViewerAssist.ShowSeparators" Value="True" />
          <Condition Property="ComputedVerticalScrollBarVisibility" Value="Visible" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_BottomSeparator" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="VerticalOffset" Value="0">
        <Setter TargetName="PART_TopSeparator" Property="Visibility" Value="Hidden" />
      </Trigger>
      <Trigger Property="p:ScrollViewerAssist.ShowSeparators" Value="False">
        <Setter TargetName="PART_TopSeparator" Property="Visibility" Value="Hidden" />
      </Trigger>
      <Trigger Property="p:ScrollViewerAssist.IgnorePadding" Value="False">
        <Setter TargetName="PART_ScrollContentPresenter" Property="Margin" Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="True" />
          <Condition Property="ComputedVerticalScrollBarVisibility" Value="Visible" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <MultiTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </MultiTrigger.EnterActions>
        <MultiTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </MultiTrigger.ExitActions>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="True" />
          <Condition Property="ComputedHorizontalScrollBarVisibility" Value="Visible" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <MultiTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </MultiTrigger.EnterActions>
        <MultiTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </MultiTrigger.ExitActions>
      </MultiTrigger>
      <Trigger Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="True">
        <Setter TargetName="PART_HorizontalScrollBar" Property="Grid.Row" Value="0" />
        <Setter TargetName="PART_VerticalScrollBar" Property="Grid.Column" Value="0" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.Separator" TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Height="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Separator.Horizontal" TargetType="{x:Type Separator}" BasedOn="{StaticResource MyNet.Styles.Separator}" />
  <Style x:Key="MyNet.Styles.Separator.Vertical" TargetType="{x:Type Separator}" BasedOn="{StaticResource MyNet.Styles.Separator}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Width="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.Thumb.Embedded.Slider" TargetType="{x:Type Thumb}">
    <ControlTemplate.Resources>
      <Storyboard x:Key="ShowFocusVisualStoryboard">
        <DoubleAnimation Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity" To="0.15" Duration="0" />
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
          <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
          <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HideFocusVisualStoryboard">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity">
          <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0.15" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Duration="0">
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Duration="0">
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </ControlTemplate.Resources>
    <Grid x:Name="thumbGrid" Width="18" Height="20">
      <Ellipse x:Name="halo" Width="48" Height="48" Margin="-24" Fill="{TemplateBinding Foreground}" Opacity="0" />
      <Ellipse x:Name="focusedHalo" Width="48" Height="48" Margin="-24" Fill="{TemplateBinding Foreground}" Opacity="{StaticResource MyNet.Opacity.Filled}" RenderTransformOrigin="0.5,0.5">
        <Ellipse.RenderTransform>
          <ScaleTransform ScaleX="0" ScaleY="0" />
        </Ellipse.RenderTransform>
      </Ellipse>
      <AdornerDecorator>
        <AdornerDecorator.CacheMode>
          <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </AdornerDecorator.CacheMode>
        <Ellipse x:Name="grip" Margin="-1 0" Effect="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=RangeBase}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" Fill="{TemplateBinding Foreground}" />
      </AdornerDecorator>
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType=RangeBase}}" Value="{x:Static Orientation.Vertical}">
        <Setter TargetName="grip" Property="Margin" Value="0 -1" />
        <Setter TargetName="thumbGrid" Property="Height" Value="18" />
        <Setter TargetName="thumbGrid" Property="Width" Value="20" />
      </DataTrigger>
      <Trigger Property="IsMouseOver" Value="true">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="halo" Storyboard.TargetProperty="Opacity" To="{StaticResource MyNet.Opacity.Hovered}" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="halo" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <DataTrigger Value="True">
        <DataTrigger.Binding>
          <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
            <Binding Path="IsFocused" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
            <Binding Converter="{x:Static c:NotBooleanConverter.Default}" Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
          </MultiBinding>
        </DataTrigger.Binding>
        <DataTrigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
        </DataTrigger.ExitActions>
      </DataTrigger>
      <DataTrigger Value="True">
        <DataTrigger.Binding>
          <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
            <!--<Binding Path="IsDragging" RelativeSource="{RelativeSource TemplatedParent}" />-->
            <Binding Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
          </MultiBinding>
        </DataTrigger.Binding>
        <DataTrigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
        </DataTrigger.ExitActions>
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.Thumb.Embedded.Slider.Discrete" TargetType="{x:Type Thumb}">
    <ControlTemplate.Resources>
      <Storyboard x:Key="ShowFocusVisualStoryboard">
        <DoubleAnimation Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity" To="{StaticResource MyNet.Opacity.Filled}" Duration="0" />
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
          <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
          <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="Visibility" Duration="0">
          <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
        </ObjectAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
          <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
          <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HideFocusVisualStoryboard">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity">
          <EasingDoubleKeyFrame KeyTime="0:0:0" Value="{StaticResource MyNet.Opacity.Filled}" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Duration="0">
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Duration="0">
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
          <EasingDoubleKeyFrame KeyTime="0:0:0" Value="1" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
          <EasingDoubleKeyFrame KeyTime="0:0:0" Value="1" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="Visibility" Duration="0">
          <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}" />
        </ObjectAnimationUsingKeyFrames>
      </Storyboard>
    </ControlTemplate.Resources>
    <Grid Width="18" Height="20">
      <Ellipse x:Name="halo" Width="48" Height="48" Margin="-24" Fill="{TemplateBinding Foreground}" Opacity="0" />
      <Ellipse x:Name="focusedHalo" Width="48" Height="48" Margin="-24" Fill="{TemplateBinding Foreground}" Opacity="{StaticResource MyNet.Opacity.Filled}" RenderTransformOrigin="0.5,0.5">
        <Ellipse.RenderTransform>
          <ScaleTransform ScaleX="0" ScaleY="0" />
        </Ellipse.RenderTransform>
      </Ellipse>
      <Canvas>
        <Grid x:Name="label" Height="36" IsHitTestVisible="False" RenderTransformOrigin="0.5,1" Visibility="Collapsed">
          <Grid.RenderTransform>
            <TransformGroup>
              <ScaleTransform ScaleX="0" ScaleY="0" />
              <TranslateTransform X="{Binding ActualWidth, FallbackValue={StaticResource FallBackValueZero}, ElementName=label, Converter={x:Static c:SliderValueLabelPositionConverter.Default}, ConverterParameter={x:Static Orientation.Horizontal}}" Y="-40" />
            </TransformGroup>
          </Grid.RenderTransform>
          <AdornerDecorator>
            <AdornerDecorator.CacheMode>
              <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </AdornerDecorator.CacheMode>
            <Grid Effect="{Binding Source={StaticResource MyNet.Elevation.Popup}, Converter={x:Static c:ShadowConverter.Default}}">
              <Rectangle Margin="0 0 0 5" Fill="{DynamicResource MyNet.Brushes.Popup.Background}" RadiusX="{StaticResource MyNet.UniformCornerRadius.Container}" RadiusY="{StaticResource MyNet.UniformCornerRadius.Container}" />
              <Polygon HorizontalAlignment="Center" VerticalAlignment="Bottom" Fill="{DynamicResource MyNet.Brushes.Popup.Background}" Points="0,0 4.5,5 9,0" />
            </Grid>
          </AdornerDecorator>
          <TextBlock Margin="12 0 12 5" VerticalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Application.Foreground}" TextAlignment="Center">
            <TextBlock.Text>
              <MultiBinding Converter="{x:Static c:SliderToolTipConverter.Default}" NotifyOnValidationError="True" TargetNullValue="" ValidatesOnDataErrors="True">
                <Binding Path="Value" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" TargetNullValue="" />
                <Binding Path="(p:SliderAssist.ToolTipFormat)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
              </MultiBinding>
            </TextBlock.Text>
          </TextBlock>
        </Grid>
      </Canvas>
      <AdornerDecorator>
        <AdornerDecorator.CacheMode>
          <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </AdornerDecorator.CacheMode>
        <Ellipse x:Name="grip" Margin="-1 0" Effect="{Binding Source={StaticResource MyNet.Elevation.Popup}, Converter={x:Static c:ShadowConverter.Default}}" Fill="{TemplateBinding Foreground}" />
      </AdornerDecorator>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="halo" Storyboard.TargetProperty="Opacity" To="{StaticResource MyNet.Opacity.Hovered}" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="halo" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <DataTrigger Value="True">
        <DataTrigger.Binding>
          <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
            <Binding Path="IsFocused" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
            <Binding Converter="{x:Static c:NotBooleanConverter.Default}" Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
          </MultiBinding>
        </DataTrigger.Binding>
        <DataTrigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
        </DataTrigger.ExitActions>
      </DataTrigger>
      <DataTrigger Value="True">
        <DataTrigger.Binding>
          <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
            <Binding Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
          </MultiBinding>
        </DataTrigger.Binding>
        <DataTrigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
        </DataTrigger.ExitActions>
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.Thumb.Embedded.Slider.Discrete.Left" TargetType="{x:Type Thumb}">
    <ControlTemplate.Resources>
      <Storyboard x:Key="ShowFocusVisualStoryboard">
        <DoubleAnimation Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity" To="{StaticResource MyNet.Opacity.Filled}" Duration="0" />
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
          <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
          <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="Visibility" Duration="0">
          <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
        </ObjectAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
          <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
          <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HideFocusVisualStoryboard">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity">
          <EasingDoubleKeyFrame KeyTime="0:0:0" Value="{StaticResource MyNet.Opacity.Filled}" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Duration="0">
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Duration="0">
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
          <EasingDoubleKeyFrame KeyTime="0:0:0" Value="1" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
          <EasingDoubleKeyFrame KeyTime="0:0:0" Value="1" />
          <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
            <EasingDoubleKeyFrame.EasingFunction>
              <SineEase EasingMode="EaseInOut" />
            </EasingDoubleKeyFrame.EasingFunction>
          </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="label" Storyboard.TargetProperty="Visibility" Duration="0">
          <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}" />
        </ObjectAnimationUsingKeyFrames>
      </Storyboard>
    </ControlTemplate.Resources>
    <Grid Width="20" Height="18">
      <Ellipse x:Name="halo" Width="48" Height="48" Margin="-24" Fill="{TemplateBinding Foreground}" Opacity="0" />
      <Ellipse x:Name="focusedHalo" Width="48" Height="48" Margin="-24" Fill="{TemplateBinding Foreground}" Opacity="{StaticResource MyNet.Opacity.Filled}" RenderTransformOrigin="0.5,0.5">
        <Ellipse.RenderTransform>
          <ScaleTransform ScaleX="0" ScaleY="0" />
        </Ellipse.RenderTransform>
      </Ellipse>
      <Canvas>
        <Grid x:Name="label" Height="31" IsHitTestVisible="False" RenderTransformOrigin="1,0.5" Visibility="Collapsed">
          <Grid.RenderTransform>
            <TransformGroup>
              <ScaleTransform ScaleX="0" ScaleY="0" />
              <TranslateTransform X="{Binding ActualWidth, ElementName=label, Converter={x:Static c:SliderValueLabelPositionConverter.Default}, ConverterParameter={x:Static Orientation.Vertical}}" Y="-7" />
            </TransformGroup>
          </Grid.RenderTransform>
          <AdornerDecorator>
            <AdornerDecorator.CacheMode>
              <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </AdornerDecorator.CacheMode>
            <Grid Effect="{Binding Source={StaticResource MyNet.Elevation.Popup}, Converter={x:Static c:ShadowConverter.Default}}">
              <Rectangle Margin="0 0 5 0" Fill="{DynamicResource MyNet.Brushes.Popup.Background}" RadiusX="{StaticResource MyNet.UniformCornerRadius.Container}" RadiusY="{StaticResource MyNet.UniformCornerRadius.Container}" />
              <Polygon HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{DynamicResource MyNet.Brushes.Popup.Background}" Points="0,0 6,5 0,10" />
            </Grid>
          </AdornerDecorator>
          <TextBlock Margin="12 0 17 0" VerticalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Application.Foreground}" TextAlignment="Center">
            <TextBlock.Text>
              <MultiBinding Converter="{x:Static c:SliderToolTipConverter.Default}" NotifyOnValidationError="True" TargetNullValue="" ValidatesOnDataErrors="True">
                <Binding Path="Value" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" TargetNullValue="" />
                <Binding Path="(p:SliderAssist.ToolTipFormat)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
              </MultiBinding>
            </TextBlock.Text>
          </TextBlock>
        </Grid>
      </Canvas>
      <AdornerDecorator>
        <AdornerDecorator.CacheMode>
          <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </AdornerDecorator.CacheMode>
        <Ellipse x:Name="grip" Margin="0 -1" Effect="{Binding Source={StaticResource MyNet.Elevation.Popup}, Converter={x:Static c:ShadowConverter.Default}}" Fill="{TemplateBinding Foreground}" />
      </AdornerDecorator>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="halo" Storyboard.TargetProperty="Opacity" To="{StaticResource MyNet.Opacity.Hovered}" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="halo" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <DataTrigger Value="True">
        <DataTrigger.Binding>
          <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
            <Binding Path="IsFocused" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
            <Binding Converter="{x:Static c:NotBooleanConverter.Default}" Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
          </MultiBinding>
        </DataTrigger.Binding>
        <DataTrigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
        </DataTrigger.ExitActions>
      </DataTrigger>
      <DataTrigger Value="True">
        <DataTrigger.Binding>
          <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
            <!--<Binding Path="IsDragging" RelativeSource="{RelativeSource TemplatedParent}" />-->
            <Binding Path="(p:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=RangeBase}" />
          </MultiBinding>
        </DataTrigger.Binding>
        <DataTrigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
        </DataTrigger.ExitActions>
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.Slider.Horizontal" TargetType="{x:Type Slider}">
    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <TickBar x:Name="TopTick" Grid.Row="0" Height="4" Margin="0 0 0 2" Fill="{TemplateBinding BorderBrush}" Placement="Top" Visibility="Collapsed" />
      <TickBar x:Name="BottomTick" Grid.Row="2" Height="4" Margin="0 2 0 0" Fill="{TemplateBinding BorderBrush}" Placement="Bottom" Visibility="Collapsed" />
      <Rectangle Grid.Row="1" Height="{TemplateBinding p:SliderAssist.BarSize}" VerticalAlignment="Center" Fill="{DynamicResource MyNet.Brushes.Transparency.Small}" RadiusX="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" Visibility="{Binding Path=(p:SliderAssist.ShowTransparencyBackground), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
      <Rectangle Grid.Row="1" Height="{TemplateBinding p:SliderAssist.BarSize}" VerticalAlignment="Center" Fill="{TemplateBinding Background}" RadiusX="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" />
      <Border x:Name="activeTrack" Grid.Row="1" Width="{Binding DecreaseRepeatButton.ActualWidth, ElementName=PART_Track}" Height="{TemplateBinding p:SliderAssist.ActiveBarSize}" HorizontalAlignment="Left" VerticalAlignment="Center" Background="{TemplateBinding Foreground}" CornerRadius="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Left}}" />
      <!-- Selection range must be wrapped in a Canvas for the position to be updated correctly -->
      <Canvas Grid.Row="1" Height="6" VerticalAlignment="Center">
        <Rectangle x:Name="PART_SelectionRange" Height="{TemplateBinding p:SliderAssist.ActiveBarSize}" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" RadiusX="{TemplateBinding p:SliderAssist.ActiveBarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.ActiveBarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" Visibility="Collapsed" />
      </Canvas>
      <Track x:Name="PART_Track" Grid.Row="1" Height="20">
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.DecreaseLarge}" />
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.IncreaseLarge}" />
        </Track.IncreaseRepeatButton>
        <!-- It's important that the Thumb gets added last in the XAML to make sure it is drawn on top of both repeat buttons -->
        <Track.Thumb>
          <Thumb Foreground="{TemplateBinding p:SliderAssist.ThumbBackground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Template="{StaticResource MyNet.Templates.Thumb.Embedded.Slider}" />
        </Track.Thumb>
      </Track>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsSelectionRangeEnabled" Value="true">
        <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsDirectionReversed" Value="True">
        <Setter TargetName="activeTrack" Property="CornerRadius" Value="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Right}}" />
        <Setter TargetName="activeTrack" Property="HorizontalAlignment" Value="Right" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.Slider.Vertical" TargetType="{x:Type Slider}">
    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <TickBar x:Name="TopTick" Grid.Column="0" Width="4" Margin="0 0 2 0" Fill="{TemplateBinding BorderBrush}" Placement="Left" Visibility="Collapsed" />
      <TickBar x:Name="BottomTick" Grid.Column="2" Width="4" Margin="2 0 0 0" Fill="{TemplateBinding BorderBrush}" Placement="Right" Visibility="Collapsed" />
      <Rectangle Grid.Column="1" Width="{TemplateBinding p:SliderAssist.BarSize}" HorizontalAlignment="Center" Fill="{DynamicResource MyNet.Brushes.Transparency.Small}" RadiusX="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" Visibility="{Binding Path=(p:SliderAssist.ShowTransparencyBackground), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
      <Rectangle Grid.Column="1" Width="{TemplateBinding p:SliderAssist.BarSize}" HorizontalAlignment="Center" Fill="{TemplateBinding Background}" RadiusX="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" />
      <Border x:Name="activeTrack" Grid.Column="1" Width="{TemplateBinding p:SliderAssist.ActiveBarSize}" Height="{Binding DecreaseRepeatButton.ActualHeight, ElementName=PART_Track}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Background="{TemplateBinding Foreground}" CornerRadius="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Bottom}}" />
      <!-- Selection range must be wrapped in a Canvas for the position to be updated correctly -->
      <Canvas Grid.Column="1" Width="6" HorizontalAlignment="Center">
        <Rectangle x:Name="PART_SelectionRange" Width="{TemplateBinding p:SliderAssist.ActiveBarSize}" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" RadiusX="{TemplateBinding p:SliderAssist.ActiveBarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.ActiveBarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" Visibility="Collapsed" />
      </Canvas>
      <Track x:Name="PART_Track" Grid.Column="1" Width="20">
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.DecreaseLarge}" />
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.IncreaseLarge}" />
        </Track.IncreaseRepeatButton>
        <!-- It's important that the Thumb gets added last in the XAML to make sure it is drawn on top of both repeat buttons -->
        <Track.Thumb>
          <Thumb Foreground="{TemplateBinding p:SliderAssist.ThumbBackground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Template="{StaticResource MyNet.Templates.Thumb.Embedded.Slider}" />
        </Track.Thumb>
      </Track>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsSelectionRangeEnabled" Value="true">
        <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsDirectionReversed" Value="True">
        <Setter TargetName="activeTrack" Property="CornerRadius" Value="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Top}}" />
        <Setter TargetName="activeTrack" Property="VerticalAlignment" Value="Top" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.Slider.Discrete.Horizontal" TargetType="{x:Type Slider}">
    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <TickBar x:Name="TopTick" Grid.Row="0" Height="4" Margin="0 0 0 2" Fill="{TemplateBinding BorderBrush}" Placement="Top" Visibility="Collapsed" />
      <TickBar x:Name="BottomTick" Grid.Row="2" Height="4" Margin="0 2 0 0" Fill="{TemplateBinding BorderBrush}" Placement="Bottom" Visibility="Collapsed" />
      <Rectangle Grid.Row="1" Height="{TemplateBinding p:SliderAssist.BarSize}" VerticalAlignment="Center" Fill="{DynamicResource MyNet.Brushes.Transparency.Small}" RadiusX="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" Visibility="{Binding Path=(p:SliderAssist.ShowTransparencyBackground), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
      <Rectangle Grid.Row="1" Height="{TemplateBinding p:SliderAssist.BarSize}" VerticalAlignment="Center" Fill="{TemplateBinding Background}" RadiusX="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" />
      <Border x:Name="activeTrack" Grid.Row="1" Width="{Binding DecreaseRepeatButton.ActualWidth, ElementName=PART_Track}" Height="{TemplateBinding p:SliderAssist.ActiveBarSize}" HorizontalAlignment="Left" VerticalAlignment="Center" Background="{TemplateBinding Foreground}" CornerRadius="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Left}}" />
      <!-- Selection range must be wrapped in a Canvas for the position to be updated correctly -->
      <Canvas Grid.Row="1" Height="6" VerticalAlignment="Center">
        <Rectangle x:Name="PART_SelectionRange" Height="{TemplateBinding p:SliderAssist.ActiveBarSize}" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" RadiusX="{TemplateBinding p:SliderAssist.ActiveBarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.ActiveBarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" Visibility="Collapsed" />
      </Canvas>
      <Track x:Name="PART_Track" Grid.Row="1" Height="20">
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.DecreaseLarge}" />
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.IncreaseLarge}" />
        </Track.IncreaseRepeatButton>
        <!-- It's important that the Thumb gets added last in the XAML to make sure it is drawn on top of both repeat buttons -->
        <Track.Thumb>
          <Thumb Foreground="{TemplateBinding p:SliderAssist.ThumbBackground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Template="{StaticResource MyNet.Templates.Thumb.Embedded.Slider.Discrete}" />
        </Track.Thumb>
      </Track>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsSelectionRangeEnabled" Value="true">
        <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsDirectionReversed" Value="True">
        <Setter TargetName="activeTrack" Property="CornerRadius" Value="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Right}}" />
        <Setter TargetName="activeTrack" Property="HorizontalAlignment" Value="Right" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.Slider.Discrete.Vertical" TargetType="{x:Type Slider}">
    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <TickBar x:Name="TopTick" Grid.Column="0" Width="4" Margin="0 0 2 0" Fill="{TemplateBinding BorderBrush}" Placement="Left" Visibility="Collapsed" />
      <TickBar x:Name="BottomTick" Grid.Column="2" Width="4" Margin="2 0 0 0" Fill="{TemplateBinding BorderBrush}" Placement="Right" Visibility="Collapsed" />
      <Rectangle Grid.Column="1" Width="{TemplateBinding p:SliderAssist.BarSize}" HorizontalAlignment="Center" Fill="{DynamicResource MyNet.Brushes.Transparency.Small}" RadiusX="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" Visibility="{Binding Path=(p:SliderAssist.ShowTransparencyBackground), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
      <Rectangle Grid.Column="1" Width="{TemplateBinding p:SliderAssist.BarSize}" HorizontalAlignment="Center" Fill="{TemplateBinding Background}" RadiusX="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.BarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" />
      <Border x:Name="activeTrack" Grid.Column="1" Width="{TemplateBinding p:SliderAssist.ActiveBarSize}" Height="{Binding DecreaseRepeatButton.ActualHeight, ElementName=PART_Track}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Background="{TemplateBinding Foreground}" CornerRadius="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Bottom}}" />
      <!-- Selection range must be wrapped in a Canvas for the position to be updated correctly -->
      <Canvas Grid.Column="1" Width="6" HorizontalAlignment="Center">
        <Rectangle x:Name="PART_SelectionRange" Width="{TemplateBinding p:SliderAssist.ActiveBarSize}" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" RadiusX="{TemplateBinding p:SliderAssist.ActiveBarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" RadiusY="{TemplateBinding p:SliderAssist.ActiveBarSize, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2}" Visibility="Collapsed" />
      </Canvas>
      <Track x:Name="PART_Track" Grid.Column="1" Width="20">
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.DecreaseLarge}" />
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.Slider}" Command="{x:Static Slider.IncreaseLarge}" />
        </Track.IncreaseRepeatButton>
        <!-- It's important that the Thumb gets added last in the XAML to make sure it is drawn on top of both repeat buttons -->
        <Track.Thumb>
          <Thumb Foreground="{TemplateBinding p:SliderAssist.ThumbBackground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Template="{StaticResource MyNet.Templates.Thumb.Embedded.Slider.Discrete.Left}" />
        </Track.Thumb>
      </Track>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsSelectionRangeEnabled" Value="true">
        <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsDirectionReversed" Value="True">
        <Setter TargetName="activeTrack" Property="CornerRadius" Value="{Binding Path=RadiusX, ElementName=PART_SelectionRange, Converter={x:Static c:DoubleToCornerRadiusConverter.Top}}" />
        <Setter TargetName="activeTrack" Property="VerticalAlignment" Value="Top" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.Slider" TargetType="{x:Type Slider}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="Interval" Value="5" />
    <Setter Property="IsMoveToPointEnabled" Value="True" />
    <Setter Property="SmallChange" Value="1" />
    <Setter Property="SnapsToDevicePixels" Value="False" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.Slider.Horizontal}" />
    <Setter Property="UseLayoutRounding" Value="False" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="p:SliderAssist.ThumbBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.Slider.Vertical}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Slider.Discrete" TargetType="{x:Type Slider}" BasedOn="{StaticResource MyNet.Styles.Slider}">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.Slider.Discrete.Horizontal}" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.Slider.Discrete.Vertical}" />
      </Trigger>
      <Trigger Property="p:SliderAssist.OnlyShowFocusVisualWhileDragging" Value="False">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Slider.Colors.Hue" TargetType="{x:Type Slider}" BasedOn="{StaticResource MyNet.Styles.Slider.Discrete}">
    <Setter Property="Background">
      <Setter.Value>
        <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
          <GradientStop Offset="0.00000000000000000" Color="#FFFF0000" />
          <GradientStop Offset="0.16666666666666666" Color="#FFFFFF00" />
          <GradientStop Offset="0.33333333333333333" Color="#FF00FF00" />
          <GradientStop Offset="0.50000000000000000" Color="#FF00FFFF" />
          <GradientStop Offset="0.66666666666666666" Color="#FF0000FF" />
          <GradientStop Offset="0.83333333333333333" Color="#FFFF00FF" />
          <GradientStop Offset="1.00000000000000000" Color="#FFFF0000" />
        </LinearGradientBrush>
      </Setter.Value>
    </Setter>
    <Setter Property="Foreground" Value="Transparent" />
    <Setter Property="IsMoveToPointEnabled" Value="True" />
    <Setter Property="IsSnapToTickEnabled" Value="True" />
    <Setter Property="Maximum" Value="360" />
    <Setter Property="Minimum" Value="0" />
    <Setter Property="TickFrequency" Value="1" />
    <Setter Property="p:SliderAssist.ActiveBarSize" Value="{Binding Path=(p:SliderAssist.BarSize), RelativeSource={RelativeSource Self}}" />
    <Setter Property="p:SliderAssist.BarSize" Value="6.0" />
    <Setter Property="p:SliderAssist.ThumbBackground">
      <Setter.Value>
        <MultiBinding Converter="{x:Static c:HSVToSolidBrushConverter.Default}">
          <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
          <Binding Source="1.0" />
          <Binding Source="1.0" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Background">
          <Setter.Value>
            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
              <GradientStop Offset="0.00000000000000000" Color="#FFFF0000" />
              <GradientStop Offset="0.16666666666666666" Color="#FFFF00FF" />
              <GradientStop Offset="0.33333333333333333" Color="#FF0000FF" />
              <GradientStop Offset="0.50000000000000000" Color="#FF00FFFF" />
              <GradientStop Offset="0.66666666666666666" Color="#FF00FF00" />
              <GradientStop Offset="0.83333333333333333" Color="#FFFFFF00" />
              <GradientStop Offset="1.00000000000000000" Color="#FFFF0000" />
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Slider.Colors.Saturation" TargetType="{x:Type Slider}" BasedOn="{StaticResource MyNet.Styles.Slider.Colors.Hue}">
    <Setter Property="Background">
      <Setter.Value>
        <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.Saturation}">
          <Binding Source="255" />
          <Binding Source="1.0" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="LargeChange" Value="0.05" />
    <Setter Property="Maximum" Value="1" />
    <Setter Property="Minimum" Value="0" />
    <Setter Property="SmallChange" Value="0.01" />
    <Setter Property="TickFrequency" Value="0.01" />
    <Setter Property="p:SliderAssist.ThumbBackground">
      <Setter.Value>
        <MultiBinding Converter="{x:Static c:HSVToSolidBrushConverter.Default}">
          <Binding Source="255" />
          <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
          <Binding Source="1.0" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Background">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.Saturation}">
              <Binding Source="255" />
              <Binding Source="1.0" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Slider.Colors.Value" TargetType="{x:Type Slider}" BasedOn="{StaticResource MyNet.Styles.Slider.Colors.Saturation}">
    <Setter Property="Background">
      <Setter.Value>
        <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.Value}">
          <Binding Source="255" />
          <Binding Source="1.0" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="p:SliderAssist.ThumbBackground">
      <Setter.Value>
        <MultiBinding Converter="{x:Static c:HSVToSolidBrushConverter.Default}">
          <Binding Source="255" />
          <Binding Source="1.0" />
          <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Background">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.ValueVertical}">
              <Binding Source="255" />
              <Binding Source="1.0" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Slider.Colors.ARGB" TargetType="{x:Type Slider}" BasedOn="{StaticResource MyNet.Styles.Slider.Colors.Hue}">
    <Setter Property="Background">
      <Setter.Value>
        <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.Red}">
          <Binding Source="123" />
          <Binding Source="234" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="Foreground" Value="Transparent" />
    <Setter Property="Maximum" Value="255" />
    <Setter Property="Minimum" Value="0" />
    <Setter Property="p:SliderAssist.ShowTransparencyBackground" Value="True" />
    <Setter Property="p:SliderAssist.ThumbBackground">
      <Setter.Value>
        <MultiBinding Converter="{x:Static c:RGBAToSolidBrushConverter.Default}">
          <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
          <Binding Source="123" />
          <Binding Source="234" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Background">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.RedVertical}">
              <Binding Source="123" />
              <Binding Source="234" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.TabItem" TargetType="{x:Type TabItem}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{Binding Path=(p:TabControlAssist.IndicatorBrush), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
    <Setter Property="BorderThickness" Value="0 0 0 2" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <!-- Foreground is for the content, not the header -->
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HeaderTemplate" Value="{StaticResource MyNet.DataTemplates.Icon.TabItem}" />
    <Setter Property="Height" Value="{Binding Path=(p:TabControlAssist.TabItemHeight), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="MinWidth" Value="90" />
    <Setter Property="Padding" Value="16 12" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <RadioButton x:Name="RadioButton" Style="{StaticResource MyNet.Styles.RadioButton.Tab}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" p:IconAssist.Alignment="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource TemplatedParent}}" p:IconAssist.Icon="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" p:IconAssist.Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" p:IconAssist.Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" p:RippleAssist.Feedback="{Binding Path=(p:RippleAssist.Feedback), RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" FontSize="{StaticResource MyNet.Font.Size.Tab}" FontStretch="Normal" FontStyle="Normal" FontWeight="{StaticResource MyNet.Font.Weight.Header}" Foreground="{Binding Path=(p:TabControlAssist.HeaderForeground), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" TextOptions.TextFormattingMode="Ideal" TextOptions.TextRenderingMode="Auto" Typography.Capitals="{TemplateBinding Typography.Capitals}" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="RadioButton" Property="Foreground" Value="{Binding BorderBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:RippleAssist.Feedback" Value="{Binding Path=(p:RippleAssist.Feedback), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom">
        <Setter Property="BorderThickness" Value="0 2 0 0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left">
        <Setter Property="BorderThickness" Value="0 0 2 0" />
      </DataTrigger>
      <DataTrigger Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right">
        <Setter Property="BorderThickness" Value="2 0 0 0" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.TabItem.Navigation" TargetType="{x:Type TabItem}" BasedOn="{StaticResource MyNet.Styles.TabItem}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush">
      <Setter.Value>
        <SolidColorBrush Opacity="0.0" Color="{DynamicResource MyNet.Colors.Control.Border}" />
      </Setter.Value>
    </Setter>
    <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Secondary}" />
    <Setter Property="Height" Value="60" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
    <Setter Property="Margin" Value="0 4 0 2" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <ControlTemplate.Resources>
            <Style TargetType="{x:Type ctrl:PackIcon}">
              <Setter Property="FrameworkElement.Height" Value="24" />
              <Setter Property="FrameworkElement.Width" Value="24" />
            </Style>
            <Style TargetType="{x:Type ctrl:GeometryIcon}">
              <Setter Property="FrameworkElement.Height" Value="24" />
              <Setter Property="FrameworkElement.Width" Value="24" />
            </Style>
          </ControlTemplate.Resources>
          <Border x:Name="MainBorder" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="{StaticResource MyNet.CornerRadius.Container}">
            <Grid>
              <Rectangle x:Name="ActiveRectangle" Width="4" Height="24" HorizontalAlignment="Left" VerticalAlignment="Center" Fill="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" Opacity="0.0" RadiusX="2" RadiusY="2" />
              <ctrl:Ripple Padding="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Feedback="{TemplateBinding p:HeaderAssist.Foreground}" Focusable="False" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <ctrl:Ripple.Clip>
                  <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                    <Binding ElementName="MainBorder" Path="ActualWidth" />
                    <Binding ElementName="MainBorder" Path="ActualHeight" />
                    <Binding ElementName="MainBorder" Path="CornerRadius" />
                    <Binding ElementName="MainBorder" Path="BorderThickness" />
                  </MultiBinding>
                </ctrl:Ripple.Clip>
                <Grid HorizontalAlignment="Stretch">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <ContentControl x:Name="Icon" Grid.Row="0" Margin="0" VerticalAlignment="Center" Content="{TemplateBinding p:IconAssist.Icon}" Foreground="{TemplateBinding p:HeaderAssist.Foreground}" />
                  <Grid x:Name="ContentGrid" Grid.Row="1" Height="15" Margin="0 2 0 0">
                    <ContentPresenter x:Name="ElementContentPresenter" HorizontalAlignment="Center" Content="{TemplateBinding Header}" TextElement.FontSize="{TemplateBinding FontSize}" TextElement.Foreground="{TemplateBinding p:HeaderAssist.Foreground}" />
                  </Grid>
                </Grid>
              </ctrl:Ripple>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="ActiveRectangle" Property="Opacity" Value="1.0" />
              <Setter TargetName="ElementContentPresenter" Property="Margin" Value="0" />
              <Setter TargetName="Icon" Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Setter TargetName="MainBorder" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Height" From="15" To="0" Duration="0:0:.16" />
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:.16" />
                    <DoubleAnimation Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Opacity)" From="0" To="0.3" Duration="0:0:.16" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Height" From="0" To="15" Duration="0:0:.16" />
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:.16" />
                    <DoubleAnimation Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Opacity)" From="0.3" To="0" Duration="0:0:.16" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="p:IconAssist.Icon" Value="{x:Null}">
              <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="MainBorder" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsSelected" Value="False" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="Icon" Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsMouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="ElementContentPresenter" Property="TextElement.Foreground" Value="{Binding Path=(p:ThemeAssist.IsMouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="TabStripPlacement" Value="Top">
              <Setter TargetName="ActiveRectangle" Property="Height" Value="4" />
              <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Center" />
              <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Bottom" />
              <Setter TargetName="ActiveRectangle" Property="Width" Value="24" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter TargetName="ActiveRectangle" Property="Height" Value="4" />
              <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Center" />
              <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Top" />
              <Setter TargetName="ActiveRectangle" Property="Width" Value="24" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
              <Setter TargetName="ActiveRectangle" Property="Height" Value="24" />
              <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Right" />
              <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Center" />
              <Setter TargetName="ActiveRectangle" Property="Width" Value="4" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter TargetName="ActiveRectangle" Property="Height" Value="24" />
              <Setter TargetName="ActiveRectangle" Property="HorizontalAlignment" Value="Left" />
              <Setter TargetName="ActiveRectangle" Property="VerticalAlignment" Value="Center" />
              <Setter TargetName="ActiveRectangle" Property="Width" Value="4" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Width" Value="60" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{me:BrushBinding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding Path=(p:ThemeAssist.IsMouseOverForeground), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Disablable" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock}">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Principal" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Default}" />
    <Setter Property="FontStretch" Value="Normal" />
    <Setter Property="FontStyle" Value="Normal" />
    <Setter Property="FontWeight" Value="Normal" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Secondary" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Secondary}" />
    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Caption" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Secondary}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Caption}" />
    <Setter Property="FontStretch" Value="Medium" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Title" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Caption}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Title}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Header" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Title}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Header}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Ghost" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Principal}">
    <Setter Property="FontStyle" Value="Italic" />
    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Embedded.TextBox.CharacterCounter" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Secondary}">
    <Setter Property="Margin" Value="0 0 16 0" />
    <Setter Property="Text">
      <Setter.Value>
        <MultiBinding StringFormat="{}{0} / {1}">
          <Binding Converter="{x:Static c:StringLengthValueConverter.Default}" Path="Text" RelativeSource="{RelativeSource FindAncestor, AncestorType=TextBoxBase}" />
          <Binding Path="MaxLength" RelativeSource="{RelativeSource FindAncestor, AncestorType=TextBoxBase}" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Visibility" Value="{Binding Path=(p:TextFieldAssist.CharacterCounterIsVisible), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Embedded.TextBox.HelperText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Secondary}">
    <Setter Property="FontSize" Value="{Binding Path=(p:HintAssist.HelperTextFontSize), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="FontStyle" Value="{Binding Path=(p:HintAssist.HelperTextFontStyle), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Foreground" Value="{Binding Path=(p:HintAssist.HelperTextForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="Margin" Value="{Binding Path=(p:HintAssist.HelperTextMargin), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Opacity" Value="{Binding Path=(p:HintAssist.HelperTextOpacity), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Text" Value="{Binding Path=(p:HintAssist.HelperText), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.TextBox" TargetType="{x:Type TextBoxBase}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <!-- Mouse Over -->
            <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Focus -->
            <Border x:Name="focus" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Ripple on focus -->
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Icon -->
              <ContentControl x:Name="Icon" Grid.Column="0" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <ContentControl.Resources>
                  <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                  <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                </ContentControl.Resources>
              </ContentControl>
              <Grid Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <!-- Content -->
                <Grid x:Name="grid" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Host Text -->
                    <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1" VerticalAlignment="Center" Panel.ZIndex="1" p:ScrollViewerAssist.IgnorePadding="True" Focusable="false" HorizontalScrollBarVisibility="Hidden" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalScrollBarVisibility="Hidden" />
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
              <!-- Clear button -->
              <Button x:Name="PART_ClearButton" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="2" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{x:Static p:TextFieldAssist.ClearCommand}" Content="{me:Icon Kind=Close,                                                       Size=16}" ToolTip="{me:Resource Clear}">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
            </Grid>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="CharacterCounterContainer" Grid.Column="1">
            <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding Path=(p:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </Grid>
      </Canvas>
    </Grid>
    <ControlTemplate.Triggers>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="3" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_ClearButton" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- IsKeyboardFocused -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
      <!-- IsReadOnly -->
      <Trigger Property="IsReadOnly" Value="True">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Opacity" Value="1" />
        <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="border" Property="Opacity" Value="1" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
        <Setter TargetName="grid" Property="Opacity" Value="1" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.TextBox.Embedded" TargetType="{x:Type TextBoxBase}">
    <Setter Property="AllowDrop" Value="True" />
    <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <ctrl:DynamicScrollViewer x:Name="PART_ContentHost" p:ScrollViewerAssist.IgnorePadding="True" Focusable="False" HorizontalScrollBarVisibility="Hidden" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalScrollBarVisibility="Hidden" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
  </Style>
  <Style x:Key="MyNet.Styles.Thumb.Embedded.ToolBar" TargetType="{x:Type Thumb}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Padding="{TemplateBinding Padding}" Background="Transparent" SnapsToDevicePixels="True">
            <Rectangle>
              <Rectangle.Fill>
                <DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" ViewboxUnits="Absolute" Viewport="0,0,4,4" ViewportUnits="Absolute">
                  <DrawingBrush.Drawing>
                    <DrawingGroup>
                      <GeometryDrawing Brush="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z" />
                    </DrawingGroup>
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Rectangle.Fill>
            </Rectangle>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Cursor" Value="SizeAll" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Embedded.ToolBar.Overflow.Vertical" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control.Bottom}" SnapsToDevicePixels="true">
            <Viewbox Width="16" Height="16">
              <Canvas Width="24" Height="24">
                <Path Data="M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z" Fill="{TemplateBinding Foreground}" />
              </Canvas>
            </Viewbox>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Embedded.ToolBar.Overflow.Horizontal" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Embedded.ToolBar.Overflow.Vertical}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control.Right}" SnapsToDevicePixels="true">
            <Viewbox Width="16" Height="16" Margin="8 0 8 0">
              <Canvas Width="24" Height="24">
                <Path Data="M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z" Fill="{TemplateBinding Foreground}" />
              </Canvas>
            </Viewbox>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Label.ToolBar" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TreeViewItem" TargetType="{x:Type TreeViewItem}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle}" />
    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}}" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Padding" Value="8" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                    <VisualTransition.GeneratedEasingFunction>
                      <CubicEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Normal" />
                <VisualState Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.6" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unselected" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ExpansionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" To="Expanded">
                    <VisualTransition.GeneratedEasingFunction>
                      <CubicEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.3" />
                      <DoubleAnimation Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" To="1" Duration="0:0:0.3" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition GeneratedDuration="0" To="Collapsed">
                    <VisualTransition.GeneratedEasingFunction>
                      <CubicEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="{x:Static Visibility.Collapsed}" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.3" />
                      <DoubleAnimation Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" To="0" Duration="0:0:0.3" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Expanded">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" To="1" Duration="0:0:0.3" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Collapsed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" To="0" Duration="0:0:0.3" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ctrl:ScaleHost x:Name="ScaleHost" />
            <ToggleButton x:Name="Expander" Style="{StaticResource MyNet.Styles.ToggleButton.Embedded.TreeViewItem}" Width="{TemplateBinding p:TreeViewAssist.ExpanderSize}" Height="{TemplateBinding p:TreeViewAssist.ExpanderSize}" Margin="8 0 8 0" VerticalAlignment="Center" ClickMode="Press" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border x:Name="MouseOverBorder" Grid.Column="1" Grid.ColumnSpan="2" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" IsHitTestVisible="False" Opacity="0" />
            <Border x:Name="SelectedBorder" Grid.Column="1" Grid.ColumnSpan="2" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" IsHitTestVisible="False" Opacity="0" />
            <Grid x:Name="ContentGrid" Grid.Column="1" Grid.ColumnSpan="2" Background="{TemplateBinding Background}">
              <ctrl:Ripple x:Name="Ripple" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Feedback="{TemplateBinding Foreground}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <ContentPresenter x:Name="PART_Header" ContentSource="Header" />
              </ctrl:Ripple>
            </Grid>
            <ContentControl x:Name="AdditionalContentControl" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Content="{TemplateBinding Header}" ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(p:TreeViewAssist.AdditionalTemplate)}" ContentTemplateSelector="{Binding RelativeSource={RelativeSource Self}, Path=(p:TreeViewAssist.AdditionalTemplateSelector)}" Visibility="Collapsed" />
            <StackPanel x:Name="ItemsPanel" Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Margin="-16 0 0 0">
              <StackPanel.Height>
                <MultiBinding Converter="{x:Static c:MathConverter.Multiply}">
                  <Binding ElementName="ItemsHost" Path="ActualHeight" />
                  <Binding ElementName="ScaleHost" Path="Scale" />
                </MultiBinding>
              </StackPanel.Height>
              <ItemsPresenter x:Name="ItemsHost" VerticalAlignment="Top" Opacity="0" Visibility="Collapsed" />
            </StackPanel>
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:TreeViewAssist.AdditionalTemplate), Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}, Mode=OneWay}" Value="Visible">
              <Setter TargetName="AdditionalContentControl" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:TreeViewAssist.AdditionalTemplateSelector), Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}, Mode=OneWay}" Value="Visible">
              <Setter TargetName="AdditionalContentControl" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:TreeViewAssist.ShowSelection)}" Value="False">
              <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="Ripple" Property="Feedback" Value="Transparent" />
              <Setter TargetName="SelectedBorder" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:TreeViewAssist.ExpanderSize" Value="16" />
    <Setter Property="p:TreeViewAssist.HasNoItemsExpanderVisibility" Value="{Binding RelativeSource={RelativeSource AncestorType=TreeView}, Path=(p:TreeViewAssist.HasNoItemsExpanderVisibility)}" />
    <Setter Property="p:TreeViewAssist.ShowSelection" Value="True" />
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.TreeView" TargetType="{x:Type TreeView}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{x:Null}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.TreeViewItem}" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentControl x:Name="ContentControl">
              <ctrl:DynamicScrollViewer x:Name="_tv_scrollviewer_" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </ctrl:DynamicScrollViewer>
            </ContentControl>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
              <Setter TargetName="_tv_scrollviewer_" Property="CanContentScroll" Value="true" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="True" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Checked}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:TreeViewAssist.HasNoItemsExpanderVisibility" Value="Hidden" />
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.Validation">
    <ControlTemplate.Resources>
      <DataTemplate DataType="{x:Type ValidationError}">
        <TextBlock MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}" Margin="2" HorizontalAlignment="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.HorizontalAlignment)}" FontSize="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.FontSize)}" Foreground="{DynamicResource MyNet.Brushes.Validation.Error}" Text="{Binding ErrorContent, Mode=OneTime}" TextWrapping="Wrap" UseLayoutRounding="false" />
      </DataTemplate>
    </ControlTemplate.Resources>
    <StackPanel>
      <AdornedElementPlaceholder Name="Placeholder" />
      <Border x:Name="DefaultErrorViewer" Background="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.Background)}" Visibility="Collapsed">
        <TextBlock MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}" Margin="0 2" HorizontalAlignment="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.HorizontalAlignment)}" FontSize="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.FontSize)}" Foreground="{DynamicResource MyNet.Brushes.Validation.Error}" Text="{Binding CurrentItem.ErrorContent, Mode=OneTime}" TextWrapping="Wrap" UseLayoutRounding="false" />
      </Border>
      <ctrl:PopupEx x:Name="ValidationPopup" AllowsTransparency="True" IsOpen="False" Placement="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.PopupPlacement)}" PlacementTarget="{Binding ElementName=Placeholder, Mode=OneWay}">
        <Border x:Name="PopupBorder" Background="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.Background)}">
          <TextBlock Margin="0 2" HorizontalAlignment="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.HorizontalAlignment)}" FontSize="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.FontSize)}" Foreground="{DynamicResource MyNet.Brushes.Validation.Error}" Text="{Binding CurrentItem.ErrorContent, Mode=OneTime}" TextWrapping="Wrap" UseLayoutRounding="false" />
        </Border>
      </ctrl:PopupEx>
    </StackPanel>
    <ControlTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.OnlyShowOnFocus)}" Value="False" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.UsePopup)}" Value="True" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.Suppress)}" Value="False" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.OnlyShowOnFocus)}" Value="False" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.UsePopup)}" Value="False" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.Suppress)}" Value="False" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter TargetName="DefaultErrorViewer" Property="Visibility" Value="Visible" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.OnlyShowOnFocus)}" Value="True" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.UsePopup)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter TargetName="ValidationPopup" Property="IsOpen" Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.OnlyShowOnFocus)}" Value="True" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.UsePopup)}" Value="False" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter TargetName="DefaultErrorViewer" Property="Visibility" Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(p:ValidationAssist.Background)}" Value="{x:Null}">
        <Setter TargetName="DefaultErrorViewer" Property="Background" Value="Transparent" />
        <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.Button.MetroWindow" TargetType="{x:Type ButtonBase}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Opacity" Value="0.8" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Background="{TemplateBinding Background}">
            <ContentControl x:Name="PART_ContentPresenter" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:BrushConverter.Opacity}, ConverterParameter={StaticResource MyNet.Opacity.Hovered}}" />
        <Setter Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Button.MetroWindow.Close" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.MetroWindow}">
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Red}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.White}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.WindowButtonCommands" TargetType="{x:Type mah:WindowButtonCommands}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Close" Value="{me:Resource Close}" />
    <Setter Property="DarkCloseButtonStyle" Value="{StaticResource MyNet.Styles.Button.MetroWindow.Close}" />
    <Setter Property="DarkMaxButtonStyle" Value="{StaticResource MyNet.Styles.Button.MetroWindow}" />
    <Setter Property="DarkMinButtonStyle" Value="{StaticResource MyNet.Styles.Button.MetroWindow}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Maximize" Value="{me:Resource Maximize}" />
    <Setter Property="Minimize" Value="{me:Resource Minimize}" />
    <Setter Property="Restore" Value="{me:Resource Restore}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type mah:WindowButtonCommands}">
          <StackPanel Orientation="Horizontal">
            <Button x:Name="PART_Min" Style="{TemplateBinding DarkMinButtonStyle}" Width="46" AutomationProperties.AutomationId="Minimize" AutomationProperties.Name="Minimize" Command="{x:Static SystemCommands.MinimizeWindowCommand}" Focusable="False" IsEnabled="{Binding IsMinButtonEnabled, RelativeSource={RelativeSource AncestorType={x:Type ctrl:ExtendedWindow}}}" ToolTip="{Binding Minimize, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UseLayoutRounding="True" Visibility="{Binding ShowMinButton, RelativeSource={RelativeSource AncestorType={x:Type ctrl:ExtendedWindow}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
              <Path Width="10" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L10,0 10,1 10,1 1,1 0,1z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" RenderOptions.EdgeMode="Aliased" SnapsToDevicePixels="True" Stretch="Uniform" />
            </Button>
            <Button x:Name="PART_Max" Style="{TemplateBinding DarkMaxButtonStyle}" Width="46" AutomationProperties.AutomationId="MaximizeRestore" AutomationProperties.Name="Maximize" Command="{x:Static SystemCommands.MaximizeWindowCommand}" Focusable="False" IsEnabled="{Binding IsMaxRestoreButtonEnabled, RelativeSource={RelativeSource AncestorType={x:Type ctrl:ExtendedWindow}}}" ToolTip="{Binding Maximize, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UseLayoutRounding="True" Visibility="{Binding ShowMaxRestoreButton, RelativeSource={RelativeSource AncestorType={x:Type ctrl:ExtendedWindow}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
              <!-- normal state -->
              <Path x:Name="PART_MaxPath" Width="10" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M1,1L1,11 11,11 11,1z M0,0L12,0 12,12 0,12z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" RenderOptions.EdgeMode="Aliased" SnapsToDevicePixels="True" Stretch="Uniform" />
            </Button>
            <Button x:Name="PART_Close" Style="{TemplateBinding DarkCloseButtonStyle}" Width="46" AutomationProperties.AutomationId="Close" AutomationProperties.Name="Close" Command="{x:Static SystemCommands.CloseWindowCommand}" Focusable="False" IsEnabled="{Binding RelativeSource={RelativeSource AncestorType={x:Type ctrl:ExtendedWindow}}, Path=IsCloseButtonEnabled, Mode=OneWay}" ToolTip="{Binding Close, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UseLayoutRounding="True">
              <Path Width="10" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="F1M8.583,8L13,12.424 12.424,13 8,8.583 3.576,13 3,12.424 7.417,8 3,3.576 3.576,3 8,7.417 12.424,3 13,3.576z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" RenderOptions.EdgeMode="Aliased" SnapsToDevicePixels="True" Stretch="Uniform" />
            </Button>
          </StackPanel>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ctrl:ExtendedWindow}}, Path=IsCloseButtonEnabled}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ctrl:ExtendedWindow}}, Path=IsAnyDialogOpen}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ctrl:ExtendedWindow}}, Path=IsCloseButtonEnabledWithDialog}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_Close" Property="IsEnabled" Value="False" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ctrl:ExtendedWindow}}, Path=WindowState}" Value="Maximized">
              <Setter TargetName="PART_Max" Property="AutomationProperties.Name" Value="Restore" />
              <Setter TargetName="PART_Max" Property="Command" Value="{x:Static SystemCommands.RestoreWindowCommand}" />
              <Setter TargetName="PART_Max" Property="ToolTip" Value="{Binding Restore, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
              <Setter TargetName="PART_MaxPath" Property="Data" Value="M1,4.56L1,14.56 11,14.56 11,4.56z M4,1L4,3.56 12,3.56 12,11 14,11 14,1z M3,0L15,0 15,12 12,12 12,15.56 0,15.56 0,3.56 3,3.56z" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Embedded.AutoSuggestBox.CharacterCounter" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Secondary}">
    <Setter Property="Margin" Value="0 0 16 0" />
    <Setter Property="Text">
      <Setter.Value>
        <MultiBinding StringFormat="{}{0} / {1}">
          <Binding Converter="{x:Static c:StringLengthValueConverter.Default}" Path="Text" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ctrl:AutoSuggestBox}}" />
          <Binding Path="MaxLength" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ctrl:AutoSuggestBox}}" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Visibility" Value="{Binding Path=(p:TextFieldAssist.CharacterCounterIsVisible), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:AutoSuggestBox}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Embedded.AutoSuggestBox.HelperText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Secondary}">
    <Setter Property="FontSize" Value="{Binding Path=(p:HintAssist.HelperTextFontSize), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Foreground" Value="{Binding Path=(p:HintAssist.HelperTextForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Opacity" Value="{Binding Path=(p:HintAssist.HelperTextOpacity), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Text" Value="{Binding Path=(p:HintAssist.HelperText), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
  </Style>
  <Storyboard x:Key="BadgeChangedStoryboard">
    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
      <EasingDoubleKeyFrame KeyTime="0" Value="1.4" />
      <EasingDoubleKeyFrame EasingFunction="{StaticResource BadgeEase}" KeyTime="0:0:0.3" Value="1" />
    </DoubleAnimationUsingKeyFrames>
    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
      <EasingDoubleKeyFrame KeyTime="0" Value="1.4" />
      <EasingDoubleKeyFrame EasingFunction="{StaticResource BadgeEase}" KeyTime="0:0:0.3" Value="1" />
    </DoubleAnimationUsingKeyFrames>
  </Storyboard>
  <Style x:Key="MyNet.Styles.Badged" TargetType="{x:Type ctrl:Badged}">
    <Setter Property="BadgeBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BadgeChangedStoryboard" Value="{StaticResource BadgeChangedStoryboard}" />
    <Setter Property="BadgeFontSize" Value="{StaticResource MyNet.Font.Size.Secondary}" />
    <Setter Property="BadgeFontWeight" Value="{StaticResource MyNet.Font.Weight.Button}" />
    <Setter Property="BadgeForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="BadgePlacementMode" Value="TopRight" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:Badged}">
          <Grid>
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <Border x:Name="PART_BadgeContainer" MinWidth="15" MinHeight="15" Padding="2" HorizontalAlignment="Left" VerticalAlignment="Top" Background="{TemplateBinding BadgeBackground}" CornerRadius="{TemplateBinding CornerRadius}" Opacity="{TemplateBinding BadgeOpacity}" RenderTransformOrigin=".5,.5" TextElement.FontSize="{TemplateBinding BadgeFontSize}" TextElement.FontWeight="{TemplateBinding BadgeFontWeight}">
              <Border.Visibility>
                <MultiBinding Converter="{x:Static c:MultipleBooleanToVisibilityConverter.AndCollapse}">
                  <Binding Path="IsBadgeSet" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                  <Binding Path="ShowBadge" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                </MultiBinding>
              </Border.Visibility>
              <Border.RenderTransform>
                <ScaleTransform ScaleX="1" ScaleY="1" />
              </Border.RenderTransform>
              <ContentControl Margin="1 0 1 0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Badge}" Focusable="False" Foreground="{TemplateBinding BadgeForeground}" IsTabStop="False" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="BadgePlacementMode" Value="TopLeft">
              <Setter TargetName="PART_BadgeContainer" Property="HorizontalAlignment" Value="Left" />
              <Setter TargetName="PART_BadgeContainer" Property="VerticalAlignment" Value="Top" />
            </Trigger>
            <Trigger Property="BadgePlacementMode" Value="Top">
              <Setter TargetName="PART_BadgeContainer" Property="HorizontalAlignment" Value="Center" />
              <Setter TargetName="PART_BadgeContainer" Property="VerticalAlignment" Value="Top" />
            </Trigger>
            <Trigger Property="BadgePlacementMode" Value="TopRight">
              <Setter TargetName="PART_BadgeContainer" Property="HorizontalAlignment" Value="Right" />
              <Setter TargetName="PART_BadgeContainer" Property="VerticalAlignment" Value="Top" />
            </Trigger>
            <Trigger Property="BadgePlacementMode" Value="Right">
              <Setter TargetName="PART_BadgeContainer" Property="HorizontalAlignment" Value="Right" />
              <Setter TargetName="PART_BadgeContainer" Property="VerticalAlignment" Value="Center" />
            </Trigger>
            <Trigger Property="BadgePlacementMode" Value="BottomRight">
              <Setter TargetName="PART_BadgeContainer" Property="HorizontalAlignment" Value="Right" />
              <Setter TargetName="PART_BadgeContainer" Property="VerticalAlignment" Value="Bottom" />
            </Trigger>
            <Trigger Property="BadgePlacementMode" Value="Bottom">
              <Setter TargetName="PART_BadgeContainer" Property="HorizontalAlignment" Value="Center" />
              <Setter TargetName="PART_BadgeContainer" Property="VerticalAlignment" Value="Bottom" />
            </Trigger>
            <Trigger Property="BadgePlacementMode" Value="BottomLeft">
              <Setter TargetName="PART_BadgeContainer" Property="HorizontalAlignment" Value="Left" />
              <Setter TargetName="PART_BadgeContainer" Property="VerticalAlignment" Value="Bottom" />
            </Trigger>
            <Trigger Property="BadgePlacementMode" Value="Left">
              <Setter TargetName="PART_BadgeContainer" Property="HorizontalAlignment" Value="Left" />
              <Setter TargetName="PART_BadgeContainer" Property="VerticalAlignment" Value="Center" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
  </Style>
  <Style x:Key="MyNet.Styles.Badged.Accent" TargetType="{x:Type ctrl:Badged}">
    <Setter Property="BadgeBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="BadgeForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ProgressBar.Embedded.BusyControl" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource MyNet.Styles.ProgressBar.Circular}">
    <Setter Property="FontSize" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=6}" />
    <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=0.2}" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=0.2}" />
    <Setter Property="p:ProgressBarAssist.BorderThickness" Value="3" />
    <Setter Property="p:ProgressBarAssist.InnerPadding" Value="{Binding Path=(p:ProgressBarAssist.StrokeThickness), RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Add}, ConverterParameter=2}" />
    <Setter Property="p:ProgressBarAssist.ShowSecondProgress" Value="{Binding IsCancelling, Converter={x:Static c:NotBooleanConverter.Default}}" />
    <Setter Property="p:ProgressBarAssist.StrokeThickness" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=15}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsCancelling}" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Negative}" />
      </DataTrigger>
      <Trigger Property="IsIndeterminate" Value="True">
        <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ProgressBarAssist.BorderThickness" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=15}" />
        <Setter Property="p:ProgressBarAssist.InnerPadding" Value="{Binding Path=(p:ProgressBarAssist.BorderThickness), RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Add}, ConverterParameter=4}" />
        <Setter Property="p:ProgressBarAssist.StrokeThickness" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=20}" />
      </Trigger>
      <DataTrigger Binding="{Binding Value, RelativeSource={RelativeSource Self}, Converter={x:Static c:ComparaisonToBooleanConverter.IsGreaterThan}, ConverterParameter=0}" Value="True">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=BorderBrush}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ProgressBar.Embedded.BusyControl.Accent" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource MyNet.Styles.ProgressBar.Embedded.BusyControl}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ProgressBar.Embedded.BusyControl.Foreground" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource MyNet.Styles.ProgressBar.Embedded.BusyControl}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
  </Style>
  <DataTemplate x:Key="MyNet.DataTemplates.IndeterminateBusy.Small" DataType="{x:Type busy:IndeterminateBusy}">
    <Grid>
      <ProgressBar Style="{Binding Path=(p:ThemeAssist.Style), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" p:ProgressBarAssist.BorderThickness="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=10}" p:ProgressBarAssist.InnerPadding="{Binding Path=(p:ProgressBarAssist.BorderThickness), RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Add}, ConverterParameter=4}" p:ProgressBarAssist.ShowSecondProgress="True" p:ProgressBarAssist.Stroke="{me:BrushBinding SelfPath=BorderBrush}" p:ProgressBarAssist.StrokeThickness="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=15}" ClipToBounds="False" FontSize="{StaticResource MyNet.Font.Size}" IsIndeterminate="True" ToolTip="{Binding Message}" />
    </Grid>
  </DataTemplate>
  <DataTemplate x:Key="MyNet.DataTemplates.Calendar.Appointment.Hour" DataType="{x:Type models:IAppointment}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="5" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{me:DisplayDateTime StartDate, Format=t}" />
      <TextBlock Grid.Column="1" Margin="{StaticResource MyNet.Margins.Default.Horizontal}" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="-" />
      <TextBlock Grid.Column="2" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{me:DisplayDateTime EndDate, Format=t}" />
      <ContentPresenter Grid.Column="4" Content="{Binding}" />
    </Grid>
  </DataTemplate>
  <DataTemplate x:Key="MyNet.DataTemplates.Calendar.Appointment.Day" DataType="{x:Type models:IAppointment}">
    <ctrl:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
      <StackPanel Opacity="{StaticResource MyNet.Opacity.Secondary}" Orientation="Horizontal">
        <TextBlock Text="{me:DisplayDateTime StartDate, Format=dd}" />
      </StackPanel>
      <ContentPresenter Content="{Binding}" />
    </ctrl:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="MyNet.DataTemplates.Calendar.Appointment.DayAndMonth" DataType="{x:Type models:IAppointment}">
    <ctrl:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
      <StackPanel Opacity="{StaticResource MyNet.Opacity.Secondary}" Orientation="Horizontal">
        <TextBlock Text="{me:DisplayDateTime StartDate, Format=M}" />
      </StackPanel>
      <ContentPresenter Content="{Binding}" />
    </ctrl:SimpleStackPanel>
  </DataTemplate>
  <Style x:Key="MyNet.Styles.CalendarAppointment" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem.Card}">
    <Setter Property="Height" Value="Auto" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="3" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Checked}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.DaysByMonth" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Hour}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.DaysByMonth.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.DaysByMonth}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.MonthsByYear" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Day}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.MonthsByYear.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.MonthsByYear}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.YearsByDecade" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.DayAndMonth}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.YearsByDecade.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.YearsByDecade}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.HoursByWeek" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Hour}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.HoursByWeek.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.HoursByWeek}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.HoursByDay" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Hour}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.HoursByDay.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.HoursByDay}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.DaysByYear" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Hour}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.DaysByYear.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.DaysByYear}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.DaysRange" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Hour}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.DaysRange.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.DaysRange}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate" TargetType="{x:Type ctrl:CalendarAppointment}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="0 1" />
    <Setter Property="Padding" Value="5" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:CalendarAppointment}">
          <Border x:Name="BackBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                    <VisualTransition.GeneratedEasingFunction>
                      <CircleEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Normal" />
                <VisualState Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unselected" />
              </VisualStateGroup>
              <VisualStateGroup Name="FocusStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Unfocused" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Focused">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Border x:Name="MouseOverBorder" Background="{TemplateBinding p:ListBoxItemAssist.IsMouseOverBackground}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" SnapsToDevicePixels="True" />
              <Border x:Name="SelectedBorder" Background="{TemplateBinding p:ListBoxItemAssist.IsSelectedBackground}" BorderBrush="{TemplateBinding p:ListBoxItemAssist.IsSelectedBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" RenderTransformOrigin="0.5,0.5" />
              <ctrl:Ripple x:Name="Ripple" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Feedback="{TemplateBinding Foreground}" Focusable="False" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(p:ComboBoxAssist.ShowSelectedItem), RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Height" Value="0" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="False">
              <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="Ripple" Property="Feedback" Value="Transparent" />
              <Setter TargetName="SelectedBorder" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Checked}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.DaysByMonth" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Hour}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.DaysByMonth.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.DaysByMonth}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.MonthsByYear" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Day}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.MonthsByYear.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.MonthsByYear}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.YearsByDecade" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.DayAndMonth}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.YearsByDecade.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.YearsByDecade}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.HoursByWeek" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Hour}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.HoursByWeek.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.HoursByWeek}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.HoursByDay" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Hour}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.HoursByDay.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.HoursByDay}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.DaysByYear" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Hour}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.DaysByYear.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.DaysByYear}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.DaysRange" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Calendar.Appointment.Hour}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarAppointment.Alternate.DaysRange.Accent" TargetType="{x:Type ctrl:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.DaysRange}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ContentControl.Calendar.DaysByYear.Week" TargetType="{x:Type ContentControl}">
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="TextBlock.FontSize" Value="{StaticResource MyNet.Font.Size.Caption}" />
    <Setter Property="TextBlock.FontWeight" Value="{StaticResource MyNet.Font.Weight.Header}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="MyNet.Styles.Card.Elevation" TargetType="{x:Type ctrl:Card}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ClipContent" Value="True" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:Card}">
          <Grid Background="Transparent">
            <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
              <AdornerDecorator.OpacityMask>
                <MultiBinding Converter="{x:Static c:ShadowEdgeConverter.Default}">
                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="(p:ElevationAssist.Elevation)" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="(p:ShadowAssist.ShadowEdges)" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </AdornerDecorator.OpacityMask>
              <Border CornerRadius="{Binding UniformCornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleToCornerRadiusConverter.All}}" Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}">
                <Border x:Name="PART_ClipBorder" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Clip="{TemplateBinding ContentClip}" CornerRadius="{Binding UniformCornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleToCornerRadiusConverter.All}}" />
              </Border>
            </AdornerDecorator>
            <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ClipContent" Value="True">
              <Setter TargetName="ContentPresenter" Property="Clip" Value="{Binding ContentClip, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Card.Elevation.Application" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Card.Elevation.Application.Dark" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Dark}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Card.Elevation.Application.Light" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Card.Elevation.Primary" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Card.Elevation.Accent" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Card.Elevation.Custom" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation}">
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Card.Elevation.Foreground" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation.Custom}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.Card.Outlined" TargetType="{x:Type ctrl:Card}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:Card}">
          <Grid Background="Transparent">
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding UniformCornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleToCornerRadiusConverter.All}}">
              <Border x:Name="PART_ClipBorder" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" Clip="{TemplateBinding ContentClip}">
                <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" />
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ClipContent" Value="True">
              <Setter TargetName="ContentPresenter" Property="Clip" Value="{Binding ContentClip, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MyNet.Styles.CodeBlock" TargetType="{x:Type ctrl:CodeBlock}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="Border.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="FontFamily" Value="{StaticResource MyNet.Font.Family.FiraCode}" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="FontWeight" Value="{StaticResource MyNet.Font.Weight}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:CodeBlock}">
          <Border x:Name="ContentBorder" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding Border.CornerRadius}">
            <ContentPresenter Margin="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding SyntaxContent}" ScrollViewer.CanContentScroll="False" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MyNet.Styles.Slider.Embedded.ColorCanvas" TargetType="{x:Type Slider}" BasedOn="{StaticResource MyNet.Styles.Slider.Colors.ARGB}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Panel.ZIndex" Value="1" />
    <Setter Property="p:SliderAssist.BarSize" Value="13" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorEyeDropper" TargetType="{x:Type ctrl:ColorEyeDropper}">
    <Setter Property="EyeDropperCursor" Value="{StaticResource MyNet.Cursors.EyeDropper}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="PreviewContentTemplate">
      <Setter.Value>
        <DataTemplate DataType="{x:Type ctrl:ColorEyePreviewData}">
          <Grid Width="100" Height="100">
            <Ellipse HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="{DynamicResource MyNet.Brushes.Application.Foreground}" StrokeThickness="2" />
            <Image x:Name="PART_PreviewImage" Margin="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Clip="{Binding RenderedGeometry, ElementName=ClippingEllipse}" RenderOptions.BitmapScalingMode="NearestNeighbor" Source="{Binding PreviewImage}" />
            <Path Stroke="{DynamicResource MyNet.Brushes.Application.Foreground}" StrokeThickness="2">
              <Path.Data>
                <PathGeometry Figures=" m 0 50 40 0  m 10 10 0 40  m 10 -50 40 0  m -50 -50 0 40 m -10 0 H40 H60 V60 H40 z" po:Freeze="true" />
              </Path.Data>
            </Path>
            <Ellipse x:Name="ClippingEllipse" Margin="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Hidden" />
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ColorEyeDropper}">
          <ContentControl Content="{TemplateBinding Content}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.ColorHSVPicker" TargetType="{x:Type ctrl:ColorHSVPicker}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle}" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ColorHSVPicker}">
          <ctrl:Card Padding="0" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UniformCornerRadius="{TemplateBinding p:ThemeAssist.CornerRadius}">
            <Grid>
              <Rectangle>
                <Rectangle.Fill>
                  <MultiBinding Converter="{x:Static c:HSVToSolidBrushConverter.Default}">
                    <Binding Path="SelectedHSVColor.Hue" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Source="1" />
                    <Binding Source="1" />
                  </MultiBinding>
                </Rectangle.Fill>
              </Rectangle>
              <Rectangle Fill="White">
                <Rectangle.OpacityMask>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <GradientStop Offset="0" Color="White" />
                    <GradientStop Offset="1.0" Color="Transparent" />
                  </LinearGradientBrush>
                </Rectangle.OpacityMask>
              </Rectangle>
              <Rectangle Fill="Black">
                <Rectangle.OpacityMask>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="Transparent" />
                    <GradientStop Offset="1.0" Color="Black" />
                  </LinearGradientBrush>
                </Rectangle.OpacityMask>
              </Rectangle>
              <Canvas Name="PART_SaturationBrightnessPicker" Background="Transparent" ClipToBounds="True" Focusable="False">
                <Thumb Name="PART_SaturationBrightnessPickerThumb" Canvas.Left="20" Canvas.Top="20">
                  <Thumb.Template>
                    <ControlTemplate>
                      <Ellipse Width="24" Height="24" Margin="-12 -12 0 0" Fill="Transparent" Stroke="White" StrokeThickness="2" />
                    </ControlTemplate>
                  </Thumb.Template>
                </Thumb>
              </Canvas>
            </Grid>
          </ctrl:Card>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Embedded.Expander.Vertical" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander}">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="RenderTransformOrigin" Value="0.5 0.5" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType={x:Type ctrl:ContentExpander}}}" Value="Up">
        <Setter Property="RenderTransform">
          <Setter.Value>
            <RotateTransform Angle="180" />
          </Setter.Value>
        </Setter>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Embedded.Expander.Horizontal" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Vertical}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType={x:Type ctrl:ContentExpander}}}" Value="Left">
        <Setter Property="RenderTransform">
          <Setter.Value>
            <RotateTransform Angle="90" />
          </Setter.Value>
        </Setter>
      </DataTrigger>
      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType={x:Type ctrl:ContentExpander}}}" Value="Right">
        <Setter Property="RenderTransform">
          <Setter.Value>
            <RotateTransform Angle="-90" />
          </Setter.Value>
        </Setter>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ContentExpander" TargetType="{x:Type ctrl:ContentExpander}" BasedOn="{StaticResource MyNet.Styles.Expander}">
    <Setter Property="CollapsedSize" Value="47" />
    <Setter Property="DurationAnimation" Value="{StaticResource ExpandKeyTime}" />
    <Setter Property="IsExpanded" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ContentExpander}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <DockPanel>
                <!-- Header content -->
                <ContentPresenter x:Name="HeaderSite" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" />
                <Border Name="ContentSite">
                  <Grid Name="ContentPanel" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                    <ContentPresenter x:Name="PART_Content" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Focusable="False" />
                  </Grid>
                </Border>
              </DockPanel>
              <ToggleButton x:Name="PART_ToggleButton" Style="{TemplateBinding ToggleButtontyle}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Down">
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Top" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ToggleButtontyle" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Vertical}" />
  </Style>
  <Style x:Key="MyNet.Styles.ContentExpander.Horizontal" TargetType="{x:Type ctrl:ContentExpander}" BasedOn="{StaticResource MyNet.Styles.ContentExpander}">
    <Setter Property="ExpandDirection" Value="Right" />
    <Setter Property="ToggleButtontyle" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Horizontal}" />
  </Style>
  <DataTemplate x:Key="MyNet.DataTemplates.ManyItems.Large">
    <ctrl:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
      <ctrl:PackIcon Width="100" Height="100" HorizontalAlignment="Center" VerticalAlignment="Center" Kind="CheckboxesMarkedOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}" HorizontalAlignment="Center" Text="{me:Resource PleaseSelectOneItem}" TextAlignment="Center" />
    </ctrl:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="MyNet.DataTemplates.ManyItems.Medium">
    <ctrl:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
      <ctrl:PackIcon Width="60" Height="60" HorizontalAlignment="Center" VerticalAlignment="Center" Kind="CheckboxesMarkedOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}" HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size}" Text="{me:Resource PleaseSelectOneItem}" TextAlignment="Center" />
    </ctrl:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="MyNet.DataTemplates.NoItems.Large">
    <ctrl:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
      <ctrl:PackIcon Width="100" Height="100" HorizontalAlignment="Center" VerticalAlignment="Center" Kind="CheckboxBlankOffOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}" HorizontalAlignment="Center" Text="{me:Resource PleaseSelectItem}" TextAlignment="Center" />
    </ctrl:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="MyNet.DataTemplates.NoItems.Medium">
    <ctrl:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
      <ctrl:PackIcon Width="100" Height="100" HorizontalAlignment="Center" VerticalAlignment="Center" Kind="CheckboxBlankOffOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}" HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size}" Text="{me:Resource PleaseSelectItem}" TextAlignment="Center" />
    </ctrl:SimpleStackPanel>
  </DataTemplate>
  <Style x:Key="MyNet.Styles.DrawerHost" TargetType="{x:Type ctrl:DrawerHost}">
    <Setter Property="BottomDrawerBackground" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="ClipToBounds" Value="True" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="LeftDrawerBackground" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="OverlayBackground" Value="{DynamicResource MyNet.Brushes.Overlay}" />
    <Setter Property="RightDrawerBackground" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:DrawerHost}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="AllDrawers">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="AllClosed" To="AnyOpen">
                    <Storyboard>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentCover" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                      </BooleanAnimationUsingKeyFrames>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Tag">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                      </BooleanAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentCover" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="AnyOpen" To="AllClosed">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentCover" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="AnyOpen">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_ContentCover" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentCover" Storyboard.TargetProperty="IsHitTestVisible">
                      <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                    </BooleanAnimationUsingKeyFrames>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Tag">
                      <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                    </BooleanAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="AllClosed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_ContentCover" Storyboard.TargetProperty="Opacity" To="0" />
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentCover" Storyboard.TargetProperty="IsHitTestVisible">
                      <DiscreteBooleanKeyFrame Value="False" />
                    </BooleanAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="LeftDrawer">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="LeftDrawerClosed" To="LeftDrawerOpen">
                    <Storyboard>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="PART_LeftDrawer" Storyboard.TargetProperty="Margin">
                        <EasingThicknessKeyFrame KeyTime="0:0:0.4" Value="0">
                          <EasingThicknessKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingThicknessKeyFrame.EasingFunction>
                        </EasingThicknessKeyFrame>
                      </ThicknessAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="LeftDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.04" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="LeftDrawerOpen" To="LeftDrawerClosed">
                    <Storyboard>
                      <ThicknessAnimation Storyboard.TargetName="PART_LeftDrawer" Storyboard.TargetProperty="Margin" Duration="0:0:0.4">
                        <ThicknessAnimation.EasingFunction>
                          <SineEase EasingMode="EaseOut" />
                        </ThicknessAnimation.EasingFunction>
                      </ThicknessAnimation>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="LeftDrawerShadow" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.36" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="LeftDrawerOpen">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="LeftDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="PART_LeftDrawer" Storyboard.TargetProperty="Margin" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="LeftDrawerClosed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="LeftDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="0" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="PART_LeftDrawer" Storyboard.TargetProperty="Margin" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="RightDrawer">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="RightDrawerClosed" To="RightDrawerOpen">
                    <Storyboard>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="PART_RightDrawer" Storyboard.TargetProperty="Margin">
                        <EasingThicknessKeyFrame KeyTime="0:0:0.4" Value="0">
                          <EasingThicknessKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingThicknessKeyFrame.EasingFunction>
                        </EasingThicknessKeyFrame>
                      </ThicknessAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="RightDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.04" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="RightDrawerOpen" To="RightDrawerClosed">
                    <Storyboard>
                      <ThicknessAnimation Storyboard.TargetName="PART_RightDrawer" Storyboard.TargetProperty="Margin" Duration="0:0:0.4">
                        <ThicknessAnimation.EasingFunction>
                          <SineEase EasingMode="EaseOut" />
                        </ThicknessAnimation.EasingFunction>
                      </ThicknessAnimation>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RightDrawerShadow" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.36" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="RightDrawerOpen">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="RightDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="PART_RightDrawer" Storyboard.TargetProperty="Margin" To="0 0 0 0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="RightDrawerClosed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="RightDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="0" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="PART_RightDrawer" Storyboard.TargetProperty="Margin" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TopDrawer">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="TopDrawerClosed" To="TopDrawerOpen">
                    <Storyboard>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="PART_TopDrawer" Storyboard.TargetProperty="Margin">
                        <EasingThicknessKeyFrame KeyTime="0:0:0.4" Value="0">
                          <EasingThicknessKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingThicknessKeyFrame.EasingFunction>
                        </EasingThicknessKeyFrame>
                      </ThicknessAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="TopDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.04" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="TopDrawerOpen" To="TopDrawerClosed">
                    <Storyboard>
                      <ThicknessAnimation Storyboard.TargetName="PART_TopDrawer" Storyboard.TargetProperty="Margin" Duration="0:0:0.4">
                        <ThicknessAnimation.EasingFunction>
                          <SineEase EasingMode="EaseOut" />
                        </ThicknessAnimation.EasingFunction>
                      </ThicknessAnimation>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="TopDrawerShadow" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.36" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="TopDrawerOpen">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="TopDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="PART_TopDrawer" Storyboard.TargetProperty="Margin" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="TopDrawerClosed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="TopDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="0" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="PART_TopDrawer" Storyboard.TargetProperty="Margin" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BottomDrawer">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="BottomDrawerClosed" To="BottomDrawerOpen">
                    <Storyboard>
                      <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="PART_BottomDrawer" Storyboard.TargetProperty="Margin">
                        <EasingThicknessKeyFrame KeyTime="0:0:0.4" Value="0">
                          <EasingThicknessKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingThicknessKeyFrame.EasingFunction>
                        </EasingThicknessKeyFrame>
                      </ThicknessAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="BottomDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.04" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="BottomDrawerOpen" To="BottomDrawerClosed">
                    <Storyboard>
                      <ThicknessAnimation Storyboard.TargetName="PART_BottomDrawer" Storyboard.TargetProperty="Margin" Duration="0:0:0.4">
                        <ThicknessAnimation.EasingFunction>
                          <SineEase EasingMode="EaseOut" />
                        </ThicknessAnimation.EasingFunction>
                      </ThicknessAnimation>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BottomDrawerShadow" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.36" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="BottomDrawerOpen">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BottomDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="PART_BottomDrawer" Storyboard.TargetProperty="Margin" To="0 0 0 0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="BottomDrawerClosed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BottomDrawerShadow" Storyboard.TargetProperty="Opacity" From="0" To="0" Duration="0" />
                    <ThicknessAnimation Storyboard.TargetName="PART_BottomDrawer" Storyboard.TargetProperty="Margin" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="RootGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <AdornerDecorator Grid.Row="1" Grid.Column="1">
                <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}">
                  <ContentPresenter.Tag>
                    <sys:Boolean>False</sys:Boolean>
                  </ContentPresenter.Tag>
                </ContentPresenter>
              </AdornerDecorator>
              <Grid x:Name="PART_ContentCover" Grid.Row="0" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="3" Focusable="False" IsHitTestVisible="False" Opacity="0">
                <Grid.Style>
                  <Style TargetType="Grid">
                    <Setter Property="Background" Value="{Binding OverlayBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding OpenMode, RelativeSource={RelativeSource TemplatedParent}}" Value="Standard">
                        <Setter Property="Background" Value="{x:Null}" />
                      </DataTrigger>
                      <Trigger Property="Opacity" Value="0">
                        <Setter Property="Visibility" Value="Hidden" />
                      </Trigger>
                    </Style.Triggers>
                  </Style>
                </Grid.Style>
              </Grid>
              <Grid x:Name="PART_LeftDrawer" Margin="{Binding RelativeSource={RelativeSource Self}, Path=ActualWidth, Converter={x:Static c:DrawerOffsetConverter.Default}, ConverterParameter={x:Static Dock.Left}}" HorizontalAlignment="Left" VerticalAlignment="Stretch" Panel.ZIndex="{TemplateBinding LeftDrawerZIndex}">
                <Grid.Style>
                  <Style TargetType="Grid">
                    <Setter Property="Grid.Column" Value="1" />
                    <Setter Property="Grid.Row" Value="1" />
                    <Setter Property="Grid.RowSpan" Value="1" />
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding OpenMode, RelativeSource={RelativeSource TemplatedParent}}" Value="Standard">
                        <Setter Property="Grid.Column" Value="0" />
                        <Setter Property="Grid.Row" Value="0" />
                        <Setter Property="Grid.RowSpan" Value="3" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Grid.Style>
                <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
                  <Border x:Name="LeftDrawerShadow" Background="{TemplateBinding LeftDrawerBackground}" CornerRadius="{TemplateBinding LeftDrawerCornerRadius}" Opacity="0">
                    <Border.Style>
                      <Style TargetType="Border">
                        <Setter Property="Effect" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" />
                      </Style>
                    </Border.Style>
                  </Border>
                </AdornerDecorator>
                <ContentPresenter Content="{TemplateBinding LeftDrawerContent}" ContentStringFormat="{TemplateBinding LeftDrawerContentStringFormat}" ContentTemplate="{TemplateBinding LeftDrawerContentTemplate}" IsEnabled="{TemplateBinding IsLeftDrawerOpen}" Validation.ErrorTemplate="{x:Null}" />
              </Grid>
              <Grid x:Name="PART_RightDrawer" Margin="{Binding RelativeSource={RelativeSource Self}, Path=ActualWidth, Converter={x:Static c:DrawerOffsetConverter.Default}, ConverterParameter={x:Static Dock.Right}}" HorizontalAlignment="Right" VerticalAlignment="Stretch" Panel.ZIndex="{TemplateBinding RightDrawerZIndex}">
                <Grid.Style>
                  <Style TargetType="Grid">
                    <Setter Property="Grid.Column" Value="1" />
                    <Setter Property="Grid.Row" Value="1" />
                    <Setter Property="Grid.RowSpan" Value="1" />
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding OpenMode, RelativeSource={RelativeSource TemplatedParent}}" Value="Standard">
                        <Setter Property="Grid.Column" Value="2" />
                        <Setter Property="Grid.Row" Value="0" />
                        <Setter Property="Grid.RowSpan" Value="3" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Grid.Style>
                <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
                  <Border x:Name="RightDrawerShadow" Background="{TemplateBinding RightDrawerBackground}" CornerRadius="{TemplateBinding RightDrawerCornerRadius}" Opacity="0">
                    <Border.Style>
                      <Style TargetType="Border">
                        <Setter Property="Effect" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" />
                      </Style>
                    </Border.Style>
                  </Border>
                </AdornerDecorator>
                <ContentPresenter Content="{TemplateBinding RightDrawerContent}" ContentStringFormat="{TemplateBinding RightDrawerContentStringFormat}" ContentTemplate="{TemplateBinding RightDrawerContentTemplate}" IsEnabled="{TemplateBinding IsRightDrawerOpen}" Validation.ErrorTemplate="{x:Null}" />
              </Grid>
              <Grid x:Name="PART_TopDrawer" Margin="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight, Converter={x:Static c:DrawerOffsetConverter.Default}, ConverterParameter={x:Static Dock.Top}}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Panel.ZIndex="{TemplateBinding TopDrawerZIndex}">
                <Grid.Style>
                  <Style TargetType="Grid">
                    <Setter Property="Grid.Column" Value="1" />
                    <Setter Property="Grid.Row" Value="1" />
                    <Setter Property="Grid.RowSpan" Value="1" />
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding OpenMode, RelativeSource={RelativeSource TemplatedParent}}" Value="Standard">
                        <Setter Property="Grid.Column" Value="0" />
                        <Setter Property="Grid.ColumnSpan" Value="3" />
                        <Setter Property="Grid.Row" Value="0" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Grid.Style>
                <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
                  <Border x:Name="TopDrawerShadow" Background="{TemplateBinding TopDrawerBackground}" CornerRadius="{TemplateBinding TopDrawerCornerRadius}" Opacity="0">
                    <Border.Style>
                      <Style TargetType="Border">
                        <Setter Property="Effect" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" />
                      </Style>
                    </Border.Style>
                  </Border>
                </AdornerDecorator>
                <ContentPresenter Content="{TemplateBinding TopDrawerContent}" ContentStringFormat="{TemplateBinding TopDrawerContentStringFormat}" ContentTemplate="{TemplateBinding TopDrawerContentTemplate}" IsEnabled="{TemplateBinding IsTopDrawerOpen}" Validation.ErrorTemplate="{x:Null}" />
              </Grid>
              <Grid x:Name="PART_BottomDrawer" Margin="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight, Converter={x:Static c:DrawerOffsetConverter.Default}, ConverterParameter={x:Static Dock.Bottom}}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Panel.ZIndex="{TemplateBinding BottomDrawerZIndex}">
                <Grid.Style>
                  <Style TargetType="Grid">
                    <Setter Property="Grid.Column" Value="1" />
                    <Setter Property="Grid.Row" Value="1" />
                    <Setter Property="Grid.RowSpan" Value="1" />
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding OpenMode, RelativeSource={RelativeSource TemplatedParent}}" Value="Standard">
                        <Setter Property="Grid.Column" Value="0" />
                        <Setter Property="Grid.ColumnSpan" Value="3" />
                        <Setter Property="Grid.Row" Value="2" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Grid.Style>
                <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
                  <Border x:Name="BottomDrawerShadow" Background="{TemplateBinding BottomDrawerBackground}" CornerRadius="{TemplateBinding BottomDrawerCornerRadius}" Opacity="0">
                    <Border.Style>
                      <Style TargetType="Border">
                        <Setter Property="Effect" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" />
                      </Style>
                    </Border.Style>
                  </Border>
                </AdornerDecorator>
                <ContentPresenter Content="{TemplateBinding BottomDrawerContent}" ContentStringFormat="{TemplateBinding BottomDrawerContentStringFormat}" ContentTemplate="{TemplateBinding BottomDrawerContentTemplate}" IsEnabled="{TemplateBinding IsBottomDrawerOpen}" Validation.ErrorTemplate="{x:Null}" />
              </Grid>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TopDrawerBackground" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Popup}" />
  </Style>
  <Style x:Key="MyNet.Styles.ExtendedWindow" TargetType="{x:Type ctrl:ExtendedWindow}" BasedOn="{StaticResource {x:Type Window}}">
    <Style.Resources>
      <Style TargetType="{x:Type mah:WindowButtonCommands}" BasedOn="{StaticResource MyNet.Styles.WindowButtonCommands}" />
    </Style.Resources>
    <Setter Property="AllowDrop" Value="True" />
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Application.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FontFamily" Value="{me:RobotoFont}" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="FontWeight" Value="{StaticResource MyNet.Font.Weight}" />
    <Setter Property="GlowColor" Value="{DynamicResource MyNet.Colors.Application.Border}" />
    <Setter Property="Height" Value="600" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="MinHeight" Value="320" />
    <Setter Property="MinWidth" Value="460" />
    <Setter Property="NonActiveBorderBrush" Value="{DynamicResource MyNet.Brushes.Application.Border.Inactive}" />
    <Setter Property="NonActiveGlowColor" Value="{DynamicResource MyNet.Colors.Application.Border.Inactive}" />
    <Setter Property="NonActiveWindowTitleBrush" Value="Transparent" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="RenderOptions.BitmapScalingMode" Value="Fant" />
    <Setter Property="RenderOptions.CachingHint" Value="Cache" />
    <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
    <Setter Property="RenderOptions.EdgeMode" Value="Unspecified" />
    <Setter Property="ResizeBorderThickness" Value="6" />
    <Setter Property="ShowIconOnTitleBar" Value="False" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ExtendedWindow}">
          <Grid Background="{TemplateBinding Background}" LayoutTransform="{Binding LayoutTransform, RelativeSource={RelativeSource TemplatedParent}}" RenderTransform="{Binding RenderTransform, RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="True">
            <AdornerDecorator>
              <Grid UseLayoutRounding="False">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={x:Static c:ThicknessToDoubleConverter.Left}}" />
                  <!-- icon -->
                  <ColumnDefinition Width="Auto" />
                  <!-- left window commands, title, right window commands -->
                  <ColumnDefinition Width="*" />
                  <!-- min,max,close buttons -->
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={x:Static c:ThicknessToDoubleConverter.Right}}" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={x:Static c:ThicknessToDoubleConverter.Top}}" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Rectangle x:Name="PART_WindowTitleBackground" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3" Fill="{TemplateBinding WindowTitleBrush}" Focusable="False" StrokeThickness="0" />
                <!-- icon -->
                <ContentControl x:Name="PART_Icon" Grid.Row="1" Grid.Column="1" Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" MinWidth="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" Padding="10" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Panel.ZIndex="6" Content="{TemplateBinding Icon}" ContentTemplate="{TemplateBinding IconTemplate}" Focusable="False" Foreground="{TemplateBinding TitleForeground}" Visibility="{TemplateBinding ShowIconOnTitleBar, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                <mah:MetroThumb x:Name="PART_WindowTitleThumb" Style="{StaticResource MyNet.Styles.Thumb}" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="5" Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Top" Panel.ZIndex="6" UseLayoutRounding="True" />
                <DockPanel Grid.Row="1" Grid.Column="2" VerticalAlignment="Top" Panel.ZIndex="6" Focusable="False">
                  <!-- the left window commands -->
                  <mah:ContentPresenterEx x:Name="PART_LeftWindowCommands" Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" VerticalAlignment="Top" Content="{Binding LeftWindowCommands, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" DockPanel.Dock="Left" Focusable="False" TextElement.Foreground="{TemplateBinding TitleForeground}" />
                  <!-- the right window commands -->
                  <mah:ContentPresenterEx x:Name="PART_RightWindowCommands" Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" VerticalAlignment="Top" Content="{Binding RightWindowCommands, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" DockPanel.Dock="Right" Focusable="False" TextElement.Foreground="{TemplateBinding TitleForeground}" />
                  <!-- the title bar -->
                  <mah:MetroThumbContentControl x:Name="PART_TitleBar" Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" HorizontalAlignment="{TemplateBinding TitleAlignment}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Content="{TemplateBinding Title}" ContentCharacterCasing="{TemplateBinding TitleCharacterCasing}" ContentTemplate="{TemplateBinding TitleTemplate}" Focusable="False" Foreground="{TemplateBinding Foreground}" />
                </DockPanel>
                <!-- the window button commands -->
                <mah:ContentPresenterEx x:Name="PART_WindowButtonCommands" Grid.Row="1" Grid.RowSpan="2" Grid.Column="3" Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" VerticalAlignment="Top" Panel.ZIndex="6" Content="{Binding WindowButtonCommands, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" Focusable="False" TextElement.Foreground="{TemplateBinding TitleForeground}" />
                <!-- the main window content -->
                <mah:MetroContentControl x:Name="PART_Content" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="5" FocusVisualStyle="{x:Null}" IsTabStop="False" OnlyLoadTransition="True" TransitionsEnabled="{TemplateBinding WindowTransitionsEnabled}" UseLayoutRounding="True">
                  <mah:ContentPresenterEx x:Name="PART_ContentPresenter" UseLayoutRounding="False" />
                </mah:MetroContentControl>
                <!-- disables the main content when a modal flyout is shown -->
                <Rectangle Name="PART_FlyoutModal" Grid.Row="1" Grid.RowSpan="2" Grid.Column="1" Grid.ColumnSpan="3" Fill="{TemplateBinding FlyoutOverlayBrush}" Visibility="Hidden" />
                <!-- Busy container -->
                <Grid Grid.Row="1" Grid.RowSpan="2" Grid.Column="1" Grid.ColumnSpan="3" Panel.ZIndex="5" p:BusyAssist.AssociatedControl="{Binding ElementName=PART_Content}" p:BusyAssist.AttachService="{TemplateBinding BusyService}" FocusVisualStyle="{x:Null}" Visibility="{Binding BusyService, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
                <!-- Dialog container -->
                <Grid x:Name="PART_MetroActiveDialogContainer" Grid.Row="1" Grid.RowSpan="2" Grid.Column="1" Grid.ColumnSpan="3" Panel.ZIndex="5" p:DialogAssist.AssociatedControl="{Binding ElementName=PART_Content}" p:DialogAssist.AttachService="{TemplateBinding DialogService}" FocusVisualStyle="{x:Null}" Visibility="{Binding DialogService, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
              </Grid>
            </AdornerDecorator>
            <Border x:Name="PART_Border" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{x:Null}" BorderBrush="{Binding GlowColor, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BrushConverter.Default}}" BorderThickness="{TemplateBinding BorderThickness}" UseLayoutRounding="True" />
            <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom" controlzEx:WindowChrome.ResizeGripDirection="BottomRight" IsTabStop="False" UseLayoutRounding="True" Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ShowTitleBar" Value="False">
              <Setter TargetName="PART_WindowTitleThumb" Property="Grid.RowSpan" Value="2" />
            </Trigger>
            <!-- handle active/inactive state -->
            <Trigger Property="IsActive" Value="False">
              <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=NonActiveGlowColor, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BrushConverter.Default}}" />
              <Setter TargetName="PART_Icon" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
              <Setter TargetName="PART_LeftWindowCommands" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
              <Setter TargetName="PART_RightWindowCommands" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
              <Setter TargetName="PART_TitleBar" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
              <Setter TargetName="PART_WindowButtonCommands" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
              <Setter TargetName="PART_WindowTitleBackground" Property="Fill" Value="{Binding Path=NonActiveWindowTitleBrush, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsActive" Value="False" />
                <Condition Property="GlowColor" Value="{x:Null}" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=NonActiveBorderBrush, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsActive" Value="True" />
                <Condition Property="GlowColor" Value="{x:Null}" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=BorderBrush, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                <Condition Property="WindowState" Value="Normal" />
              </MultiTrigger.Conditions>
              <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TextElement.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
    <Setter Property="TextOptions.TextRenderingMode" Value="Auto" />
    <Setter Property="TitleAlignment" Value="Stretch" />
    <Setter Property="TitleBarHeight" Value="30" />
    <Setter Property="TitleCharacterCasing" Value="Normal" />
    <Setter Property="TitleForeground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="TitleTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Margin="{StaticResource MyNet.Margins.Default.Left}" VerticalAlignment="Center" Text="{TemplateBinding Content}" TextTrimming="CharacterEllipsis" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="Width" Value="1100" />
    <Setter Property="WindowTitleBrush" Value="Transparent" />
    <Setter Property="WindowTransitionsEnabled" Value="True" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Icon, Mode=OneWay, Converter={x:Static c:NullToBooleanConverter.FalseIfNull}}" Value="True">
        <Setter Property="IconTemplate">
          <Setter.Value>
            <DataTemplate>
              <mah:MultiFrameImage Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Margin="{StaticResource MyNet.Margins.Default}" MultiFrameImageMode="{Binding IconScalingMode, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mah:MetroWindow}}}" RenderOptions.BitmapScalingMode="{Binding IconBitmapScalingMode, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mah:MetroWindow}}}" RenderOptions.EdgeMode="{Binding IconEdgeMode, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mah:MetroWindow}}}" Source="{TemplateBinding Content}" />
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ExtendedWindowDialog" TargetType="{x:Type ctrl:ExtendedWindowDialog}" BasedOn="{StaticResource MyNet.Styles.ExtendedWindow}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Dialog.Background}" />
    <!--<Setter Property="NonActiveWindowTitleBrush" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />-->
    <Setter Property="ShowTitleBar" Value="False" />
    <!--<Setter Property="WindowTitleBrush" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />-->
  </Style>
  <Style x:Key="MyNet.Styles.Flipper" TargetType="{x:Type ctrl:Flipper}">
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:Flipper}">
          <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="FlipStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Unflipped" To="Flipped">
                    <Storyboard FillBehavior="HoldEnd">
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Plane3D" Storyboard.TargetProperty="RotationY" Duration="0:0:0.4">
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.0" Value="0" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.2" Value="-90" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.2" Value="90" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.4" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackContentPresenter" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Visible}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FrontContentPresenter" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Collapsed}" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Flipped" To="Unflipped">
                    <Storyboard FillBehavior="HoldEnd">
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Plane3D" Storyboard.TargetProperty="RotationY" Duration="0:0:0.4">
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.0" Value="0" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.2" Value="90" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.2" Value="-90" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.4" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackContentPresenter" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Collapsed}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FrontContentPresenter" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Visible}" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Unflipped">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackContentPresenter" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FrontContentPresenter" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Flipped">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackContentPresenter" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FrontContentPresenter" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ctrl:Plane3D x:Name="Plane3D" RotationY="0" ZFactor="2.055">
              <Grid>
                <ContentPresenter x:Name="FrontContentPresenter" Margin="{TemplateBinding Padding}" Content="{TemplateBinding FrontContent}" ContentStringFormat="{TemplateBinding FrontContentStringFormat}" ContentTemplate="{TemplateBinding FrontContentTemplate}" ContentTemplateSelector="{TemplateBinding FrontContentTemplateSelector}" RenderTransformOrigin=".5,.5" />
                <ContentPresenter x:Name="BackContentPresenter" Margin="{TemplateBinding Padding}" Content="{TemplateBinding BackContent}" ContentStringFormat="{TemplateBinding BackContentStringFormat}" ContentTemplate="{TemplateBinding BackContentTemplate}" ContentTemplateSelector="{TemplateBinding BackContentTemplateSelector}" RenderTransformOrigin=".5,.5" Visibility="Hidden" />
              </Grid>
            </ctrl:Plane3D>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Flipper.Card" TargetType="{x:Type ctrl:Flipper}" BasedOn="{StaticResource MyNet.Styles.Flipper}">
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:Flipper}">
          <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="FlipStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Unflipped" To="Flipped">
                    <Storyboard FillBehavior="HoldEnd">
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Plane3D" Storyboard.TargetProperty="RotationY" Duration="0:0:0.4">
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.0" Value="0" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.2" Value="-90" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.2" Value="90" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.4" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackContentPresenter" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Visible}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FrontContentPresenter" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Collapsed}" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Flipped" To="Unflipped">
                    <Storyboard FillBehavior="HoldEnd">
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Plane3D" Storyboard.TargetProperty="RotationY" Duration="0:0:0.4">
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.0" Value="0" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.2" Value="90" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.2" Value="-90" />
                        <EasingDoubleKeyFrame EasingFunction="{StaticResource FlipEase}" KeyTime="0:0:0.4" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackContentPresenter" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Collapsed}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FrontContentPresenter" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Visible}" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Unflipped">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackContentPresenter" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FrontContentPresenter" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Flipped">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BackContentPresenter" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FrontContentPresenter" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ctrl:Plane3D x:Name="PART_Plane3D" RotationY="0" ZFactor="2.055">
              <ctrl:Card Style="{TemplateBinding p:ThemeAssist.Style}" Padding="{TemplateBinding Padding}" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" UniformCornerRadius="{TemplateBinding p:ThemeAssist.UniformCornerRadius}">
                <Grid>
                  <ContentPresenter x:Name="FrontContentPresenter" Margin="{TemplateBinding Padding}" Content="{TemplateBinding FrontContent}" ContentStringFormat="{TemplateBinding FrontContentStringFormat}" ContentTemplate="{TemplateBinding FrontContentTemplate}" ContentTemplateSelector="{TemplateBinding FrontContentTemplateSelector}" RenderTransformOrigin=".5,.5" />
                  <ContentPresenter x:Name="BackContentPresenter" Margin="{TemplateBinding Padding}" Content="{TemplateBinding BackContent}" ContentStringFormat="{TemplateBinding BackContentStringFormat}" ContentTemplate="{TemplateBinding BackContentTemplate}" ContentTemplateSelector="{TemplateBinding BackContentTemplateSelector}" RenderTransformOrigin=".5,.5" Visibility="Collapsed" />
                </Grid>
              </ctrl:Card>
            </ctrl:Plane3D>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    <Setter Property="p:ThemeAssist.Style" Value="{StaticResource MyNet.Styles.Card.Elevation}" />
  </Style>
  <Style x:Key="MyNet.Styles.GhostControl" TargetType="{x:Type ctrl:GhostControl}" BasedOn="{StaticResource MyNet.Styles.ContentControl}">
    <Setter Property="Ghost" Value="{me:Resource NoData}" />
    <Setter Property="GhostTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ctrl:GhostControl}}}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ctrl:GhostControl}}}" Text="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:GhostControl}">
          <ContentPresenter x:Name="content" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
          <ControlTemplate.Triggers>
            <Trigger Property="ShowGhost" Value="True">
              <Setter TargetName="content" Property="Content" Value="{Binding Ghost, RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="content" Property="ContentTemplate" Value="{Binding GhostTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Top" />
  </Style>
  <Style x:Key="MyNet.Styles.LoadingIndicator" TargetType="{x:Type ctrl:LoadingIndicator}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Height" Value="40" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Width" Value="40" />
    <Style.Triggers>
      <Trigger Property="Mode" Value="{x:Static ctrl:LoadingIndicatorMode.Arcs}">
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.LoadingIndicator.Arcs}" />
      </Trigger>
      <Trigger Property="Mode" Value="{x:Static ctrl:LoadingIndicatorMode.ArcsRing}">
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.LoadingIndicator.ArcsRing}" />
      </Trigger>
      <Trigger Property="Mode" Value="{x:Static ctrl:LoadingIndicatorMode.DoubleBounce}">
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.LoadingIndicator.DoubleBounce}" />
      </Trigger>
      <Trigger Property="Mode" Value="{x:Static ctrl:LoadingIndicatorMode.FlipPlane}">
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.LoadingIndicator.FlipPlane}" />
      </Trigger>
      <Trigger Property="Mode" Value="{x:Static ctrl:LoadingIndicatorMode.Pulse}">
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.LoadingIndicator.Pulse}" />
      </Trigger>
      <Trigger Property="Mode" Value="{x:Static ctrl:LoadingIndicatorMode.Ring}">
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.LoadingIndicator.Ring}" />
      </Trigger>
      <Trigger Property="Mode" Value="{x:Static ctrl:LoadingIndicatorMode.ThreeDots}">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.LoadingIndicator.ThreeDots}" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <Trigger Property="Mode" Value="{x:Static ctrl:LoadingIndicatorMode.Wave}">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.LoadingIndicator.Wave}" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.LoadingIndicator.Accent" TargetType="{x:Type ctrl:LoadingIndicator}">
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.NavigationPage" TargetType="{x:Type ctrl:NavigationPage}">
    <Setter Property="KeepAlive" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:NavigationPage}">
          <Border Background="{TemplateBinding Background}">
            <ContentPresenter Content="{TemplateBinding Content}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TextElement.FontFamily" Value="{me:RobotoFont}" />
    <Setter Property="TextElement.FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="TextElement.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
    <Setter Property="TextOptions.TextRenderingMode" Value="Auto" />
  </Style>
  <Style x:Key="MyNet.Style.NavigationViewItemHeader" TargetType="{x:Type ctrl:NavigationViewItemHeader}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=HeaderForeground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="IconForeground" Value="{me:BrushBinding InheritPath=HeaderForeground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="Margin" Value="0 4 0 2" />
    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:NavigationViewItemHeader}">
          <Grid Margin="{TemplateBinding Margin}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <ContentControl x:Name="Icon" Grid.Column="0" Margin="0 0 4 0" VerticalAlignment="Center" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding IconForeground}" />
            <TextBlock Grid.Column="1" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Text}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
              <Setter TargetName="Icon" Property="Margin" Value="0" />
              <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <Style x:Key="MyNet.Styles.NavigationViewItem.Base" TargetType="{x:Type ctrl:NavigationViewItem}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Border.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Tab}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=HeaderForeground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="IconForeground" Value="{me:BrushBinding InheritPath=HeaderForeground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
    <Setter Property="Padding" Value="10 8" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:NavigationViewItem}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Border x:Name="PART_MainBorder" Height="40" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding Border.CornerRadius}">
              <Grid>
                <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Feedback="{TemplateBinding Foreground}" Focusable="False" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="IconContentPresenter" Margin="{StaticResource MyNet.Margins.Default.Right}" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Icon}" Focusable="False" Opacity="{StaticResource MyNet.Opacity.Secondary}" TextElement.Foreground="{TemplateBinding IconForeground}" Visibility="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
                    <ContentPresenter x:Name="ElementContentPresenter" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding Header}" TextElement.Foreground="{TemplateBinding Foreground}" />
                    <ctrl:PackIcon x:Name="Caret" Grid.Row="0" Grid.Column="2" Width="18" Height="18" HorizontalAlignment="Center" VerticalAlignment="Center" Kind="ChevronDown" RenderTransformOrigin="0.5, 0.5">
                      <ctrl:PackIcon.Visibility>
                        <MultiBinding Converter="{x:Static c:MultipleBooleanToVisibilityConverter.AndCollapse}">
                          <Binding Path="HasItems" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </ctrl:PackIcon.Visibility>
                      <ctrl:PackIcon.RenderTransform>
                        <RotateTransform Angle="0" />
                      </ctrl:PackIcon.RenderTransform>
                    </ctrl:PackIcon>
                  </Grid>
                </ctrl:Ripple>
                <Rectangle x:Name="ActiveRectangle" Grid.Column="0" Width="3.5" Height="16" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" VerticalAlignment="Center" Fill="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0.0" RadiusX="2" RadiusY="2" />
              </Grid>
            </Border>
            <ItemsPresenter x:Name="MenuItemsPresenter" Grid.Row="1" Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, ElementName=PART_MainBorder}" Value="True">
              <Setter TargetName="PART_MainBorder" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </DataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasItems" Value="True" />
                <Condition Property="IsExpanded" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="MenuItemsPresenter" Property="Visibility" Value="Visible" />
              <MultiTrigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MenuItemsPresenter" Storyboard.TargetProperty="(ItemsControl.Opacity)" From="0.0" To="0.85" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="0" To="180" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </MultiTrigger.EnterActions>
              <MultiTrigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MenuItemsPresenter" Storyboard.TargetProperty="(ItemsControl.Opacity)" From="0.85" To="0.0" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="180" To="0" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </MultiTrigger.ExitActions>
            </MultiTrigger>
            <Trigger Property="IsActive" Value="True">
              <Setter TargetName="ActiveRectangle" Property="Opacity" Value="1.0" />
              <Setter TargetName="IconContentPresenter" Property="Opacity" Value="1.0" />
              <Setter TargetName="PART_MainBorder" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="p:IconAssist.Margin" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding InheritPath=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding InheritPath=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(p:ThemeAssist.IsMouseOverForeground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Style.Triggers>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.NavigationViewItem.SubLevel" TargetType="{x:Type ctrl:NavigationViewItem}" BasedOn="{StaticResource MyNet.Styles.NavigationViewItem.Base}">
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.VeryLarge.Horizontal}" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Medium.Left}" />
  </Style>
  <Style x:Key="MyNet.Styles.NavigationViewItem" TargetType="{x:Type ctrl:NavigationViewItem}" BasedOn="{StaticResource MyNet.Styles.NavigationViewItem.Base}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.NavigationViewItem.SubLevel}" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.NumericUpDown" TargetType="{x:Type ctrl:NumericUpDown}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <!-- Mouse Over -->
            <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Focus -->
            <Border x:Name="focus" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Ripple on focus -->
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Icon -->
              <ContentControl x:Name="Icon" Grid.Column="2" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <ContentControl.Resources>
                  <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                  <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                </ContentControl.Resources>
              </ContentControl>
              <!-- Content -->
              <Grid Grid.Column="3" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Grid x:Name="grid" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Host Text -->
                    <TextBox x:Name="PART_TextBox" Style="{StaticResource MyNet.Styles.TextBox.Embedded}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="Center" CaretBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" SelectionBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" />
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
              <!-- Clear button -->
              <Button x:Name="PART_ClearButton" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="4" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{x:Static p:TextFieldAssist.ClearCommand}" Content="{me:Icon Kind=Close,                                                       Size=16}" ToolTip="{me:Resource Clear}">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
              <!-- Down -->
              <RepeatButton x:Name="PART_NumericDown" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="6" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Content="{Binding Path=(p:TextFieldAssist.PreviousButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Delay="{TemplateBinding Delay}" Focusable="{TemplateBinding UpDownButtonsFocusable}" Visibility="{Binding HideUpDownButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
              <!-- Up -->
              <RepeatButton x:Name="PART_NumericUp" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="7" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Content="{Binding Path=(p:TextFieldAssist.NextButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Delay="{TemplateBinding Delay}" Focusable="{TemplateBinding UpDownButtonsFocusable}" Visibility="{Binding HideUpDownButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
            </Grid>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="CharacterCounterContainer" Grid.Column="1">
            <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding Path=(p:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </Grid>
      </Canvas>
    </Grid>
    <ControlTemplate.Triggers>
      <!-- Butons alignment -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ButtonsAlignment" Value="Right" />
          <Condition Property="SwitchUpDownButtons" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_NumericDown" Property="Grid.Column" Value="7" />
        <Setter TargetName="PART_NumericUp" Property="Grid.Column" Value="6" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ButtonsAlignment" Value="Left" />
          <Condition Property="SwitchUpDownButtons" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_NumericDown" Property="Grid.Column" Value="0" />
        <Setter TargetName="PART_NumericUp" Property="Grid.Column" Value="1" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ButtonsAlignment" Value="Left" />
          <Condition Property="SwitchUpDownButtons" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_NumericDown" Property="Grid.Column" Value="1" />
        <Setter TargetName="PART_NumericUp" Property="Grid.Column" Value="0" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ButtonsAlignment" Value="Opposite" />
          <Condition Property="SwitchUpDownButtons" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_NumericDown" Property="Grid.Column" Value="0" />
        <Setter TargetName="PART_NumericUp" Property="Grid.Column" Value="6" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ButtonsAlignment" Value="Opposite" />
          <Condition Property="SwitchUpDownButtons" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_NumericDown" Property="Grid.Column" Value="6" />
        <Setter TargetName="PART_NumericUp" Property="Grid.Column" Value="1" />
      </MultiTrigger>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="5" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="p:TextFieldAssist.IsEditable" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ClearButton" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_NumericDown" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_NumericUp" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- IsKeyboardFocused -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
      <!-- IsReadOnly -->
      <Trigger Property="IsReadOnly" Value="True">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="InterceptArrowKeys" Value="False" />
        <Setter Property="InterceptManualEnter" Value="False" />
        <Setter Property="InterceptMouseWheel" Value="False" />
        <Setter Property="Opacity" Value="1" />
        <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_NumericDown" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_NumericUp" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
        <Setter TargetName="border" Property="Opacity" Value="1" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
        <Setter TargetName="grid" Property="Opacity" Value="1" />
      </Trigger>
      <!-- IsEditable -->
      <Trigger Property="p:TextFieldAssist.IsEditable" Value="False">
        <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.OverlayDialogControl" TargetType="{x:Type ctrl:OverlayDialogControl}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Dialog.Background}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="FontFamily" Value="{me:RobotoFont}" />
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="OverlayBackground" Value="{DynamicResource MyNet.Brushes.Overlay}" />
    <Setter Property="Padding" Value="50" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:OverlayDialogControl}">
          <Grid x:Name="DialogHostRoot" Focusable="False">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PopupStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition To="Open">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentCoverGrid" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentElement" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Open" To="Closed">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentCoverGrid" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentElement" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.18" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.18" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.5">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.18" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.5">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseInOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Open">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_ContentCoverGrid" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="PART_ContentElement" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleX" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleY" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Closed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_ContentCoverGrid" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="PART_ContentCoverGrid" Background="Transparent" Focusable="False" IsHitTestVisible="False" Visibility="{Binding Opacity, RelativeSource={RelativeSource Self}, Converter={x:Static c:ComparaisonToVisibilityConverter.CollapsedIfIsEqualsTo}, ConverterParameter=0}">
              <Border x:Name="ContentCoverBorder" Background="{Binding OverlayBackground, RelativeSource={RelativeSource TemplatedParent}}" IsHitTestVisible="False" />
              <Border Background="Transparent" IsHitTestVisible="{TemplateBinding CloseOnClickAway}">
                <Border.InputBindings>
                  <MouseBinding Command="{x:Static ctrl:OverlayDialogControl.CloseDialogCommand}" MouseAction="LeftClick" />
                </Border.InputBindings>
              </Border>
              <ctrl:Card x:Name="PART_ContentElement" MinWidth="{TemplateBinding ContentMinWidth}" MinHeight="{TemplateBinding ContentMinHeight}" MaxWidth="{TemplateBinding ContentMaxWidth}" MaxHeight="{TemplateBinding ContentMaxHeight}" Margin="{TemplateBinding Padding}" Padding="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" p:ElevationAssist.Elevation="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation)}" Background="{TemplateBinding Background}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" FocusManager.IsFocusScope="False" Focusable="False" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="True" IsTabStop="False" Opacity="0" RenderTransformOrigin=".5,.5" TextElement.FontFamily="{TemplateBinding FontFamily}" TextElement.FontSize="{TemplateBinding FontSize}" TextElement.FontStretch="{TemplateBinding FontStretch}" TextElement.FontStyle="{TemplateBinding FontStyle}" TextElement.FontWeight="{TemplateBinding FontWeight}" TextElement.Foreground="{TemplateBinding Foreground}" TextOptions.TextFormattingMode="Ideal" TextOptions.TextRenderingMode="Auto" UniformCornerRadius="{StaticResource MyNet.UniformCornerRadius.Container}">
                <ctrl:Card.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform x:Name="CardScaleTransform" ScaleX="0" ScaleY="0" />
                  </TransformGroup>
                </ctrl:Card.RenderTransform>
              </ctrl:Card>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsOpen" Value="True">
              <Setter TargetName="PART_ContentCoverGrid" Property="IsHitTestVisible" Value="True" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Popup}" />
  </Style>
  <Style x:Key="MyNet.Styles.PictureControl" TargetType="{x:Type ctrl:PictureControl}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Content" Value="{me:Icon Data={StaticResource MyNet.Geometries.Male}, Size=85}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="FontSize" Value="40" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Medium}}" />
    <Setter Property="Height" Value="80" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Stretch" Value="UniformToFill" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:PictureControl}">
          <ctrl:Card Padding="0" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Foreground="{TemplateBinding Foreground}" UniformCornerRadius="{TemplateBinding p:ThemeAssist.UniformCornerRadius}">
            <Grid>
              <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
              <Image HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Source="{TemplateBinding Image}" Stretch="{TemplateBinding Stretch}" Visibility="{Binding Image, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            </Grid>
          </ctrl:Card>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Width" Value="80" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.RatingBar" TargetType="{x:Type ctrl:RatingBar}">
    <Setter Property="ClipToBounds" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:RatingBar}">
          <ItemsControl Margin="{TemplateBinding Padding}" HorizontalAlignment="Left" VerticalAlignment="Top" ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RatingButtons}">
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <StackPanel Orientation="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=Orientation}" />
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
          </ItemsControl>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ValueItemContainerButtonStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ctrl:RatingBarButton}">
          <Style.Setters>
            <Setter Property="Command" Value="{x:Static ctrl:RatingBar.SelectRatingCommand}" />
            <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=Value}" />
            <Setter Property="p:RippleAssist.ClipToBounds" Value="False" />
            <Setter Property="p:RippleAssist.RippleSizeMultiplier" Value="0.5" />
            <Setter Property="Tag" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ctrl:RatingBar}}}" />
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:RatingBarButton}">
                  <Grid>
                    <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" RenderTransformOrigin=".5, .5" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                      <TextBlock.Foreground>
                        <MultiBinding Converter="{x:Static c:RatingForegroundConverter.Default}">
                          <Binding Path="Foreground" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                          <Binding Path="Orientation" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                          <Binding Path="Value" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                          <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Foreground>
                      <ctrl:Ripple.RenderTransform>
                        <RotateTransform x:Name="RotateTransform" />
                      </ctrl:Ripple.RenderTransform>
                    </ctrl:Ripple>
                    <Canvas>
                      <Grid x:Name="previewValueHorizontal" Height="36" IsHitTestVisible="False" Visibility="Collapsed">
                        <Grid.RenderTransform>
                          <TransformGroup>
                            <TranslateTransform>
                              <TranslateTransform.X>
                                <MultiBinding Converter="{x:Static c:RatingPreviewIndicatorTransformXConverter.Default}">
                                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding ElementName="previewValueHorizontal" Path="ActualWidth" />
                                  <!--<Binding Path="Orientation" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                                                                    <Binding Path="IsFractionalValueEnabled" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                                                                    <Binding Path="PreviewValue" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />-->
                                  <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding Path="IsMouseOver" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                              </TranslateTransform.X>
                              <TranslateTransform.Y>
                                <MultiBinding Converter="{x:Static c:RatingPreviewIndicatorTransformYConverter.Default}">
                                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding ElementName="previewValueHorizontal" Path="ActualHeight" />
                                  <!--<Binding Path="Orientation" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                                                                    <Binding Path="IsFractionalValueEnabled" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                                                                    <Binding Path="PreviewValue" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />-->
                                  <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding Path="IsMouseOver" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                              </TranslateTransform.Y>
                            </TranslateTransform>
                          </TransformGroup>
                        </Grid.RenderTransform>
                        <AdornerDecorator>
                          <AdornerDecorator.CacheMode>
                            <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                          </AdornerDecorator.CacheMode>
                          <Grid Effect="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}">
                            <Rectangle Margin="0 0 0 5" Fill="{DynamicResource MyNet.Brushes.Popup.Background}" RadiusX="2" RadiusY="2" />
                            <Polygon HorizontalAlignment="Center" VerticalAlignment="Bottom" Fill="{DynamicResource MyNet.Brushes.Popup.Background}" Points="0,0 4.5,5 9,0" />
                          </Grid>
                        </AdornerDecorator>
                        <TextBlock x:Name="previewValueTextHorizontal" Margin="12 0 12 5" VerticalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Application.Foreground}" Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=PreviewValue}" TextAlignment="Center" />
                      </Grid>
                      <Grid x:Name="previewValueVertical" Height="31" IsHitTestVisible="False" Visibility="Collapsed">
                        <Grid.RenderTransform>
                          <TransformGroup>
                            <TranslateTransform>
                              <TranslateTransform.X>
                                <MultiBinding Converter="{x:Static c:RatingPreviewIndicatorTransformXConverter.Default}">
                                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding ElementName="previewValueVertical" Path="ActualWidth" />
                                  <!--<Binding Path="Orientation" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                                                                    <Binding Path="IsFractionalValueEnabled" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                                                                    <Binding Path="PreviewValue" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />-->
                                  <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding Path="IsMouseOver" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                              </TranslateTransform.X>
                              <TranslateTransform.Y>
                                <MultiBinding Converter="{x:Static c:RatingPreviewIndicatorTransformYConverter.Default}">
                                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding ElementName="previewValueVertical" Path="ActualHeight" />
                                  <!--<Binding Path="Orientation" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                                                                    <Binding Path="IsFractionalValueEnabled" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                                                                    <Binding Path="PreviewValue" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />-->
                                  <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding Path="IsMouseOver" RelativeSource="{RelativeSource TemplatedParent}" />
                                  <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                              </TranslateTransform.Y>
                            </TranslateTransform>
                          </TransformGroup>
                        </Grid.RenderTransform>
                        <AdornerDecorator>
                          <AdornerDecorator.CacheMode>
                            <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                          </AdornerDecorator.CacheMode>
                          <Grid Effect="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}">
                            <Rectangle Margin="0 0 5 0" Fill="{DynamicResource MyNet.Brushes.Popup.Background}" RadiusX="2" RadiusY="2" />
                            <Polygon HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{DynamicResource MyNet.Brushes.Popup.Background}" Points="0,0 6,5 0,10" />
                          </Grid>
                        </AdornerDecorator>
                        <TextBlock x:Name="previewValueTextVertical" Margin="12 0 17 0" VerticalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Application.Foreground}" Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=PreviewValue}" TextAlignment="Center" />
                      </Grid>
                    </Canvas>
                  </Grid>
                  <ControlTemplate.Triggers>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=Orientation}" Value="Horizontal" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=IsPreviewValueEnabled}" Value="True" />
                      </MultiDataTrigger.Conditions>
                      <Setter TargetName="previewValueHorizontal" Property="Visibility" Value="Visible" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=Orientation}" Value="Horizontal" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=IsPreviewValueEnabled}" Value="True" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=IsFractionalValueEnabled}" Value="True" />
                      </MultiDataTrigger.Conditions>
                      <!-- When fractional values are enabled, always show the preview with 2 decimal places -->
                      <Setter TargetName="previewValueTextHorizontal" Property="Text" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=PreviewValue, StringFormat=' {0:N2}'}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=Orientation}" Value="Vertical" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=IsPreviewValueEnabled}" Value="True" />
                      </MultiDataTrigger.Conditions>
                      <Setter TargetName="previewValueVertical" Property="Visibility" Value="Visible" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=Orientation}" Value="Vertical" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=IsPreviewValueEnabled}" Value="True" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=IsFractionalValueEnabled}" Value="True" />
                      </MultiDataTrigger.Conditions>
                      <!-- When fractional values are enabled, always show the preview with 2 decimal places -->
                      <Setter TargetName="previewValueTextVertical" Property="Text" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}, Path=PreviewValue, StringFormat=' {0:N2}'}" />
                    </MultiDataTrigger>
                    <EventTrigger RoutedEvent="Click">
                      <EventTrigger.Actions>
                        <BeginStoryboard>
                          <Storyboard TargetProperty="Angle" TargetName="RotateTransform">
                            <DoubleAnimationUsingKeyFrames>
                              <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                              <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="360">
                                <EasingDoubleKeyFrame.EasingFunction>
                                  <SineEase EasingMode="EaseInOut" />
                                </EasingDoubleKeyFrame.EasingFunction>
                              </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                          </Storyboard>
                        </BeginStoryboard>
                      </EventTrigger.Actions>
                    </EventTrigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Style.Setters>
          <Style.Triggers>
            <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}}" Value="True">
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type ctrl:RatingBarButton}">
                    <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" IsEnabled="False" RenderTransformOrigin=".5, .5" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                      <TextBlock.Foreground>
                        <MultiBinding Converter="{x:Static c:RatingForegroundConverter.Default}">
                          <Binding Path="Foreground" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                          <Binding Path="Orientation" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                          <Binding Path="Value" RelativeSource="{RelativeSource FindAncestor, AncestorType=ctrl:RatingBar}" />
                          <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Foreground>
                    </ctrl:Ripple>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="ValueItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <Viewbox Width="24" Height="24">
            <Canvas Width="24" Height="24">
              <Path Data="M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z" Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Control}, Path=Foreground}" />
            </Canvas>
          </Viewbox>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Control}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.RevealPasswordBox" TargetType="{x:Type ctrl:RevealPasswordBox}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <!-- Mouse Over -->
            <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Focus -->
            <Border x:Name="focus" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Ripple on focus -->
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Icon -->
              <ContentControl x:Name="Icon" Grid.Column="0" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <ContentControl.Resources>
                  <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                  <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                </ContentControl.Resources>
              </ContentControl>
              <Grid Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <!-- Content -->
                <Grid x:Name="grid" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Host Text -->
                    <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1" VerticalAlignment="Center" Panel.ZIndex="1" p:ScrollViewerAssist.IgnorePadding="True" Focusable="false" HorizontalScrollBarVisibility="Hidden" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalScrollBarVisibility="Hidden" />
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
              <!-- Clear button -->
              <Button x:Name="PART_ClearButton" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="2" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{x:Static p:TextFieldAssist.ClearCommand}" Content="{me:Icon Kind=Close,                                                       Size=16}" ToolTip="{me:Resource Clear}">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
              <!-- Reveal password button -->
              <Button x:Name="PART_RevealPassword" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="3" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" ToolTip="{me:Resource RevealPassword}" Visibility="{Binding RevealButtonEnabled, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                <ctrl:PackIcon x:Name="RevealIcon" Margin="0" Kind="Eye" />
              </Button>
            </Grid>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="CharacterCounterContainer" Grid.Column="1">
            <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding Path=(p:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </Grid>
      </Canvas>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsPasswordRevealed" Value="True">
        <Setter TargetName="PART_RevealPassword" Property="ToolTip" Value="{me:Resource HidePassword}" />
        <Setter TargetName="RevealIcon" Property="Kind" Value="EyeOff" />
      </Trigger>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="4" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_ClearButton" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_RevealPassword" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <!-- IsKeyboardFocused -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
      </MultiTrigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
      <!-- IsReadOnly -->
      <Trigger Property="IsReadOnly" Value="True">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Opacity" Value="1" />
        <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="border" Property="Opacity" Value="1" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
        <Setter TargetName="grid" Property="Opacity" Value="1" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.Ripple" TargetType="{x:Type ctrl:Ripple}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="ClipToBounds" Value="{Binding RelativeSource={RelativeSource Self}, Path=(p:RippleAssist.ClipToBounds)}" />
    <Setter Property="Feedback" Value="{Binding RelativeSource={RelativeSource Self}, Path=(p:RippleAssist.Feedback)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="RecognizesAccessKey" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:Ripple}">
          <Grid Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MousePressed">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value=".26" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="MousePressed" To="MouseOut">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="MousePressed" To="Normal">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <EasingDoubleKeyFrame x:Name="MousePressedToNormalScaleXKeyFrame" KeyTime="0:0:0.30" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <EasingDoubleKeyFrame x:Name="MousePressedToNormalScaleYKeyFrame" KeyTime="0:0:0.30" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value=".26" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.30" Value=".26" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" To="0" />
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY" To="0" />
                    <DoubleAnimation Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity" To="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MousePressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" To="1" />
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY" To="1" />
                    <DoubleAnimation Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity" To="0.26" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MouseOut">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" To="0" />
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY" To="0" />
                    <DoubleAnimation Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity" To="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Canvas HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsHitTestVisible="False">
              <Ellipse x:Name="ClickEllipse" Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleX}" Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleY}" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}" Fill="{TemplateBinding Feedback}" Opacity="0" RenderTransformOrigin=".5,.5">
                <Ellipse.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="0" />
                    <SkewTransform />
                    <RotateTransform />
                    <TranslateTransform x:Name="TranslateTransform" />
                  </TransformGroup>
                </Ellipse.RenderTransform>
              </Ellipse>
              <Canvas.Style>
                <Style TargetType="Canvas">
                  <Setter Property="ZIndex" Value="0" />
                  <Style.Triggers>
                    <Trigger Property="p:RippleAssist.RippleOnTop" Value="True">
                      <Setter Property="ZIndex" Value="2" />
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </Canvas.Style>
            </Canvas>
            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Panel.ZIndex="1" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" RecognizesAccessKey="{TemplateBinding RecognizesAccessKey}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.SimpleStackPanel" TargetType="{x:Type ctrl:SimpleStackPanel}">
    <Setter Property="Spacing" Value="{StaticResource MyNet.Margin.Medium}" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="MyNet.Styles.SmartHint" TargetType="{x:Type ctrl:SmartHint}">
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:SmartHint}">
          <Grid Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ContentStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="*" To="HintFloatingPosition">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="SimpleHintTextBlock" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="*" To="HintRestingPosition">
                    <Storyboard>
                      <DoubleAnimation EasingFunction="{StaticResource AnimationEasingFunction}" Storyboard.TargetName="SimpleHintTextBlock" Storyboard.TargetProperty="Opacity" Duration="0:0:0.15" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="HintFloatingPosition">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SimpleHintTextBlock" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="HintRestingPosition">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SimpleHintTextBlock" Storyboard.TargetProperty="Opacity" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentControl x:Name="SimpleHintTextBlock" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Hint}" FontSize="{TemplateBinding FontSize}" IsHitTestVisible="False" IsTabStop="False" Opacity="{TemplateBinding HintOpacity}" Visibility="{TemplateBinding UseFloating, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Bottom" />
    <Style.Triggers>
      <Trigger Property="UseFloating" Value="True">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ctrl:SmartHint}">
              <Grid Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup x:Name="ContentStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition From="*" To="HintFloatingPosition">
                        <Storyboard>
                          <DoubleAnimation EasingFunction="{StaticResource AnimationEasingFunction}" Storyboard.TargetName="FloatingHintTextBlock" Storyboard.TargetProperty="Opacity" To="{TemplateBinding HintOpacity}" Duration="0:0:0.15" />
                          <DoubleAnimation EasingFunction="{StaticResource AnimationEasingFunction}" Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" To="1" Duration="0:0:0.15" />
                        </Storyboard>
                      </VisualTransition>
                      <VisualTransition From="*" To="HintRestingPosition">
                        <Storyboard>
                          <DoubleAnimation EasingFunction="{StaticResource AnimationEasingFunction}" Storyboard.TargetName="FloatingHintTextBlock" Storyboard.TargetProperty="Opacity" Duration="0:0:0.15" />
                          <DoubleAnimation EasingFunction="{StaticResource AnimationEasingFunction}" Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" Duration="0:0:0.15" />
                        </Storyboard>
                      </VisualTransition>
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="HintFloatingPosition">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="FloatingHintTextBlock" Storyboard.TargetProperty="Opacity" To="{TemplateBinding HintOpacity}" Duration="0" />
                        <DoubleAnimation Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" To="1" Duration="0" />
                      </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HintRestingPosition">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="FloatingHintTextBlock" Storyboard.TargetProperty="Opacity" Duration="0" />
                        <DoubleAnimation Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" Duration="0" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <ctrl:ScaleHost x:Name="ScaleHost" />
                <ContentControl x:Name="FloatingHintTextBlock" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Hint}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" IsHitTestVisible="False" IsTabStop="False" Opacity="{TemplateBinding HintOpacity}" RenderTransformOrigin="0,0" Visibility="{TemplateBinding UseFloating, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                  <ContentControl.Tag>
                    <sys:Double>0.0</sys:Double>
                  </ContentControl.Tag>
                  <ContentControl.RenderTransform>
                    <MultiBinding Converter="{x:Static c:FloatingHintTransformConverter.Default}">
                      <Binding ElementName="ScaleHost" Path="Scale" />
                      <Binding Path="FloatingScale" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Source="{StaticResource NoContentFloatingScale}" />
                      <Binding Path="FloatingOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </ContentControl.RenderTransform>
                </ContentControl>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsHintInFloatingPosition" Value="True">
                  <Setter Property="VerticalAlignment" Value="Top" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.TransitioningContent" TargetType="{x:Type ctrl:TransitioningContent}" BasedOn="{StaticResource MyNet.Styles.ContentControl}">
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="OpeningEffect" Value="{md:TransitionEffect Kind=FadeIn, Duration='0:0:0.5'}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:TransitioningContent}">
          <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" RenderTransformOrigin=".5,.5">
              <ContentPresenter.RenderTransform>
                <TransformGroup>
                  <MatrixTransform x:Name="PART_MatrixTransform" />
                  <RotateTransform x:Name="PART_RotateTransform" Angle="0" />
                  <ScaleTransform x:Name="PART_ScaleTransform" ScaleX="1" ScaleY="1" />
                  <SkewTransform x:Name="PART_SkewTransform" AngleX="0" AngleY="0" />
                  <TranslateTransform x:Name="PART_TranslateTransform" X="0" Y="0" />
                </TransformGroup>
              </ContentPresenter.RenderTransform>
            </ContentPresenter>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Underline" TargetType="{x:Type ctrl:Underline}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Height" Value="2" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:Underline}">
          <ControlTemplate.Resources>
            <CircleEase x:Key="UnderlineEasingFunction" EasingMode="EaseOut" />
          </ControlTemplate.Resources>
          <Border x:Name="UnderlineBorder" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" IsHitTestVisible="False" RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <Border.RenderTransform>
              <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="1" />
            </Border.RenderTransform>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ActivationStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Inactive" To="Active">
                    <Storyboard>
                      <DoubleAnimation EasingFunction="{StaticResource UnderlineEasingFunction}" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" To="1" Duration="0:0:0.3" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Active" To="Inactive">
                    <Storyboard>
                      <DoubleAnimation EasingFunction="{StaticResource UnderlineEasingFunction}" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" To="0" Duration="0:0:0.3" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Active">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Inactive">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Bottom" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Filled" TargetType="{x:Type ButtonBase}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Icon}" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="11 5" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Grid>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
              <ctrl:Ripple.Clip>
                <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                  <Binding ElementName="border" Path="ActualWidth" />
                  <Binding ElementName="border" Path="ActualHeight" />
                  <Binding ElementName="border" Path="CornerRadius" />
                  <Binding ElementName="border" Path="BorderThickness" />
                </MultiBinding>
              </ctrl:Ripple.Clip>
            </ctrl:Ripple>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TextBlock.FontSize" Value="{StaticResource MyNet.Font.Size.Button}" />
    <Setter Property="TextBlock.FontWeight" Value="{StaticResource MyNet.Font.Weight.Button}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsMouseOverForeground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsMouseOverForeground), RelativeSource={RelativeSource Mode=Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Button.Filled.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Filled.Accent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Filled.Custom" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Filled.Foreground" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Filled.Foreground.SemiTransparent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Outlined" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Outlined.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Outlined}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Outlined.Accent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Outlined}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Outlined.Custom" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Outlined}">
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=BorderBrush}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Outlined.Foreground" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Outlined}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=BorderBrush}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=BorderBrush}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=BorderBrush}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Text" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=BorderBrush, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Text.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text}">
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Text.Accent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text}">
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Text.Foreground" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text}">
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Elevation" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Grid>
            <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
              <Grid>
                <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" />
                <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
              </Grid>
            </AdornerDecorator>
            <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
              <ctrl:Ripple.Clip>
                <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                  <Binding ElementName="border" Path="ActualWidth" />
                  <Binding ElementName="border" Path="ActualHeight" />
                  <Binding ElementName="border" Path="CornerRadius" />
                  <Binding ElementName="border" Path="BorderThickness" />
                </MultiBinding>
              </ctrl:Ripple.Clip>
            </ctrl:Ripple>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
              <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
              <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Button}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Elevation.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Elevation.Accent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Elevation.Custom" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Elevation}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Elevation.Foreground" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Elevation}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Filled" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rounded.Margin}" />
    <Setter Property="Height" Value="40" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Grid>
            <Ellipse x:Name="border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:ThicknessToDoubleConverter.Left}}" />
            <Ellipse x:Name="mouseOver" Fill="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" Visibility="Collapsed" />
            <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}" ClipToBounds="True" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <Ellipse x:Name="GeometryEllipse" Fill="Transparent" Focusable="False" IsHitTestVisible="False" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Width" Value="40" />
    <Setter Property="p:ElevationAssist.Elevation" Value="Dp6" />
    <Setter Property="p:IconAssist.Alignment" Value="Top" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Small.Bottom}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Filled.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Filled.Accent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Filled.Custom" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Filled.Foreground" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Filled.Foreground.SemiTransparent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Outlined" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Outlined.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Outlined}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Outlined.Accent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Outlined}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Outlined.Custom" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Outlined}">
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=BorderBrush}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Outlined.Foreground" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Outlined}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=BorderBrush}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=BorderBrush}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=BorderBrush}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Text" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=BorderBrush, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Text.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Text}">
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Text.Accent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Text}">
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Text.Foreground" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Text}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Elevation" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Grid>
            <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
              <Ellipse x:Name="border" Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
            </AdornerDecorator>
            <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
            <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}" ClipToBounds="True" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <Ellipse x:Name="GeometryEllipse" Fill="Transparent" Focusable="False" IsHitTestVisible="False" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
              <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ElevationAssist.Elevation" Value="Dp6" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Elevation.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Elevation.Accent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Elevation.Custom" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Elevation}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Rounded.Elevation.Foreground" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Elevation}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Icon" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Ellipse Margin="-2" SnapsToDevicePixels="True" Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}" StrokeDashArray="1 2" StrokeThickness="1" />
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Height" Value="Auto" />
    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ButtonBase">
          <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Width" Value="Auto" />
    <Setter Property="p:RippleAssist.ClipToBounds" Value="False" />
    <Setter Property="p:RippleAssist.IsCentered" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Icon.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Icon}">
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Icon.Accent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Icon}">
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Icon.Foreground" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Icon}">
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.HyperLink" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle}" />
    <Setter Property="Opacity" Value="0.85" />
    <Setter Property="Padding" Value="3 3 3 1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Grid>
            <ContentPresenter Margin="{TemplateBinding Padding}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <ctrl:Underline x:Name="Underline" Height="1" Background="{TemplateBinding BorderBrush}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Opacity" Value="1" />
              <Setter TargetName="Underline" Property="IsActive" Value="True" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
              <Setter TargetName="Underline" Property="IsActive" Value="True" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TextBlock.FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="true">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Button.HyperLink.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink}">
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Light}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary.Light}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.HyperLink.Accent" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Light}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Accent.Light}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.HyperLink.Foreground" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=BorderBrush}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=BorderBrush}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Icon.Remove" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:PackIcon Width="18" Height="18" Kind="Trash" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Negative}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Negative}" />
    <Setter Property="ToolTip" Value="{me:Resource Remove}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Icon.Tool" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Height" Value="18" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Width" Value="18" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Icon.Tool.Clear" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Tool}">
    <Setter Property="Command" Value="{x:Static p:TextFieldAssist.ClearCommand}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:PackIcon Kind="Close" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ToolTip" Value="{me:Resource Clear}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.Icon.Tool.ClipBoard" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}">
    <Setter Property="Command" Value="{x:Static cmd:AppCommands.CopyInClipboardCommand}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:PackIcon Kind="ContentCopy" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Default.Horizontal}" />
    <Setter Property="ToolTip" Value="{me:Resource CopyInClipBoard}" />
    <Setter Property="Visibility" Value="{Binding CommandParameter, RelativeSource={RelativeSource Self}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarButton" TargetType="{x:Type CalendarButton}" BasedOn="{StaticResource MyNet.Styles.Button.Text}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="Height" Value="48" />
    <Setter Property="Margin" Value="2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarButton}">
          <Grid>
            <Rectangle x:Name="normal" Height="30" Fill="{TemplateBinding Background}" Opacity="0" RadiusX="15" RadiusY="15" Stroke="Transparent" StrokeThickness="1" />
            <Rectangle x:Name="HighlightBackground" Height="30" Fill="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" RadiusX="15" RadiusY="15" Stroke="Transparent" StrokeThickness="1" />
            <Rectangle x:Name="SelectedBackground" Height="30" Fill="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" RadiusX="15" RadiusY="15" Stroke="Transparent" StrokeThickness="1" />
            <ContentPresenter x:Name="NormalText" Margin="5 1 5 1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="HighlightBackground" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="HasSelectedDays" Value="True">
              <Setter TargetName="NormalText" Property="TextElement.Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Setter TargetName="SelectedBackground" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsInactive" Value="True">
              <Setter TargetName="NormalText" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Width" Value="48" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarDayButton" TargetType="{x:Type CalendarDayButton}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="Height" Value="28" />
    <Setter Property="Margin" Value="2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarDayButton}">
          <Grid>
            <Ellipse x:Name="ellipse" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" />
            <Ellipse x:Name="HoverEllipse" Fill="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" Opacity="0" Stroke="Transparent" StrokeThickness="1" />
            <Ellipse x:Name="SelectedBackground" Fill="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" Opacity="0" Stroke="Transparent" StrokeThickness="1" />
            <ContentPresenter x:Name="NormalText" Margin="5 1 5 1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsToday" Value="true">
              <Setter TargetName="ellipse" Property="Stroke" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="HoverEllipse" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="NormalText" Property="TextElement.Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Setter TargetName="SelectedBackground" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsInactive" Value="True">
              <Setter TargetName="NormalText" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </Trigger>
            <Trigger Property="IsBlackedOut" Value="True">
              <Setter TargetName="NormalText" Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Width" Value="28" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Style.Triggers>
      <Trigger Property="IsBlackedOut" Value="True">
        <Setter Property="Cursor" Value="Arrow" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.CalendarItem.Portrait" TargetType="{x:Type CalendarItem}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarItem}">
          <ControlTemplate.Resources>
            <SineEase x:Key="EasingFunction" EasingMode="EaseOut" />
            <CubicEase x:Key="EasingFunctionIn" EasingMode="EaseIn" />
            <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
              <TextBlock Margin="0 6 0 6" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="9.5" FontWeight="Bold" Opacity="0.65" Text="{Binding [0]}" />
            </DataTemplate>
          </ControlTemplate.Resources>
          <Grid x:Name="PART_Root">
            <ctrl:Card Padding="0 -1 0 0" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" ClipContent="True">
              <Grid RenderOptions.ClearTypeHint="Enabled">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="auto" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Border x:Name="HeaderBorder" Grid.Row="0" Grid.RowSpan="1" Grid.Column="0" Grid.ColumnSpan="4" Background="{TemplateBinding p:HeaderAssist.Background}" />
                <Button x:Name="PART_HeaderButton" Style="{StaticResource MyNet.Styles.Button.Embedded.Calendar.Header}" Grid.Row="0" Grid.RowSpan="1" Grid.Column="0" Grid.ColumnSpan="4" Margin="20 15" p:CalendarAssist.Orientation="{TemplateBinding p:CalendarAssist.Orientation}" Foreground="{TemplateBinding p:HeaderAssist.Foreground}" Visibility="{TemplateBinding p:CalendarAssist.IsHeaderVisible, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                <TextBlock x:Name="CurrentDateTextBlock" Grid.Row="1" Grid.Column="1" Margin="13 8 8 8" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="14" FontWeight="SemiBold" Opacity="0.56" RenderTransformOrigin="0, 0.5">
                  <TextBlock.Text>
                    <MultiBinding Converter="{x:Static c:CalendarYearMonthConverter.Default}">
                      <Binding Path="DisplayDate" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Calendar}}" />
                      <Binding Path="Language" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Calendar}}" />
                    </MultiBinding>
                  </TextBlock.Text>
                  <TextBlock.RenderTransform>
                    <TranslateTransform X="0" Y="0" />
                  </TextBlock.RenderTransform>
                </TextBlock>
                <Button x:Name="PART_PreviousButton" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Grid.Row="1" Grid.Column="2" Margin="3 0" HorizontalAlignment="Left" Content="{me:ToolIcon Kind=ChevronLeft}" />
                <Button x:Name="PART_NextButton" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Grid.Row="1" Grid.Column="3" Margin="3 0" HorizontalAlignment="Right" Content="{me:ToolIcon Kind=ChevronRight}" />
                <Grid x:Name="MonthViewWrapperGrid" Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" Margin="6 -1 6 6" HorizontalAlignment="Center" VerticalAlignment="Top">
                  <Border x:Name="PART_MonthViewCopy" Margin="4 7 4 3" Opacity="0" RenderTransformOrigin="0, 0.5">
                    <Border.Background>
                      <VisualBrush Stretch="UniformToFill" Visual="{Binding ElementName=PART_MonthView}" />
                    </Border.Background>
                    <Border.RenderTransform>
                      <TranslateTransform X="0" />
                    </Border.RenderTransform>
                  </Border>
                  <Grid x:Name="PART_MonthView" IsSharedSizeScope="True" Opacity="1" RenderTransformOrigin="0, 0.5">
                    <Grid.RenderTransform>
                      <TranslateTransform X="0" />
                    </Grid.RenderTransform>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition SharedSizeGroup="WeekRow" />
                      <RowDefinition SharedSizeGroup="WeekRow" />
                      <RowDefinition SharedSizeGroup="WeekRow" />
                      <RowDefinition SharedSizeGroup="WeekRow" />
                      <RowDefinition SharedSizeGroup="WeekRow" />
                      <RowDefinition SharedSizeGroup="WeekRow" />
                      <RowDefinition SharedSizeGroup="WeekRow" />
                    </Grid.RowDefinitions>
                  </Grid>
                </Grid>
                <Grid x:Name="YearViewWrapperGrid" Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" Margin="6 -3 7 6" Visibility="Hidden">
                  <Border x:Name="PART_YearViewCopy" Margin="2" Opacity="0" RenderTransformOrigin="0, 0.5">
                    <Border.Background>
                      <VisualBrush Stretch="UniformToFill" Visual="{Binding ElementName=PART_YearView}" />
                    </Border.Background>
                    <Border.RenderTransform>
                      <TranslateTransform X="0" />
                    </Border.RenderTransform>
                  </Border>
                  <Grid x:Name="PART_YearView" RenderTransformOrigin="0, 0.5">
                    <Grid.RenderTransform>
                      <TranslateTransform X="0" />
                    </Grid.RenderTransform>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*" />
                      <RowDefinition Height="*" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                  </Grid>
                </Grid>
              </Grid>
            </ctrl:Card>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
              <Setter TargetName="MonthViewWrapperGrid" Property="Visibility" Value="Hidden" />
              <Setter TargetName="YearViewWrapperGrid" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
              <Setter TargetName="MonthViewWrapperGrid" Property="Visibility" Value="Hidden" />
              <Setter TargetName="YearViewWrapperGrid" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="p:CalendarAssist.Orientation" Value="Horizontal">
              <Setter TargetName="HeaderBorder" Property="Grid.ColumnSpan" Value="1" />
              <Setter TargetName="HeaderBorder" Property="Grid.RowSpan" Value="3" />
              <Setter TargetName="PART_HeaderButton" Property="Grid.ColumnSpan" Value="1" />
              <Setter TargetName="PART_HeaderButton" Property="Grid.RowSpan" Value="3" />
            </Trigger>
            <EventTrigger RoutedEvent="Button.Click" SourceName="PART_NextButton">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation AccelerationRatio="0.1" DecelerationRatio="0.89" EasingFunction="{StaticResource EasingFunction}" Storyboard.TargetName="CurrentDateTextBlock" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" From="240" To="0" Duration="0:0:0.450" />
                  <DoubleAnimation Storyboard.TargetName="PART_MonthViewCopy" Storyboard.TargetProperty="(UIElement.Opacity)" From="1" To="0" Duration="0:0:0.450" />
                  <DoubleAnimation AccelerationRatio="0.3" DecelerationRatio="0.69" Storyboard.TargetName="PART_MonthViewCopy" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" From="0" To="-270" Duration="0:0:0.450" />
                  <DoubleAnimation AccelerationRatio="0.3" DecelerationRatio="0.69" Storyboard.TargetName="PART_MonthView" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" From="270" To="0" Duration="0:0:0.450" />
                  <DoubleAnimation Storyboard.TargetName="PART_YearViewCopy" Storyboard.TargetProperty="(UIElement.Opacity)" From="1" To="0" Duration="0:0:0.450" />
                  <DoubleAnimation AccelerationRatio="0.3" DecelerationRatio="0.69" Storyboard.TargetName="PART_YearViewCopy" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" From="0" To="-240" Duration="0:0:0.450" />
                  <DoubleAnimation AccelerationRatio="0.3" DecelerationRatio="0.69" Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" From="240" To="0" Duration="0:0:0.450" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.Click" SourceName="PART_PreviousButton">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation AccelerationRatio="0.1" DecelerationRatio="0.89" EasingFunction="{StaticResource EasingFunction}" Storyboard.TargetName="CurrentDateTextBlock" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" From="-240" To="0" Duration="0:0:0.450" />
                  <DoubleAnimation Storyboard.TargetName="PART_MonthViewCopy" Storyboard.TargetProperty="(UIElement.Opacity)" From="1" To="0" Duration="0:0:0.450" />
                  <DoubleAnimation AccelerationRatio="0.3" DecelerationRatio="0.69" Storyboard.TargetName="PART_MonthViewCopy" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" From="0" To="270" Duration="0:0:0.450" />
                  <DoubleAnimation AccelerationRatio="0.3" DecelerationRatio="0.69" Storyboard.TargetName="PART_MonthView" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" From="-270" To="0" Duration="0:0:0.450" />
                  <DoubleAnimation Storyboard.TargetName="PART_YearViewCopy" Storyboard.TargetProperty="(UIElement.Opacity)" From="1" To="0" Duration="0:0:0.450" />
                  <DoubleAnimation AccelerationRatio="0.3" DecelerationRatio="0.69" Storyboard.TargetName="PART_YearViewCopy" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" From="0" To="240" Duration="0:0:0.450" />
                  <DoubleAnimation AccelerationRatio="0.3" DecelerationRatio="0.69" Storyboard.TargetName="PART_YearView" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" From="-240" To="0" Duration="0:0:0.450" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.Portrait" TargetType="{x:Type Calendar}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="CalendarButtonStyle" Value="{StaticResource MyNet.Styles.CalendarButton}" />
    <Setter Property="CalendarDayButtonStyle" Value="{StaticResource MyNet.Styles.CalendarDayButton}" />
    <Setter Property="CalendarItemStyle" Value="{StaticResource MyNet.Styles.CalendarItem.Portrait}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Calendar}">
          <CalendarItem x:Name="PART_CalendarItem" Style="{TemplateBinding CalendarItemStyle}" p:CalendarAssist.IsHeaderVisible="{TemplateBinding p:CalendarAssist.IsHeaderVisible}" p:CalendarAssist.Orientation="{TemplateBinding p:CalendarAssist.Orientation}" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" p:HeaderAssist.Background="{TemplateBinding p:HeaderAssist.Background}" p:HeaderAssist.Foreground="{TemplateBinding p:HeaderAssist.Foreground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Foreground="{TemplateBinding Foreground}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="p:CalendarAssist.Orientation" Value="Vertical" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:GlobalizationAssist.UpdateOnCultureChanged" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox" TargetType="{x:Type ToggleButton}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="Click">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Width)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Height)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid x:Name="templateRoot" Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Viewbox Width="18" Height="18" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FlowDirection="LeftToRight">
              <Canvas Width="24" Height="24">
                <Path x:Name="Graphic" Data="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:CheckBoxAssist.UncheckedPath)}" Fill="{TemplateBinding BorderBrush}" />
                <Ellipse x:Name="InteractionEllipse" Canvas.Left="12" Canvas.Top="12" Width="0" Height="0" Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBackground)}" IsHitTestVisible="False" Opacity="0" RenderTransformOrigin="0.5,0.5">
                  <Ellipse.RenderTransform>
                    <TransformGroup>
                      <ScaleTransform />
                      <SkewTransform />
                      <RotateTransform />
                      <TranslateTransform />
                    </TransformGroup>
                  </Ellipse.RenderTransform>
                </Ellipse>
              </Canvas>
            </Viewbox>
            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="true" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:RippleAssist.IsDisabled)}" Value="false" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource Click}" />
              </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>
            <Trigger Property="HasContent" Value="true">
              <Setter Property="Padding" Value="4 2 0 0" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true" />
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="Graphic" Property="Data" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:CheckBoxAssist.CheckedPath)}" />
              <Setter TargetName="Graphic" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBackground)}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
              <Setter TargetName="Graphic" Property="Data" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:CheckBoxAssist.IndeterminatePath)}" />
              <Setter TargetName="Graphic" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBackground)}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="true">
              <Setter TargetName="Graphic" Property="Fill" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
              <Setter TargetName="contentPresenter" Property="Control.Foreground" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="p:CheckBoxAssist.CheckedPath" Value="M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z" />
    <Setter Property="p:CheckBoxAssist.IndeterminatePath" Value="M6,13L6,11L18,11L18,13M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z" />
    <Setter Property="p:CheckBoxAssist.UncheckedPath" Value="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Accent" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Foreground" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Circle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox}">
    <Setter Property="p:CheckBoxAssist.CheckedPath" Value="M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
    <Setter Property="p:CheckBoxAssist.IndeterminatePath" Value="M17,13H7V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
    <Setter Property="p:CheckBoxAssist.UncheckedPath" Value="M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Circle.Accent" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Circle}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Circle.Foreground" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Circle}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Circle.Alternate" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Circle}">
    <Setter Property="p:CheckBoxAssist.CheckedPath" Value="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" />
    <Setter Property="p:CheckBoxAssist.IndeterminatePath" Value="M19,13H5V11H19V13Z" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Circle.Alternate.Accent" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Circle.Alternate}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Circle.Alternate.Foreground" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox.Circle.Alternate}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Embedded.ComboBox.HelperText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Secondary}">
    <Setter Property="FontSize" Value="{Binding Path=(p:HintAssist.HelperTextFontSize), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="FontStyle" Value="{Binding Path=(p:HintAssist.HelperTextFontStyle), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Foreground" Value="{Binding Path=(p:HintAssist.HelperTextForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="Margin" Value="{Binding Path=(p:HintAssist.HelperTextMargin), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Opacity" Value="{Binding Path=(p:HintAssist.HelperTextOpacity), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Text" Value="{Binding Path=(p:HintAssist.HelperText), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.ComboBox" TargetType="{x:Type ComboBox}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition x:Name="columnCaret" Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <!-- Mouse Over -->
            <Border x:Name="mouseOver" Grid.ColumnSpan="2" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Focus -->
            <Border x:Name="focus" Grid.ColumnSpan="2" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Ripple on focus -->
            <Border Grid.ColumnSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <ToggleButton x:Name="toggleButton" Style="{StaticResource MyNet.Styles.ToggleButton.Embedded.ComboBox}" Grid.ColumnSpan="2" Padding="{TemplateBinding Padding}" p:ComboBoxAssist.ShowCaret="{Binding Path=(p:ComboBoxAssist.ShowCaret), RelativeSource={RelativeSource TemplatedParent}}" p:ComboBoxAssist.ShowDropDownPopup="{Binding Path=(p:ComboBoxAssist.ShowDropDownPopup), RelativeSource={RelativeSource TemplatedParent}}" p:TextFieldAssist.IsReadOnly="{TemplateBinding IsReadOnly}" p:TextFieldAssist.RippleOnFocusEnabled="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Previous button -->
              <RepeatButton x:Name="PART_NumericDown" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{Binding Path=(p:TextFieldAssist.PreviousCommand), RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Path=(p:TextFieldAssist.PreviousButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
              <!-- Icon -->
              <ContentControl x:Name="Icon" Grid.Column="1" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <ContentControl.Resources>
                  <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                  <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                </ContentControl.Resources>
              </ContentControl>
              <Grid Grid.Column="2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <!-- Content -->
                <Grid x:Name="grid" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Selected Item -->
                    <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
                    <TextBox x:Name="PART_EditableTextBox" Style="{StaticResource MyNet.Styles.TextBox.Embedded}" Grid.Column="1" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" p:TextFieldAssist.Mask="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:TextFieldAssist.Mask)}" CaretBrush="{TemplateBinding BorderBrush}" IsReadOnly="{TemplateBinding IsReadOnly}" SelectionBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="Collapsed" />
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
              <!-- Clear button -->
              <Button x:Name="PART_ClearButton" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="3" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{x:Static p:TextFieldAssist.ClearCommand}" Content="{me:Icon Kind=Close,                                                       Size=16}" ToolTip="{me:Resource Clear}">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
              <!-- Next button -->
              <RepeatButton x:Name="PART_NumericUp" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="5" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{Binding Path=(p:TextFieldAssist.NextCommand), RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Path=(p:TextFieldAssist.NextButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            </Grid>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
      </Canvas>
      <!-- Popup -->
      <ctrl:ComboBoxPopup x:Name="PART_Popup" Grid.Column="0" AllowsTransparency="True" Background="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource TemplatedParent}}" ClassicContentTemplate="{StaticResource MyNet.Styles.ContentControl.Embedded.ComboBox.Popup}" ContentMargin="6,0,6,6" ContentMinWidth="{Binding Path=ActualWidth, ElementName=border}" DefaultVerticalOffset="-1" DownVerticalOffset="0" Focusable="False" HorizontalOffset="-7" Placement="Custom" PlacementTarget="{Binding ElementName=border}" PopupAnimation="Slide" RelativeHorizontalOffset="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.Foreground="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" UpVerticalOffset="15" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalOffset="0">
        <ctrl:ComboBoxPopup.IsOpen>
          <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}" Mode="OneWay">
            <Binding Path="IsDropDownOpen" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="(p:ComboBoxAssist.ShowDropDownPopup)" RelativeSource="{RelativeSource TemplatedParent}" />
          </MultiBinding>
        </ctrl:ComboBoxPopup.IsOpen>
        <ctrl:ComboBoxPopup.Style>
          <Style TargetType="{x:Type ctrl:ComboBoxPopup}">
            <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container.Bottom}" />
            <Style.Triggers>
              <Trigger Property="OpenDirection" Value="Up">
                <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container.Top}" />
              </Trigger>
            </Style.Triggers>
          </Style>
        </ctrl:ComboBoxPopup.Style>
        <ContentControl>
          <ctrl:DynamicScrollViewer MinHeight="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" Background="{Binding Background, ElementName=PART_Popup}" Foreground="{Binding ElementName=PART_Popup, Path=(TextElement.Foreground)}">
            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
          </ctrl:DynamicScrollViewer>
        </ContentControl>
      </ctrl:ComboBoxPopup>
    </Grid>
    <ControlTemplate.Triggers>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="4" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Show DropDown Popup -->
      <Trigger Property="p:ComboBoxAssist.ShowUpDownButton" Value="True">
        <Setter TargetName="PART_NumericDown" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_NumericUp" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="p:ComboBoxAssist.ShowDropDownPopup" Value="False">
        <Setter TargetName="PART_EditableTextBox" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="columnCaret" Property="MinWidth" Value="0" />
      </Trigger>
      <!-- Show Caret -->
      <Trigger Property="p:ComboBoxAssist.ShowCaret" Value="False">
        <Setter TargetName="columnCaret" Property="MinWidth" Value="0" />
      </Trigger>
      <!-- IsEditable -->
      <Trigger Property="IsEditable" Value="True">
        <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
        <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(p:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True" />
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
      </MultiTrigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="True" />
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="p:TextFieldAssist.IsEditable" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ClearButton" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_NumericDown" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_NumericUp" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="toggleButton" Property="p:TextFieldAssist.TextBoxViewMargin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- IsKeyboardFocused -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter TargetName="toggleButton" Property="BorderBrush" Value="{Binding Path=(p:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
      </MultiTrigger>
      <!-- IsDropDownOpen -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsDropDownOpen" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter TargetName="toggleButton" Property="BorderBrush" Value="{Binding Path=(p:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
      <!-- IsReadOnly -->
      <Trigger Property="IsReadOnly" Value="True">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Opacity" Value="1" />
        <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_NumericDown" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_NumericUp" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="border" Property="Opacity" Value="1" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
        <Setter TargetName="grid" Property="Opacity" Value="1" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.ComboBoxItem" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
    <Setter Property="ContentTemplate" Value="{x:Null}" />
    <Setter Property="p:ComboBoxAssist.ShowSelectedItem" Value="{Binding Path=(p:ComboBoxAssist.ShowSelectedItem), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox" TargetType="{x:Type ComboBox}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="IsTextSearchEnabled" Value="True" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ComboBoxItem}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.ComboBox}" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:ComboBoxAssist.ShowSelectedItem" Value="True" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.ComboBox.HelperText}" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:PopupAssist.Foreground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle" Value="{StaticResource MyNet.Styles.Button.Icon.Tool}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.NextButtonContent" Value="{StaticResource MyNet.Icons.ChevronRight.Medium}" />
    <Setter Property="p:TextFieldAssist.PreviousButtonContent" Value="{StaticResource MyNet.Icons.ChevronLeft.Medium}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
    <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
    <Style.Triggers>
      <Trigger Property="IsEditable" Value="True">
        <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="p:ComboBoxAssist.ShowSelectedItem" Value="True" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Foreground" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Filled" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Filled.Foreground" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Filled.Alternate" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Filled}">
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Filled.Alternate.Foreground" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Outlined" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Outlined.Foreground" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.AutoCompletion" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox}">
    <Setter Property="IsEditable" Value="True" />
    <Setter Property="p:ComboBoxAssist.ShowDropDownPopup" Value="False" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Numeric" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox}">
    <Setter Property="IsEditable" Value="True" />
    <Setter Property="IsTextSearchEnabled" Value="True" />
    <Setter Property="p:ComboBoxAssist.ShowCaret" Value="False" />
    <Setter Property="p:ComboBoxAssist.ShowUpDownButton" Value="True" />
    <Setter Property="p:TextFieldAssist.Mask" Value="PositiveDecimal" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Numeric.Foreground" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Foreground}">
    <Setter Property="IsEditable" Value="True" />
    <Setter Property="IsTextSearchEnabled" Value="True" />
    <Setter Property="p:ComboBoxAssist.ShowCaret" Value="False" />
    <Setter Property="p:ComboBoxAssist.ShowUpDownButton" Value="True" />
    <Setter Property="p:TextFieldAssist.Mask" Value="PositiveDecimal" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.DropDown" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox}">
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:ComboBoxAssist.ShowCaret" Value="False" />
    <Setter Property="p:ComboBoxAssist.ShowUpDownButton" Value="True" />
    <Setter Property="p:TextFieldAssist.NextCommand" Value="{x:Static cmd:AppCommands.ComboBoxUpCommand}" />
    <Setter Property="p:TextFieldAssist.PreviousCommand" Value="{x:Static cmd:AppCommands.ComboBoxDownCommand}" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.DropDown.Foreground" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.DropDown}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.DropDown.Filled" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.DropDown}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text.Foreground}">
          <Setter Property="Focusable" Value="False" />
          <Setter Property="Padding" Value="3 0" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.DropDown.Filled.Foreground" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.DropDown.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.DropDown.Outlined" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.DropDown.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.DropDown.Outlined.Foreground" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.DropDown.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Hour" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.DropDown}">
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{me:DisplayDateTime Format=t}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsSource" Value="{me:HourRange Start=0, End=23}" />
    <Setter Property="p:TextFieldAssist.Mask" Value="Time" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Hour.Foreground" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Hour}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Hour.Filled" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Hour}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Hour.Filled.Foreground" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Hour.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Hour.Outlined" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Hour.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Hour.Outlined.Foreground" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Hour.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Embedded.DataGrid" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="IsHitTestVisible" Value="False" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridCell}}}" Value="True">
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Embedded.DataGrid.Edition" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox}">
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Embedded.DataGrid.Edition" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.Foreground}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="-1 0 -1 -2" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.DataGridCell" TargetType="{x:Type DataGridCell}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=DataGridRow}}" />
    <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(p:DataGridAssist.CellPadding)}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridCell}">
          <Grid>
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" />
            <ContentPresenter Margin="{TemplateBinding Padding}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Validation.ErrorTemplate="{x:Null}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Style.Triggers>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=(p:DataGridAssist.SelectedCellBorderBrush)}" />
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(p:ListBoxItemAssist.ShowSelection), RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="True" />
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource AncestorType=DataGridRow}}" />
        <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType=DataGridRow}}" />
      </MultiDataTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.Embedded.DatePicker" TargetType="{x:Type Calendar}" BasedOn="{StaticResource MyNet.Styles.Calendar.Portrait}">
    <Setter Property="Margin" Value="16 8 16 24" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Popup}" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.DatePicker" TargetType="{x:Type DatePicker}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <!-- Mouse Over -->
            <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Focus -->
            <Border x:Name="focus" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Ripple on focus -->
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Previous button -->
              <RepeatButton x:Name="PART_Previous" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{Binding Path=(p:TextFieldAssist.PreviousCommand), RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Path=(p:TextFieldAssist.PreviousButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:TextFieldAssist.PreviousCommand), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
              <!-- Icon -->
              <ContentControl x:Name="Icon" Grid.Column="1" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <ContentControl.Resources>
                  <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                  <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                </ContentControl.Resources>
              </ContentControl>
              <Grid Grid.Column="2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <!-- Content -->
                <Grid x:Name="grid" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Host Text -->
                    <DatePickerTextBox x:Name="PART_TextBox" Style="{StaticResource MyNet.Styles.TextBox.Embedded}" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="Center" CaretBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" IsReadOnly="{Binding Path=(p:TextFieldAssist.IsReadOnly), RelativeSource={RelativeSource TemplatedParent}}" SelectionBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{Binding Path=(p:TextFieldAssist.IsEditable), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                    <TextBlock Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" Visibility="{Binding Path=(p:TextFieldAssist.IsEditable), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}">
                      <TextBlock.Text>
                        <MultiBinding Converter="{x:Static c:StringConverter.ToTitle}">
                          <Binding Path="SelectedDate" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:TextFieldAssist.Format)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Text>
                    </TextBlock>
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
              <!-- Calendar button -->
              <Button x:Name="PART_Button" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Grid.Column="4" Content="{me:Icon Kind=Calendar}" />
              <!-- Clear button -->
              <Button x:Name="PART_ClearButton" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="3" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{x:Static p:TextFieldAssist.ClearCommand}" Content="{me:Icon Kind=Close,                                                       Size=16}" ToolTip="{me:Resource Clear}">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
              <!-- Next button -->
              <RepeatButton x:Name="PART_Next" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="6" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{Binding Path=(p:TextFieldAssist.NextCommand), RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Path=(p:TextFieldAssist.NextButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:TextFieldAssist.NextCommand), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            </Grid>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="CharacterCounterContainer" Grid.Column="1">
            <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding Path=(p:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </Grid>
      </Canvas>
      <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=border}" PopupAnimation="Slide" StaysOpen="False" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="p:CalendarAssist.IsHeaderVisible" Value="False">
        <Setter Property="CalendarStyle">
          <Setter.Value>
            <Style TargetType="Calendar" BasedOn="{StaticResource MyNet.Styles.Calendar.Embedded.DatePicker}">
              <Setter Property="p:CalendarAssist.IsHeaderVisible" Value="False" />
            </Style>
          </Setter.Value>
        </Setter>
      </Trigger>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="5" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="p:TextFieldAssist.IsEditable" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Button" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_ClearButton" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_Next" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_Previous" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- IsKeyboardFocused -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
      </MultiTrigger>
      <!-- IsDropDownOpen -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="PART_Button" Property="Foreground" Value="{Binding Path=(p:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
      <!-- IsReadOnly -->
      <Trigger Property="p:TextFieldAssist.IsReadOnly" Value="True">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Opacity" Value="1" />
        <Setter TargetName="PART_Button" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
        <Setter TargetName="border" Property="Opacity" Value="1" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
        <Setter TargetName="grid" Property="Opacity" Value="1" />
      </Trigger>
      <!-- IsEditable -->
      <Trigger Property="p:TextFieldAssist.IsEditable" Value="False">
        <Setter TargetName="PART_Button" Property="Content" Value="" />
        <Setter TargetName="PART_Button" Property="Grid.Column" Value="1" />
        <Setter TargetName="PART_Button" Property="Grid.ColumnSpan" Value="3" />
        <Setter TargetName="PART_Button" Property="Height" Value="Auto" />
        <Setter TargetName="PART_Button" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="PART_Button" Property="Style" Value="{StaticResource MyNet.Styles.Button.Embedded.DatePicker}" />
        <Setter TargetName="PART_Button" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="PART_Button" Property="Width" Value="Auto" />
        <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
        <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.DatePicker" TargetType="{x:Type DatePicker}">
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="CalendarStyle" Value="{StaticResource MyNet.Styles.Calendar.Embedded.DatePicker}" />
    <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="IsTodayHighlighted" Value="True" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="SelectedDateFormat" Value="Short" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.DatePicker}" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.TextBox.HelperText}" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle" Value="{StaticResource MyNet.Styles.Button.Icon.Tool}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.NextButtonContent" Value="{StaticResource MyNet.Icons.ChevronRight.Medium}" />
    <Setter Property="p:TextFieldAssist.PreviousButtonContent" Value="{StaticResource MyNet.Icons.ChevronLeft.Medium}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
    <Setter Property="p:GlobalizationAssist.UpdateOnCultureChanged" Value="True" />
    <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.Foreground" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.Filled" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.Filled.Foreground" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.Filled.Alternate" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.Filled}">
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.Filled.Alternate.Foreground" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.Outlined" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.Outlined.Foreground" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.DropDown" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker}">
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="p:TextFieldAssist.Format" Value="dd MMM" />
    <Setter Property="p:TextFieldAssist.IsEditable" Value="False" />
    <Setter Property="p:TextFieldAssist.NextCommand" Value="{x:Static cmd:AppCommands.NextDayCommand}" />
    <Setter Property="p:TextFieldAssist.PreviousCommand" Value="{x:Static cmd:AppCommands.PreviousDayCommand}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.DropDown.Foreground" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.DropDown}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.DropDown.Filled" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.DropDown}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text.Foreground}">
          <Setter Property="Padding" Value="3 0" />
          <Setter Property="Focusable" Value="False" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.DropDown.Filled.Foreground" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.DropDown.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.DropDown.Outlined" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.DropDown.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.DropDown.Outlined.Foreground" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.DropDown.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <DataTemplate x:Key="MyNet.DataTemplates.GroupBox.Header">
    <DataTemplate.Resources>
      <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
        <Setter Property="Height" Value="24" />
        <Setter Property="Width" Value="24" />
      </Style>
      <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
        <Setter Property="Height" Value="24" />
        <Setter Property="Width" Value="24" />
      </Style>
    </DataTemplate.Resources>
    <Grid VerticalAlignment="Center">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <ContentControl Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
      <ContentControl x:Name="Header" Grid.Column="1" HorizontalAlignment="Left" Content="{Binding}" Typography.Capitals="{Binding Path=(p:HeaderAssist.Capitals), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" />
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=(p:GroupBoxAssist.Command), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}, Converter={x:Static c:NullToBooleanConverter.TrueIfNull}}" Value="False">
        <Setter TargetName="Header" Property="ContentTemplate">
          <Setter.Value>
            <DataTemplate>
              <Button Style="{StaticResource MyNet.Styles.Button.HyperLink}" Padding="1" HorizontalAlignment="Left" BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" Command="{Binding Path=(p:GroupBoxAssist.Command), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" CommandParameter="{Binding Path=(p:GroupBoxAssist.CommandParameter), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" Visibility="{Binding Path=(p:GroupBoxAssist.Command), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <StackPanel Orientation="Horizontal">
                  <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}" Foreground="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" Opacity="{StaticResource MyNet.Opacity.Default}" Text="{Binding}" />
                  <ctrl:PackIcon VerticalAlignment="Center" Kind="ChevronRight" />
                </StackPanel>
              </Button>
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation" TargetType="{x:Type GroupBox}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HeaderTemplate" Value="{StaticResource MyNet.DataTemplates.GroupBox.Header}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupBox}">
          <ctrl:Card Style="{Binding Path=(p:CardAssist.Style), RelativeSource={RelativeSource TemplatedParent}}" Padding="0" p:ElevationAssist.Elevation="{Binding Path=(p:ElevationAssist.Elevation), RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UniformCornerRadius="{Binding Path=(p:ThemeAssist.UniformCornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="Col1" Width="*" />
                <ColumnDefinition x:Name="Col2" Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition x:Name="Row1" Height="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
                <RowDefinition x:Name="Row2" Height="*" />
              </Grid.RowDefinitions>
              <!-- Header -->
              <Border x:Name="Header" Padding="{Binding Path=(p:HeaderAssist.Padding), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(p:HeaderAssist.Background), RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.UniformCornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleToCornerRadiusConverter.Top}}" DockPanel.Dock="Top">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <ContentPresenter HorizontalAlignment="{Binding Path=(p:HeaderAssist.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(p:HeaderAssist.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Opacity="{Binding Path=(p:HeaderAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.FontSize="{Binding Path=(p:HeaderAssist.FontSize), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" TextElement.Foreground="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" />
                  <ContentControl Grid.Column="1" Margin="{StaticResource MyNet.Margins.Large.Left}" HorizontalAlignment="Right" VerticalAlignment="Center" Content="{Binding Path=(p:GroupBoxAssist.MoreContent), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" DockPanel.Dock="Right" Foreground="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" Visibility="{Binding Path=(p:GroupBoxAssist.MoreContent), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                    <ContentControl.Resources>
                      <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}">
                        <Setter Property="Height" Value="22" />
                        <Setter Property="Width" Value="22" />
                      </Style>
                    </ContentControl.Resources>
                  </ContentControl>
                </Grid>
              </Border>
              <!-- Content -->
              <ContentPresenter x:Name="Content" Grid.Row="1" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </ctrl:Card>
          <ControlTemplate.Triggers>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Left">
              <Setter TargetName="Col1" Property="Width" Value="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="Col2" Property="Width" Value="*" />
              <Setter TargetName="Content" Property="Grid.Column" Value="1" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
              <Setter TargetName="Header" Property="Grid.Column" Value="0" />
              <Setter TargetName="Header" Property="Grid.Row" Value="0" />
              <Setter TargetName="Row1" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="Auto" />
            </Trigger>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Right">
              <Setter TargetName="Col1" Property="Width" Value="*" />
              <Setter TargetName="Col2" Property="Width" Value="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="Content" Property="Grid.Column" Value="0" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
              <Setter TargetName="Header" Property="Grid.Column" Value="1" />
              <Setter TargetName="Header" Property="Grid.Row" Value="0" />
              <Setter TargetName="Row1" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="Auto" />
            </Trigger>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Bottom">
              <Setter TargetName="Col1" Property="Width" Value="*" />
              <Setter TargetName="Col2" Property="Width" Value="Auto" />
              <Setter TargetName="Content" Property="Grid.Column" Value="0" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
              <Setter TargetName="Header" Property="Grid.Column" Value="0" />
              <Setter TargetName="Header" Property="Grid.Row" Value="1" />
              <Setter TargetName="Row1" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:CardAssist.Style" Value="{StaticResource MyNet.Styles.Card.Elevation}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    <Setter Property="p:HeaderAssist.FontSize" Value="{StaticResource MyNet.Font.Size.Caption}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Medium.Right}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Application" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Application.Light" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Application.Dark" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Dark}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Primary" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Accent" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Custom" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation}">
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Foreground" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation.Custom}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Foreground.SemiTransparent" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Outlined" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="p:CardAssist.Style" Value="{StaticResource MyNet.Styles.Card.Outlined}" />
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Outlined.Application" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Outlined}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Outlined.Application.Light" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Outlined}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Outlined.Application.Dark" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Outlined}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Application.Background.Dark}" />
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Dark}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Outlined.Primary" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Outlined}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Outlined.Accent" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Outlined}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Outlined.Custom" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Outlined}">
    <Setter Property="p:HeaderAssist.Background" Value="{me:BrushBinding SelfPath=BorderBrush}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Outlined.Foreground" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Outlined.Custom}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Header" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupBox}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.UniformCornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleToCornerRadiusConverter.All}}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="Col1" Width="*" />
                <ColumnDefinition x:Name="Col2" Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition x:Name="Row1" Height="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
                <RowDefinition x:Name="Row2" Height="*" />
              </Grid.RowDefinitions>
              <!-- Header -->
              <ctrl:Card x:Name="Header" Style="{Binding Path=(p:CardAssist.Style), RelativeSource={RelativeSource TemplatedParent}}" Padding="{Binding Path=(p:HeaderAssist.Padding), RelativeSource={RelativeSource TemplatedParent}}" p:ElevationAssist.Elevation="{Binding Path=(p:ElevationAssist.Elevation), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(p:HeaderAssist.Background), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{TemplateBinding Foreground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" DockPanel.Dock="Top" UniformCornerRadius="{Binding Path=(p:ThemeAssist.UniformCornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <ContentPresenter HorizontalAlignment="{Binding Path=(p:HeaderAssist.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(p:HeaderAssist.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Opacity="{Binding Path=(p:HeaderAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.FontSize="{Binding Path=(p:HeaderAssist.FontSize), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" TextElement.Foreground="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" />
                  <ContentControl Grid.Column="1" Margin="{StaticResource MyNet.Margins.Large.Left}" HorizontalAlignment="Right" VerticalAlignment="Center" Content="{Binding Path=(p:GroupBoxAssist.MoreContent), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" DockPanel.Dock="Right" Foreground="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" Visibility="{Binding Path=(p:GroupBoxAssist.MoreContent), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                    <ContentControl.Resources>
                      <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}">
                        <Setter Property="Height" Value="22" />
                        <Setter Property="Width" Value="22" />
                      </Style>
                    </ContentControl.Resources>
                  </ContentControl>
                </Grid>
              </ctrl:Card>
              <!-- Content -->
              <ContentPresenter x:Name="Content" Grid.Row="1" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Left">
              <Setter TargetName="Col1" Property="Width" Value="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="Col2" Property="Width" Value="*" />
              <Setter TargetName="Content" Property="Grid.Column" Value="1" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
              <Setter TargetName="Header" Property="Grid.Column" Value="0" />
              <Setter TargetName="Header" Property="Grid.Row" Value="0" />
              <Setter TargetName="Row1" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="Auto" />
            </Trigger>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Right">
              <Setter TargetName="Col1" Property="Width" Value="*" />
              <Setter TargetName="Col2" Property="Width" Value="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="Content" Property="Grid.Column" Value="0" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
              <Setter TargetName="Header" Property="Grid.Column" Value="1" />
              <Setter TargetName="Header" Property="Grid.Row" Value="0" />
              <Setter TargetName="Row1" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="Auto" />
            </Trigger>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Bottom">
              <Setter TargetName="Col1" Property="Width" Value="*" />
              <Setter TargetName="Col2" Property="Width" Value="Auto" />
              <Setter TargetName="Content" Property="Grid.Column" Value="0" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
              <Setter TargetName="Header" Property="Grid.Column" Value="0" />
              <Setter TargetName="Header" Property="Grid.Row" Value="1" />
              <Setter TargetName="Row1" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:CardAssist.Style" Value="{StaticResource MyNet.Styles.Card.Elevation}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Header.Application" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation.Header}">
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Header.Application.Light" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation.Header}">
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Header.Application.Dark" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation.Header}">
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Dark}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Header.Primary" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation.Header}">
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Header.Accent" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation.Header}">
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Header.Custom" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation.Header}">
    <Setter Property="p:HeaderAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:HeaderAssist.Background), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Elevation.Header.Foreground" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation.Header.Custom}">
    <Setter Property="p:HeaderAssist.Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Bordered" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupBox}">
          <Border Background="{TemplateBinding Background}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="Col1" Width="*" />
                <ColumnDefinition x:Name="Col2" Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition x:Name="Row1" Height="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
                <RowDefinition x:Name="Row2" Height="*" />
              </Grid.RowDefinitions>
              <!-- Header -->
              <Border x:Name="Header" Padding="{Binding Path=(p:HeaderAssist.Padding), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(p:HeaderAssist.Background), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" DockPanel.Dock="Top">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <ContentControl HorizontalAlignment="{Binding Path=(p:HeaderAssist.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(p:HeaderAssist.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" FontSize="{Binding Path=(p:HeaderAssist.FontSize), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" Foreground="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" Opacity="{Binding Path=(p:HeaderAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  <ContentControl Grid.Column="1" Margin="{StaticResource MyNet.Margins.Large.Left}" HorizontalAlignment="Right" VerticalAlignment="Center" Content="{Binding Path=(p:GroupBoxAssist.MoreContent), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" DockPanel.Dock="Right" Foreground="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}}" Visibility="{Binding Path=(p:GroupBoxAssist.MoreContent), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GroupBox}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                    <ContentControl.Resources>
                      <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}">
                        <Setter Property="Height" Value="22" />
                        <Setter Property="Width" Value="22" />
                      </Style>
                    </ContentControl.Resources>
                  </ContentControl>
                </Grid>
              </Border>
              <!-- Content -->
              <ContentPresenter x:Name="Content" Grid.Row="1" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Left">
              <Setter TargetName="Col1" Property="Width" Value="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="Col2" Property="Width" Value="*" />
              <Setter TargetName="Content" Property="Grid.Column" Value="1" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
              <Setter TargetName="Header" Property="Grid.Column" Value="0" />
              <Setter TargetName="Header" Property="Grid.Row" Value="0" />
              <Setter TargetName="Row1" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="Auto" />
            </Trigger>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Right">
              <Setter TargetName="Col1" Property="Width" Value="*" />
              <Setter TargetName="Col2" Property="Width" Value="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="Content" Property="Grid.Column" Value="0" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
              <Setter TargetName="Header" Property="Grid.Column" Value="1" />
              <Setter TargetName="Header" Property="Grid.Row" Value="0" />
              <Setter TargetName="Row1" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="Auto" />
            </Trigger>
            <Trigger Property="p:HeaderAssist.Alignment" Value="Bottom">
              <Setter TargetName="Col1" Property="Width" Value="*" />
              <Setter TargetName="Col2" Property="Width" Value="Auto" />
              <Setter TargetName="Content" Property="Grid.Column" Value="0" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
              <Setter TargetName="Header" Property="Grid.Column" Value="0" />
              <Setter TargetName="Header" Property="Grid.Row" Value="1" />
              <Setter TargetName="Row1" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="{Binding Path=(p:HeaderAssist.Size), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:HeaderAssist.Background" Value="Transparent" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Bordered.Application" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Bordered}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Bordered.Application.Light" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Bordered}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Bordered.Application.Dark" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Bordered}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Application.Background.Dark}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Bordered.Primary" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Bordered}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Bordered.Accent" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Bordered}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Bordered.Foreground" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Bordered}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Bordered}">
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:HeaderAssist.Capitals" Value="Normal" />
    <Setter Property="p:HeaderAssist.FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Secondary}}" />
    <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="Center" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Medium.Bottom}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.Right" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean}">
    <Setter Property="p:HeaderAssist.Alignment" Value="Right" />
    <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="Right" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Medium.Left}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.Left" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean}">
    <Setter Property="p:HeaderAssist.Alignment" Value="Left" />
    <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="Left" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Medium.Right}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.Bottom" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean}">
    <Setter Property="p:HeaderAssist.Alignment" Value="Bottom" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Medium.Top}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.SubCaption" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean}">
    <Setter Property="p:HeaderAssist.Capitals" Value="AllSmallCaps" />
    <Setter Property="p:HeaderAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.Caption" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean}">
    <Setter Property="p:HeaderAssist.Capitals" Value="AllSmallCaps" />
    <Setter Property="p:HeaderAssist.FontSize" Value="{StaticResource MyNet.Font.Size.Caption}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.Caption.Right" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean.Caption}">
    <Setter Property="p:HeaderAssist.Alignment" Value="Right" />
    <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="Right" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Medium.Left}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.Caption.Left" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean.Caption}">
    <Setter Property="p:HeaderAssist.Alignment" Value="Left" />
    <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="Left" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Medium.Right}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.Caption.Bottom" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean.Caption}">
    <Setter Property="p:HeaderAssist.Alignment" Value="Bottom" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Medium.Top}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.Title" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean}">
    <Setter Property="p:HeaderAssist.Capitals" Value="AllSmallCaps" />
    <Setter Property="p:HeaderAssist.FontSize" Value="{StaticResource MyNet.Font.Size.Title}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.Title.Right" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean.Title}">
    <Setter Property="p:HeaderAssist.Alignment" Value="Right" />
    <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="Right" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Medium.Left}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.Title.Left" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean.Title}">
    <Setter Property="p:HeaderAssist.Alignment" Value="Left" />
    <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="Left" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Medium.Right}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Clean.Title.Bottom" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean.Title}">
    <Setter Property="p:HeaderAssist.Alignment" Value="Bottom" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Medium.Top}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Label" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Header}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:HeaderAssist.Alignment" Value="Bottom" />
    <Setter Property="p:HeaderAssist.FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="Center" />
    <Setter Property="p:HeaderAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:HeaderAssist.Padding" Value="5 0 5 5" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Label.Application" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Label.Application.Light" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Label.Application.Dark" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Dark}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Label.Primary" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Label.Accent" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Label.Custom" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Label}">
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Label.Foreground" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Label.Custom}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.StringsList" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean.Caption}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:GhostControl ShowGhost="{Binding Count, Converter={x:Static c:CountToBooleanConverter.NotAny}}">
            <ItemsControl Style="{StaticResource MyNet.Styles.ItemsControl}" ItemsSource="{Binding}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <ctrl:SimpleStackPanel IsItemsHost="True" Spacing="{StaticResource MyNet.Margin.Default}" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <DockPanel>
                    <ctrl:PackIcon Margin="{StaticResource MyNet.Margins.Default.Right}" DockPanel.Dock="Left" Kind="ChevronRight" />
                    <TextBlock Text="{Binding}" TextWrapping="Wrap" />
                  </DockPanel>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
          </ctrl:GhostControl>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Label" TargetType="{x:Type Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="6 3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Label}">
          <ctrl:Card Style="{Binding Path=(p:CardAssist.Style), RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" p:ElevationAssist.Elevation="{Binding Path=(p:ElevationAssist.Elevation), RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UniformCornerRadius="{Binding Path=(p:ThemeAssist.UniformCornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </ctrl:Card>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:CardAssist.Style" Value="{StaticResource MyNet.Styles.Card.Elevation}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Control}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Control}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Application" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Application.Light" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Application.Dark" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Dark}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Primary" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Accent" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Custom" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label}">
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Foreground" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Custom}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Elevation" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Elevation.Application" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Application}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Elevation.Application.Dark" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Application.Dark}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Elevation.Primary" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Primary}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Elevation.Accent" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Accent}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Elevation.Custom" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Custom}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Elevation.Foreground" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Foreground}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Outlined" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation}">
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="p:CardAssist.Style" Value="{StaticResource MyNet.Styles.Card.Outlined}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label}">
    <Setter Property="Height" Value="35" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Width" Value="35" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="100" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded.Application" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded.Primary" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded.Accent" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded.Custom" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded}">
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded.Foreground" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Custom}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded.Elevation" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded.Elevation.Application" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Application}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded.Elevation.Primary" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Primary}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded.Elevation.Accent" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Accent}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded.Elevation.Custom" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Custom}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Rounded.Elevation.Foreground" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Foreground}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Message" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation.Custom}">
    <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplates.Icon.Label}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Message.Warning" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Message}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Warning}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Warning}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Message.Success" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Message}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Positive}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Check}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Message.Error" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Message}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Negative}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Close}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Message.Information" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Message}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=InformationCircle}" />
  </Style>
  <Style x:Key="MyNet.Styles.Label.Legend" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Label}">
          <ctrl:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
            <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}" Width="18" Height="18" Background="{TemplateBinding Background}" />
            <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
          </ctrl:SimpleStackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBoxItem.Tab" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
    <Setter Property="BorderBrush" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="BorderThickness" Value="0 0 0 2" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Tab}" />
    <Setter Property="FontWeight" Value="{StaticResource MyNet.Font.Weight.Header}" />
    <Setter Property="Padding" Value="16 12" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <RadioButton x:Name="RadioButton" Style="{StaticResource MyNet.Styles.RadioButton.Tab}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" p:IconAssist.Alignment="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource TemplatedParent}}" p:IconAssist.Icon="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" p:IconAssist.Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" p:IconAssist.Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" p:RippleAssist.Feedback="{Binding Path=(p:RippleAssist.Feedback), RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" TextOptions.TextFormattingMode="Ideal" TextOptions.TextRenderingMode="Auto" Typography.Capitals="{TemplateBinding Typography.Capitals}" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="RadioButton" Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{Binding Path=(p:RippleAssist.Feedback), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.Embedded.ListView" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.Embedded.ListView" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
        <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Card.Popup" TargetType="{x:Type ctrl:Card}" BasedOn="{StaticResource MyNet.Styles.Card.Elevation}">
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:Card}">
          <Grid Background="Transparent">
            <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
              <AdornerDecorator.OpacityMask>
                <MultiBinding Converter="{x:Static c:ShadowEdgeConverter.Default}">
                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="(p:ElevationAssist.Elevation)" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="(p:ShadowAssist.ShadowEdges)" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </AdornerDecorator.OpacityMask>
              <Grid>
                <Border x:Name="background" CornerRadius="{Binding UniformCornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleToCornerRadiusConverter.All}}" Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}">
                  <Border x:Name="PART_ClipBorder" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Clip="{TemplateBinding ContentClip}" CornerRadius="{Binding UniformCornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleToCornerRadiusConverter.All}}" />
                </Border>
                <Path x:Name="path" Fill="{TemplateBinding Background}" Visibility="Collapsed" />
              </Grid>
            </AdornerDecorator>
            <Grid x:Name="content">
              <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ClipContent" Value="True">
              <Setter TargetName="ContentPresenter" Property="Clip" Value="{Binding ContentClip, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="BottomAndAlignLeftEdges" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="3 8 3 3" />
              <Setter TargetName="content" Property="Margin" Value="3 8 3 3" />
              <Setter TargetName="path" Property="Data" Value="M 16 8 L 8,0 L 0,8 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Left" />
              <Setter TargetName="path" Property="Margin" Value="15 0 0 0" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Top" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="BottomAndAlignRightEdges" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="3 8 3 3" />
              <Setter TargetName="content" Property="Margin" Value="3 8 3 3" />
              <Setter TargetName="path" Property="Data" Value="M 16 8 L 8,0 L 0,8 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Right" />
              <Setter TargetName="path" Property="Margin" Value="0 0 15 0" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Top" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="BottomAndAlignCentres" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="3 8 3 3" />
              <Setter TargetName="content" Property="Margin" Value="3 8 3 3" />
              <Setter TargetName="path" Property="Data" Value="M 16 8 L 8,0 L 0,8 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Center" />
              <Setter TargetName="path" Property="Margin" Value="0" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Top" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="TopAndAlignLeftEdges" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="3 3 3 8" />
              <Setter TargetName="content" Property="Margin" Value="3 3 3 8" />
              <Setter TargetName="path" Property="Data" Value="M 8 8 L 16,0 L 0,0 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Left" />
              <Setter TargetName="path" Property="Margin" Value="15 0 0 0" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Bottom" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="TopAndAlignRightEdges" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="3 3 3 8" />
              <Setter TargetName="content" Property="Margin" Value="3 3 3 8" />
              <Setter TargetName="path" Property="Data" Value="M 8 8 L 16,0 L 0,0 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Right" />
              <Setter TargetName="path" Property="Margin" Value="0 0 15 0" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Bottom" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="TopAndAlignCentres" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="3 3 3 8" />
              <Setter TargetName="content" Property="Margin" Value="3 3 3 8" />
              <Setter TargetName="path" Property="Data" Value="M 8 8 L 16,0 L 0,0 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Center" />
              <Setter TargetName="path" Property="Margin" Value="0" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Bottom" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="LeftAndAlignTopEdges" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="3 3 8 3" />
              <Setter TargetName="content" Property="Margin" Value="3 3 8 3" />
              <Setter TargetName="path" Property="Data" Value="M 8 8 L 0,16 L 0,0 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Right" />
              <Setter TargetName="path" Property="Margin" Value="0 15 0 0" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Top" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="LeftAndAlignBottomEdges" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="3 3 8 3" />
              <Setter TargetName="content" Property="Margin" Value="3 3 8 3" />
              <Setter TargetName="path" Property="Data" Value="M 8 8 L 0,16 L 0,0 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Right" />
              <Setter TargetName="path" Property="Margin" Value="0 0 0 15" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Bottom" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="LeftAndAlignMiddles" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="3 3 8 3" />
              <Setter TargetName="content" Property="Margin" Value="3 3 8 3" />
              <Setter TargetName="path" Property="Data" Value="M 8 8 L 0,16 L 0,0 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Right" />
              <Setter TargetName="path" Property="Margin" Value="0" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Center" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="RightAndAlignTopEdges" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="8 3 3 3" />
              <Setter TargetName="content" Property="Margin" Value="8 3 3 3" />
              <Setter TargetName="path" Property="Data" Value="M 8 0 L 8,16 L 0,8 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Left" />
              <Setter TargetName="path" Property="Margin" Value="0 15 0 0" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Top" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="RightAndAlignBottomEdges" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="8 3 3 3" />
              <Setter TargetName="content" Property="Margin" Value="8 3 3 3" />
              <Setter TargetName="path" Property="Data" Value="M 8 0 L 8,16 L 0,8 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Left" />
              <Setter TargetName="path" Property="Margin" Value="0 0 0 15" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Bottom" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="p:PopupAssist.ShowIndicator" Value="True" />
                <Condition Property="p:PopupAssist.PlacementMode" Value="RightAndAlignMiddles" />
              </MultiTrigger.Conditions>
              <Setter TargetName="background" Property="Margin" Value="8 3 3 3" />
              <Setter TargetName="content" Property="Margin" Value="8 3 3 3" />
              <Setter TargetName="path" Property="Data" Value="M 8 0 L 8,16 L 0,8 Z" />
              <Setter TargetName="path" Property="HorizontalAlignment" Value="Left" />
              <Setter TargetName="path" Property="Margin" Value="0" />
              <Setter TargetName="path" Property="VerticalAlignment" Value="Center" />
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Popup}" />
  </Style>
  <Style x:Key="MyNet.Styles.MenuItem" TargetType="{x:Type MenuItem}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ClipToBounds" Value="False" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Menu}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Padding" Value="24 0 24 0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid>
            <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" />
            <Border x:Name="BackgroundRoot" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" SnapsToDevicePixels="True" />
            <ctrl:Ripple HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Background="Transparent" Focusable="False">
              <Grid Height="{TemplateBinding Height}" Background="Transparent">
                <Grid Margin="{TemplateBinding Padding}" VerticalAlignment="Center" Background="Transparent">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="IconGroup" />
                    <ColumnDefinition Width="*" SharedSizeGroup="HeaderGroup" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <Grid x:Name="IconWrapper" MinWidth="25" Margin="{StaticResource MyNet.Margins.Medium.Right}" Visibility="Visible">
                    <ContentControl x:Name="Icon" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding Icon}" ContentTemplate="{Binding Path=(p:MenuAssist.IconTemplate), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Grid>
                  <Grid x:Name="GlyphWrapper" Width="25" Margin="{StaticResource MyNet.Margins.Medium.Right}" Visibility="Collapsed">
                    <Viewbox x:Name="GlyphPanel" Width="18" Height="18" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Center" FlowDirection="LeftToRight" Visibility="Collapsed">
                      <Canvas Width="24" Height="24">
                        <Path x:Name="Glyph" Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" />
                      </Canvas>
                    </Viewbox>
                  </Grid>
                  <Grid Grid.Column="1">
                    <ContentPresenter x:Name="BoldHeaderPresenter" VerticalAlignment="Center" Content="{TemplateBinding Header}" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextBlock.FontWeight="{StaticResource MyNet.Font.Weight.Header}" Visibility="Hidden" />
                    <ContentPresenter x:Name="HeaderPresenter" VerticalAlignment="Center" Content="{TemplateBinding Header}" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Grid>
                  <Grid x:Name="InputGestureTextWrapper" Grid.Column="2" Visibility="Collapsed">
                    <TextBlock Margin="10 0 0 0" HorizontalAlignment="Right" VerticalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Secondary}" Foreground="{TemplateBinding Foreground}" Opacity="{StaticResource MyNet.Opacity.Secondary}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Text="{TemplateBinding InputGestureText}" Visibility="{TemplateBinding InputGestureText, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
                  </Grid>
                  <Grid x:Name="SubBlock" Grid.Column="2" Margin="10 0 0 0" Visibility="Collapsed">
                    <ctrl:PackIcon Width="24" Height="24" HorizontalAlignment="Right" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Kind="ChevronRight" />
                  </Grid>
                </Grid>
              </Grid>
            </ctrl:Ripple>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="Fade">
              <Grid>
                <Border Background="White" Opacity="0.002" />
                <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" Background="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource Mode=TemplatedParent}}" Foreground="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                  <ctrl:DynamicScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                    <Grid Margin="0 8">
                      <ItemsPresenter x:Name="ItemsPresenter" Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                  </ctrl:DynamicScrollViewer>
                </ctrl:Card>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <!--#region Roles Triggers-->
            <Trigger Property="Role" Value="TopLevelHeader">
              <Setter Property="Grid.IsSharedSizeScope" Value="True" />
              <Setter Property="Height" Value="48" />
              <Setter Property="Padding" Value="16 0" />
              <Setter TargetName="BackgroundRoot" Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container}" />
              <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="Slide" />
              <Setter TargetName="templateRoot" Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
              <Setter Property="Height" Value="48" />
              <Setter Property="Padding" Value="16 0" />
              <Setter TargetName="BackgroundRoot" Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container}" />
              <Setter TargetName="templateRoot" Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
              <Setter Property="Height" Value="32" />
              <Setter TargetName="BoldHeaderPresenter" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_Popup" Property="Placement" Value="Right" />
              <Setter TargetName="PART_Popup" Property="VerticalOffset" Value="-16" />
              <Setter TargetName="SubBlock" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
              <Setter Property="Height" Value="32" />
              <Setter TargetName="BoldHeaderPresenter" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="InputGestureTextWrapper" Property="Visibility" Value="Visible" />
            </Trigger>
            <!--#endregion-->
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
              <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
              <Setter TargetName="IconWrapper" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Background" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
              <Setter TargetName="GlyphWrapper" Property="Visibility" Value="Visible" />
              <Setter TargetName="IconWrapper" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
              <Setter TargetName="BackgroundRoot" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                <Condition Binding="{Binding Path=(p:MenuAssist.CollapseDisabledItems), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=MenuBase}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.Setters>
                <Setter Property="Visibility" Value="Collapsed" />
              </MultiDataTrigger.Setters>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Style.Triggers>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsMouseOverForeground), RelativeSource={RelativeSource Mode=Self}}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.Menu" TargetType="{x:Type MenuBase}">
    <Style.Resources>
      <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MyNet.Styles.MenuItem}" />
    </Style.Resources>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="FontFamily" Value="{me:RobotoFont}" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Menu}" />
    <Setter Property="FontWeight" Value="Regular" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuBase}">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="MyNet.Styles.Menu.SubMenu" TargetType="{x:Type MenuBase}" BasedOn="{StaticResource MyNet.Styles.Menu}">
    <Style.Resources>
      <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MyNet.Styles.MenuItem}" />
    </Style.Resources>
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="ClipToBounds" Value="False" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuBase}">
          <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
            <Grid>
              <Border Background="White" Opacity="0.002" />
              <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}">
                <ctrl:DynamicScrollViewer x:Name="SubMenuScrollViewer">
                  <Grid Margin="0 8">
                    <ItemsPresenter x:Name="ItemsPresenter" Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Grid>
                </ctrl:DynamicScrollViewer>
              </ctrl:Card>
            </Grid>
          </AdornerDecorator>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Menu.Embedded" TargetType="{x:Type MenuBase}" BasedOn="{StaticResource MyNet.Styles.Menu.SubMenu}">
    <Setter Property="Margin" Value="0 8" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuBase}">
          <ctrl:DynamicScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
            <ItemsPresenter x:Name="ItemsPresenter" Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </ctrl:DynamicScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.ContextMenu" TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource MyNet.Styles.Menu.SubMenu}">
    <Setter Property="OverridesDefaultStyle" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Embedded.PasswordBox.CharacterCounter" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Secondary}">
    <Setter Property="Margin" Value="0 0 16 0" />
    <Setter Property="Text">
      <Setter.Value>
        <MultiBinding StringFormat="{}{0} / {1}">
          <Binding Path="(p:TextFieldAssist.PasswordBoxCharacterCount)" RelativeSource="{RelativeSource FindAncestor, AncestorType=PasswordBox}" />
          <Binding Path="MaxLength" RelativeSource="{RelativeSource FindAncestor, AncestorType=PasswordBox}" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Visibility" Value="{Binding Path=(p:TextFieldAssist.CharacterCounterIsVisible), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type PasswordBox}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBlock.Embedded.PasswordBox.HelperText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock.Secondary}">
    <Setter Property="FontSize" Value="{Binding Path=(p:HintAssist.HelperTextFontSize), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="FontStyle" Value="{Binding Path=(p:HintAssist.HelperTextFontStyle), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Foreground" Value="{Binding Path=(p:HintAssist.HelperTextForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="Margin" Value="{Binding Path=(p:HintAssist.HelperTextMargin), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Opacity" Value="{Binding Path=(p:HintAssist.HelperTextOpacity), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Text" Value="{Binding Path=(p:HintAssist.HelperText), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
  </Style>
  <Style x:Key="MyNet.Styles.PasswordBox" TargetType="{x:Type PasswordBox}">
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="CaretBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
    <Setter Property="Cursor" Value="IBeam" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="Padding" Value="5 3" />
    <Setter Property="PasswordChar" Value="●" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="SelectionBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.PasswordBox}" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.PasswordBox.HelperText}" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle" Value="{StaticResource MyNet.Styles.Button.Icon.Tool}" />
    <Setter Property="p:TextFieldAssist.CharacterCounterIsVisible" Value="False" />
    <Setter Property="p:TextFieldAssist.CharacterCounterStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.PasswordBox.CharacterCounter}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
    <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
  </Style>
  <Style x:Key="MyNet.Styles.PasswordBox.Foreground" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MyNet.Styles.PasswordBox}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.PasswordBox.Filled" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MyNet.Styles.PasswordBox}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.PasswordBox.Filled.Foreground" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MyNet.Styles.PasswordBox.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.PasswordBox.Filled.Alternate" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MyNet.Styles.PasswordBox.Filled}">
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
  </Style>
  <Style x:Key="MyNet.Styles.PasswordBox.Filled.Alternate.Foreground" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MyNet.Styles.PasswordBox.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.PasswordBox.Outlined" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MyNet.Styles.PasswordBox.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.PasswordBox.Outlined.Foreground" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MyNet.Styles.PasswordBox.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.RadioButton" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MyNet.Styles.CheckBox}">
    <Setter Property="p:CheckBoxAssist.CheckedPath" Value="M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7Z" />
    <Setter Property="p:CheckBoxAssist.IndeterminatePath" Value="M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7Z" />
    <Setter Property="p:CheckBoxAssist.UncheckedPath" Value="M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
  </Style>
  <Style x:Key="MyNet.Styles.RadioButton.Accent" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MyNet.Styles.RadioButton}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.RadioButton.Foreground" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MyNet.Styles.RadioButton}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.RepeatButton.Embedded.ScrollBar.Line" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Text}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Height" Value="12" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Width" Value="12" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.ScrollBar.Vertical" TargetType="{x:Type ScrollBar}">
    <Grid x:Name="Bg" Opacity="{StaticResource MyNet.Opacity.Secondary}">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
        <RowDefinition Height="0.00001*" />
        <RowDefinition Height="Auto" MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
      </Grid.RowDefinitions>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal" />
          <VisualState x:Name="MouseOver">
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Disabled">
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="Opacity" To="0.7" Duration="0:0:0.2" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Border Grid.Row="1" />
      <RepeatButton x:Name="PART_LineUpButton" Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Line}" Grid.Row="0" Command="{x:Static ScrollBar.LineUpCommand}" Content="{me:SmallIcon Kind=ChevronUp}" Foreground="{TemplateBinding Background}" IsEnabled="{TemplateBinding IsMouseOver}" Visibility="{Binding Path=(p:ScrollBarAssist.ButtonsVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
      <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Page}" Command="{x:Static ScrollBar.PageUpCommand}" />
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Page}" Command="{x:Static ScrollBar.PageDownCommand}" />
        </Track.IncreaseRepeatButton>
        <Track.Thumb>
          <Thumb Style="{StaticResource MyNet.Styles.Thumb.Embedded.ScrollBar}" Width="{Binding Path=(p:ScrollBarAssist.ThumbWidth), RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
        </Track.Thumb>
      </Track>
      <RepeatButton x:Name="PART_LineDownButton" Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Line}" Grid.Row="2" Command="{x:Static ScrollBar.LineDownCommand}" Content="{me:SmallIcon Kind=ChevronDown}" Foreground="{TemplateBinding Background}" IsEnabled="{TemplateBinding IsMouseOver}" Visibility="{Binding Path=(p:ScrollBarAssist.ButtonsVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.ScrollBar.Horizontal" TargetType="{x:Type ScrollBar}">
    <Grid x:Name="Bg" Opacity="{StaticResource MyNet.Opacity.Secondary}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
        <ColumnDefinition Width="0.00001*" />
        <ColumnDefinition Width="Auto" MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
      </Grid.ColumnDefinitions>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal" />
          <VisualState x:Name="MouseOver">
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Disabled">
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="Bg" Storyboard.TargetProperty="Opacity" To="0.7" Duration="0:0:0.2" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Border Grid.Column="1" />
      <RepeatButton x:Name="PART_LineLeftButton" Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Line}" Grid.Column="0" Command="{x:Static ScrollBar.LineLeftCommand}" Content="{me:SmallIcon Kind=ChevronLeft}" Foreground="{TemplateBinding Background}" IsEnabled="{TemplateBinding IsMouseOver}" Visibility="{Binding Path=(p:ScrollBarAssist.ButtonsVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
      <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Page}" Command="{x:Static ScrollBar.PageLeftCommand}" />
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Page}" Command="{x:Static ScrollBar.PageRightCommand}" />
        </Track.IncreaseRepeatButton>
        <Track.Thumb>
          <Thumb Style="{StaticResource MyNet.Styles.Thumb.Embedded.ScrollBar}" Height="{Binding Path=(p:ScrollBarAssist.ThumbHeight), RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
        </Track.Thumb>
      </Track>
      <RepeatButton x:Name="PART_LineRightButton" Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Line}" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" Content="{me:SmallIcon Kind=ChevronRight}" Foreground="{TemplateBinding Background}" IsEnabled="{TemplateBinding IsMouseOver}" Visibility="{Binding Path=(p:ScrollBarAssist.ButtonsVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
    </Grid>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.ScrollBar" TargetType="{x:Type ScrollBar}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.ScrollBar.Background}" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
    <Setter Property="p:ScrollBarAssist.ButtonsVisibility" Value="{Binding Path=(p:ScrollBarAssist.ButtonsVisibility), RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}}}" />
    <Setter Property="p:ScrollBarAssist.ThumbHeight" Value="14" />
    <Setter Property="p:ScrollBarAssist.ThumbWidth" Value="14" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="BorderThickness" Value="0 1" />
        <Setter Property="Height" Value="{Binding Path=(p:ScrollBarAssist.ThumbHeight), RelativeSource={RelativeSource Self}}" />
        <Setter Property="MinHeight" Value="{Binding Path=(p:ScrollBarAssist.ThumbHeight), RelativeSource={RelativeSource Self}}" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.ScrollBar.Horizontal}" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="BorderThickness" Value="1 0" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="{Binding Path=(p:ScrollBarAssist.ThumbWidth), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.ScrollBar.Vertical}" />
        <Setter Property="Width" Value="{Binding Path=(p:ScrollBarAssist.ThumbWidth), RelativeSource={RelativeSource Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ScrollBar.Foreground" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource MyNet.Styles.ScrollBar}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ScrollBar.Small" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource MyNet.Styles.ScrollBar}">
    <Setter Property="p:ScrollBarAssist.ThumbCornerRadius" Value="7" />
    <Setter Property="p:ScrollBarAssist.ThumbHeight" Value="7" />
    <Setter Property="p:ScrollBarAssist.ThumbWidth" Value="7" />
  </Style>
  <Style x:Key="MyNet.Styles.ScrollBar.Small.Foreground" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource MyNet.Styles.ScrollBar.Small}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Style.Resources>
      <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource MyNet.Styles.ScrollBar}" />
    </Style.Resources>
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.ScrollViewer}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
    <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="p:ScrollBarAssist.ButtonsVisibility" Value="Visible" />
    <Setter Property="p:ScrollViewerAssist.IgnorePadding" Value="False" />
    <Setter Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.ScrollViewer.Foreground" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MyNet.Styles.ScrollViewer}">
    <Style.Resources>
      <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource MyNet.Styles.ScrollBar.Foreground}" />
    </Style.Resources>
  </Style>
  <Style x:Key="MyNet.Styles.ScrollViewer.Small" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MyNet.Styles.ScrollViewer}">
    <Style.Resources>
      <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource MyNet.Styles.ScrollBar.Small}" />
    </Style.Resources>
    <Setter Property="p:ScrollBarAssist.ButtonsVisibility" Value="Collapsed" />
    <Setter Property="p:ScrollViewerAssist.CornerRectangleVisibility" Value="Collapsed" />
  </Style>
  <Style x:Key="MyNet.Styles.ScrollViewer.Small.Foreground" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MyNet.Styles.ScrollViewer.Small}">
    <Style.Resources>
      <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource MyNet.Styles.ScrollBar.Small.Foreground}" />
    </Style.Resources>
  </Style>
  <Style x:Key="MyNet.Styles.ScrollViewer.Fixed" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MyNet.Styles.ScrollViewer.Small}">
    <Setter Property="p:ScrollBarAssist.ButtonsVisibility" Value="Visible" />
    <Setter Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="False" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl" TargetType="{x:Type TabControl}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.TabItem}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <DockPanel KeyboardNavigation.TabNavigation="Local">
            <ctrl:Card x:Name="PART_HeaderCard" Padding="0" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" p:ShadowAssist.ShadowEdges="{TemplateBinding p:ShadowAssist.ShadowEdges}" Background="{Binding Path=(p:TabControlAssist.HeaderBackground), RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" Focusable="False" Foreground="{TemplateBinding Foreground}" UniformCornerRadius="{TemplateBinding p:ThemeAssist.UniformCornerRadius}" Visibility="{Binding Path=(p:TabControlAssist.ShowHeader), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <ctrl:DynamicScrollViewer x:Name="HeaderScrollViewer" p:ScrollViewerAssist.BubbleVerticalScroll="True" p:ScrollViewerAssist.SupportHorizontalScroll="True" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
                  <StackPanel>
                    <UniformGrid x:Name="CenteredHeaderPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" IsItemsHost="True" KeyboardNavigation.TabIndex="1" Rows="1" />
                    <VirtualizingStackPanel x:Name="HeaderPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" IsItemsHost="True" KeyboardNavigation.TabIndex="1" Orientation="Horizontal" />
                  </StackPanel>
                </ctrl:DynamicScrollViewer>
                <ContentControl x:Name="MoreContent" Grid.Column="1" Margin="{StaticResource MyNet.Margins.Large.Horizontal}" HorizontalAlignment="{Binding Path=(p:TabControlAssist.MoreContentHorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(p:TabControlAssist.MoreContentVerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Path=(p:TabControlAssist.MoreContent), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding Path=(p:TabControlAssist.HeaderForeground), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:TabControlAssist.MoreContent), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                  <ContentControl.Resources>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}">
                      <Setter Property="Height" Value="22" />
                      <Setter Property="Width" Value="22" />
                    </Style>
                  </ContentControl.Resources>
                </ContentControl>
              </Grid>
            </ctrl:Card>
            <Border x:Name="PART_BorderSelectedContent" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Panel.ZIndex="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Panel.ZIndex)}" Background="{x:Null}" Focusable="False">
              <ctrl:TransitioningContent x:Name="PART_SelectedContentHost" Margin="{TemplateBinding Padding}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="HorizontalContentAlignment" Value="Stretch">
              <Setter TargetName="CenteredHeaderPanel" Property="Visibility" Value="Visible" />
              <Setter TargetName="HeaderPanel" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HorizontalContentAlignment" Value="Center" />
                <Condition Property="p:TabControlAssist.HasUniformTabWidth" Value="False" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="HeaderPanel" Property="Visibility" Value="Visible" />
                <Setter TargetName="CenteredHeaderPanel" Property="Visibility" Value="Collapsed" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HorizontalContentAlignment" Value="Center" />
                <Condition Property="p:TabControlAssist.HasUniformTabWidth" Value="True" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="HeaderPanel" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="CenteredHeaderPanel" Property="Visibility" Value="Visible" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HorizontalContentAlignment" Value="Left" />
                <Condition Property="p:TabControlAssist.HasUniformTabWidth" Value="False" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="HeaderPanel" Property="Visibility" Value="Visible" />
                <Setter TargetName="CenteredHeaderPanel" Property="Visibility" Value="Collapsed" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HorizontalContentAlignment" Value="Left" />
                <Condition Property="p:TabControlAssist.HasUniformTabWidth" Value="True" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="HeaderPanel" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="CenteredHeaderPanel" Property="Visibility" Value="Visible" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HorizontalContentAlignment" Value="Right" />
                <Condition Property="p:TabControlAssist.HasUniformTabWidth" Value="False" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="HeaderPanel" Property="Visibility" Value="Visible" />
                <Setter TargetName="CenteredHeaderPanel" Property="Visibility" Value="Collapsed" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HorizontalContentAlignment" Value="Right" />
                <Condition Property="p:TabControlAssist.HasUniformTabWidth" Value="True" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="HeaderPanel" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="CenteredHeaderPanel" Property="Visibility" Value="Visible" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter Property="p:ShadowAssist.ShadowEdges" Value="Top" />
              <Setter TargetName="PART_HeaderCard" Property="DockPanel.Dock" Value="Bottom" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
              <Setter Property="p:ShadowAssist.ShadowEdges" Value="Right" />
              <Setter TargetName="CenteredHeaderPanel" Property="Columns" Value="1" />
              <Setter TargetName="CenteredHeaderPanel" Property="Rows" Value="0" />
              <Setter TargetName="MoreContent" Property="Grid.Column" Value="0" />
              <Setter TargetName="MoreContent" Property="Grid.Row" Value="1" />
              <Setter TargetName="PART_HeaderCard" Property="DockPanel.Dock" Value="Left" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter Property="p:ShadowAssist.ShadowEdges" Value="Left" />
              <Setter TargetName="CenteredHeaderPanel" Property="Columns" Value="1" />
              <Setter TargetName="CenteredHeaderPanel" Property="Rows" Value="0" />
              <Setter TargetName="MoreContent" Property="Grid.Column" Value="0" />
              <Setter TargetName="MoreContent" Property="Grid.Row" Value="1" />
              <Setter TargetName="PART_HeaderCard" Property="DockPanel.Dock" Value="Right" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:ElevationAssist.Elevation" Value="Dp0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:TabControlAssist.HeaderForeground)}" />
    <Setter Property="p:ShadowAssist.ShadowEdges" Value="None" />
    <Setter Property="p:TabControlAssist.HasUniformTabWidth" Value="True" />
    <Setter Property="p:TabControlAssist.HeaderBackground" Value="Transparent" />
    <Setter Property="p:TabControlAssist.HeaderForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:TabControlAssist.IndicatorBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:TabControlAssist.TabItemHeight" Value="48" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Accent" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl}">
    <Setter Property="p:TabControlAssist.IndicatorBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Foreground" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl}">
    <Setter Property="p:TabControlAssist.IndicatorBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Filled" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl}">
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    <Setter Property="p:ShadowAssist.ShadowEdges" Value="Bottom" />
    <Setter Property="p:TabControlAssist.HeaderBackground" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Filled.Application" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl.Filled}">
    <Setter Property="p:TabControlAssist.HeaderBackground" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Filled.Application.Dark" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl.Filled}">
    <Setter Property="p:TabControlAssist.HeaderBackground" Value="{DynamicResource MyNet.Brushes.Application.Background.Dark}" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Filled.Application.Light" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl.Filled}">
    <Setter Property="p:TabControlAssist.HeaderBackground" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Filled.Primary" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl.Filled}">
    <Setter Property="p:TabControlAssist.HeaderBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:TabControlAssist.HeaderForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:TabControlAssist.IndicatorBrush" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Filled.Accent" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl.Filled}">
    <Setter Property="p:TabControlAssist.HeaderBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:TabControlAssist.HeaderForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:TabControlAssist.IndicatorBrush" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Filled.Foreground" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl.Filled}">
    <Setter Property="p:TabControlAssist.HeaderBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="p:TabControlAssist.HeaderForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:TabControlAssist.IndicatorBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Navigation" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.TabItem.Navigation}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground.Tertiary}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Navigation.Accent" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl.Navigation}">
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.TabControl.Navigation.Foreground" TargetType="{x:Type TabControl}" BasedOn="{StaticResource MyNet.Styles.TabControl.Navigation}">
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBox" TargetType="{x:Type TextBoxBase}">
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="CaretBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
    <Setter Property="Cursor" Value="IBeam" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="SelectionBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.TextBox}" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.TextBox.HelperText}" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle" Value="{StaticResource MyNet.Styles.Button.Icon.Tool}" />
    <Setter Property="p:TextFieldAssist.CharacterCounterIsVisible" Value="False" />
    <Setter Property="p:TextFieldAssist.CharacterCounterStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.TextBox.CharacterCounter}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
    <Setter Property="p:GlobalizationAssist.UpdateOnCultureChanged" Value="True" />
    <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBox.Foreground" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBox.Filled" TargetType="{x:Type TextBoxBase}" BasedOn="{StaticResource MyNet.Styles.TextBox}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBox.Filled.Foreground" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBox.Filled.Alternate" TargetType="{x:Type TextBoxBase}" BasedOn="{StaticResource MyNet.Styles.TextBox.Filled}">
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBox.Filled.Alternate.Foreground" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBox.Outlined" TargetType="{x:Type TextBoxBase}" BasedOn="{StaticResource MyNet.Styles.TextBox.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBox.Outlined.Foreground" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Filled" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
              <ctrl:Ripple.Clip>
                <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                  <Binding ElementName="border" Path="ActualWidth" />
                  <Binding ElementName="border" Path="ActualHeight" />
                  <Binding ElementName="border" Path="CornerRadius" />
                  <Binding ElementName="border" Path="BorderThickness" />
                </MultiBinding>
              </ctrl:Ripple.Clip>
            </ctrl:Ripple>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="border" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Setter TargetName="mouseOver" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Filled.Custom" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Filled.Primary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Filled.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Filled.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Outlined" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Outlined.Primary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Primary}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Outlined.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Accent}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Outlined.Custom" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Custom}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Outlined.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Foreground}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Text" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Text.Primary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Primary}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Text.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Accent}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Text.Custom" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Custom}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Text.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled.Foreground}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Elevation" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Filled}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid>
            <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
              <Grid>
                <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" />
                <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
              </Grid>
            </AdornerDecorator>
            <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
              <ctrl:Ripple.Clip>
                <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                  <Binding ElementName="border" Path="ActualWidth" />
                  <Binding ElementName="border" Path="ActualHeight" />
                  <Binding ElementName="border" Path="CornerRadius" />
                  <Binding ElementName="border" Path="BorderThickness" />
                </MultiBinding>
              </ctrl:Ripple.Clip>
            </ctrl:Ripple>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
              <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
              <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="border" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Setter TargetName="mouseOver" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Button}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Elevation.Custom" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Elevation}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Elevation.Primary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Elevation.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Elevation.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Elevation.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Elevation.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Elevation.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Filled" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" To="{StaticResource MyNet.Opacity.Disabled}" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="*" To="Checked">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1.0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleY" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Checked" To="Unchecked">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleY" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleX" To="1.0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleY" To="1.0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Ellipse x:Name="ellipse" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{Binding BorderThickness, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:ThicknessToDoubleConverter.Top}}" />
            <Ellipse x:Name="mouseOver" Fill="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" Visibility="Collapsed" />
            <Ellipse x:Name="CheckedEllipse" Fill="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" RenderTransformOrigin="0.5, 0.5">
              <Ellipse.RenderTransform>
                <ScaleTransform x:Name="CheckedEllipseScale" CenterX="0.5" CenterY="0.5" ScaleX="1.0" ScaleY="1.0" />
              </Ellipse.RenderTransform>
            </Ellipse>
            <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Filled.Custom" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Filled.Primary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Filled.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Filled.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Outlined" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Outlined.Primary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Primary}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Outlined.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Accent}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Outlined.Custom" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Custom}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Outlined.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Foreground}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Text" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Text.Primary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Primary}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Text.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Accent}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Text.Custom" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Custom}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Text.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled.Foreground}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Elevation" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" To="{StaticResource MyNet.Opacity.Disabled}" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="*" To="Checked">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1.0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleY" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Checked" To="Unchecked">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleY" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleX" To="1.0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleY" To="1.0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="CheckedEllipseScale" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
              <Grid>
                <Ellipse x:Name="border" Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                <Ellipse x:Name="mouseOver" Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" Fill="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" Visibility="Collapsed" />
                <Ellipse x:Name="CheckedEllipse" Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}" Fill="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" RenderTransformOrigin="0.5, 0.5">
                  <Ellipse.RenderTransform>
                    <ScaleTransform x:Name="CheckedEllipseScale" CenterX="0.5" CenterY="0.5" ScaleX="1.0" ScaleY="1.0" />
                  </Ellipse.RenderTransform>
                </Ellipse>
              </Grid>
            </AdornerDecorator>
            <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}" ClipToBounds="True" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <Ellipse x:Name="GeometryEllipse" Fill="Transparent" Focusable="False" IsHitTestVisible="False" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
              <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
              <Setter TargetName="border" Property="p:ShadowAssist.Darken" Value="True" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ElevationAssist.Elevation" Value="Dp5" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Elevation.Custom" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Elevation}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Elevation.Primary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Elevation.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Elevation.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Elevation.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Rounded.Elevation.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Rounded.Elevation.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Icon" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.Button.Icon}">
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground), Opacity={StaticResource MyNet.Opacity.Secondary}}" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsMouseOverForeground)}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground)}" />
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Icon.Primary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Icon}">
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Icon.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Icon}">
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Icon.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Icon}">
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Action" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Filled}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ElevationAssist.Elevation), Converter={x:Static c:ShadowConverter.Default}}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" To="0.38" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="*" To="Checked">
                    <Storyboard FillBehavior="HoldEnd">
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OffScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OnScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Checked" To="Unchecked">
                    <Storyboard FillBehavior="HoldEnd">
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OnScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OffScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.2">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="OffScaleTransform" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="OnScaleTransform" Storyboard.TargetProperty="ScaleX" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="OffScaleTransform" Storyboard.TargetProperty="ScaleX" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="OnScaleTransform" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="IndeterminateCheck" Storyboard.TargetProperty="(UIElement.Opacity)" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="OffGrid" Background="{TemplateBinding Background}" RenderTransformOrigin=".5,.5">
              <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" FlowDirection="LeftToRight" />
              <Grid.Clip>
                <EllipseGeometry RadiusX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2.0}" RadiusY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2.0}">
                  <EllipseGeometry.Center>
                    <MultiBinding Converter="{x:Static c:PointValueConverter.Default}">
                      <Binding Converter="{x:Static c:MathConverter.Divide}" ConverterParameter="2.0" Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Converter="{x:Static c:MathConverter.Divide}" ConverterParameter="2.0" Path="Height" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </EllipseGeometry.Center>
                </EllipseGeometry>
              </Grid.Clip>
              <Grid.RenderTransform>
                <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
              </Grid.RenderTransform>
            </Grid>
            <Grid x:Name="OnGrid" Background="{TemplateBinding Background}" RenderTransformOrigin=".5,.5">
              <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ToggleButtonAssist.OnContent)}" ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ToggleButtonAssist.OnContentTemplate)}" FlowDirection="LeftToRight" />
              <Grid.Clip>
                <EllipseGeometry RadiusX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2.0}" RadiusY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height, Converter={x:Static c:MathConverter.Divide}, ConverterParameter=2.0}">
                  <EllipseGeometry.Center>
                    <MultiBinding Converter="{x:Static c:PointValueConverter.Default}">
                      <Binding Converter="{x:Static c:MathConverter.Divide}" ConverterParameter="2.0" Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Converter="{x:Static c:MathConverter.Divide}" ConverterParameter="2.0" Path="Height" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </EllipseGeometry.Center>
                </EllipseGeometry>
              </Grid.Clip>
              <Grid.RenderTransform>
                <ScaleTransform x:Name="OnScaleTransform" ScaleX="0" ScaleY="1" />
              </Grid.RenderTransform>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ToggleButtonAssist.OnContent" Value="{StaticResource MyNet.PackIcons.Check}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Action.Primary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Action.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Action.Custom" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action}">
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Action.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="Foreground" Value="{me:BrushBinding Path=Background, RelativeSource={RelativeSource Self}, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding Path=Background, RelativeSource={RelativeSource Self}, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Switch" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Width="{Binding Source={StaticResource ToggleButtonWidth}, Converter={x:Static c:MathConverter.Subtract}, ConverterParameter=4}" Height="{Binding Source={StaticResource ToggleButtonHeight}, Converter={x:Static c:MathConverter.Subtract}, ConverterParameter=4}" Margin="2 1 0 0" HorizontalAlignment="Left" VerticalAlignment="Center" RadiusX="10" RadiusY="10" Stroke="{DynamicResource MyNet.Brushes.Control.Border.Focus}" StrokeDashArray="1 2" StrokeThickness="1" />
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Padding" Value="8 6 0 0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0" Width="{StaticResource ToggleButtonWidth}" Height="{StaticResource ToggleButtonHeight}">
              <Rectangle x:Name="ToggleRectangle" Width="{StaticResource ToggleButtonWidth}" Height="{StaticResource ToggleButtonHeight}" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{TemplateBinding Background}" RadiusX="10" RadiusY="10" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" />
              <Rectangle x:Name="MouseOverToggleRectangle" Width="{StaticResource ToggleButtonWidth}" Height="{StaticResource ToggleButtonHeight}" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" RadiusX="10" RadiusY="10" StrokeThickness="1" Visibility="Collapsed" />
              <Rectangle x:Name="ActiveToggleRectangle" Width="{StaticResource ToggleButtonWidth}" Height="{StaticResource ToggleButtonHeight}" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" Opacity="0.0" RadiusX="10" RadiusY="10" StrokeThickness="0" />
              <Ellipse x:Name="ToggleEllipse" Width="12" Height="12" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5, 0.5">
                <Ellipse.RenderTransform>
                  <TranslateTransform X="-9" />
                </Ellipse.RenderTransform>
              </Ellipse>
              <Ellipse x:Name="ActiveToggleEllipse" Width="12" Height="12" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" Opacity="0.0" RenderTransformOrigin="0.5, 0.5">
                <Ellipse.RenderTransform>
                  <TranslateTransform X="-9" />
                </Ellipse.RenderTransform>
              </Ellipse>
            </Grid>
            <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="8 0 0 0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" TextElement.Foreground="{TemplateBinding Foreground}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
              <Setter TargetName="ContentPresenter" Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="Content" Value="">
              <Setter TargetName="ContentPresenter" Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ToggleRectangle" Storyboard.TargetProperty="(Rectangle.Opacity)" From="1.0" To="0.0" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="ActiveToggleRectangle" Storyboard.TargetProperty="(Rectangle.Opacity)" From="0.0" To="1.0" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="ToggleEllipse" Storyboard.TargetProperty="(Ellipse.Opacity)" From="1.0" To="0.0" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="ActiveToggleEllipse" Storyboard.TargetProperty="(Ellipse.Opacity)" From="0.0" To="1.0" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="ToggleEllipse" Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" From="-9" To="9" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="ActiveToggleEllipse" Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" From="-9" To="9" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ToggleRectangle" Storyboard.TargetProperty="(Rectangle.Opacity)" From="0.0" To="1.0" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="ActiveToggleRectangle" Storyboard.TargetProperty="(Rectangle.Opacity)" From="1.0" To="0.0" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="ToggleEllipse" Storyboard.TargetProperty="(Ellipse.Opacity)" From="0.0" To="1.0" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="ActiveToggleEllipse" Storyboard.TargetProperty="(Ellipse.Opacity)" From="1.0" To="0.0" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="ToggleEllipse" Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" From="9" To="-9" Duration="00:00:00.167" />
                    <DoubleAnimation Storyboard.TargetName="ActiveToggleEllipse" Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" From="9" To="-9" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsChecked" Value="False" />
                <Condition Property="IsEnabled" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="MouseOverToggleRectangle" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding Path=(p:ToggleButtonAssist.OnContent), RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding Path=(p:ToggleButtonAssist.OnContentTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding Foreground, RelativeSource={RelativeSource Mode=Self}, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding Foreground, RelativeSource={RelativeSource Mode=Self}}" />
    <Setter Property="p:ToggleButtonAssist.OnContent" Value="{Binding Content, RelativeSource={RelativeSource Self}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Switch.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Switch.Custom" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch}">
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Switch.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Switch.Alternate" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0 0 2 2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <ControlTemplate.Resources>
            <SineEase x:Key="RippleEasingFunction" EasingMode="EaseInOut" />
            <Storyboard x:Key="ShowRipple">
              <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}" Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="Opacity" To="0.26" Duration="0" />
              <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}" Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" From="1" To="2.5" Duration="0:0:0.2" />
              <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}" Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" From="1" To="2.5" Duration="0:0:0.2" />
            </Storyboard>
            <Storyboard x:Key="HideRipple">
              <DoubleAnimation EasingFunction="{StaticResource RippleEasingFunction}" Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.3" />
            </Storyboard>
          </ControlTemplate.Resources>
          <Viewbox Width="34">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="*" To="Checked">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ThumbHolder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="23.5">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <QuadraticEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Checked" To="Unchecked">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ThumbHolder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                        <EasingDoubleKeyFrame KeyTime="0" Value="23.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <QuadraticEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ThumbHolder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" To="23.5" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ThumbHolder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Rectangle x:Name="Track" Width="40" Height="15" Margin="4.211 5 4.211 0" HorizontalAlignment="Left" VerticalAlignment="Top" Fill="{TemplateBinding BorderBrush}" RadiusX="7.5" RadiusY="7.5" Stroke="{x:Null}" />
              <Grid x:Name="ThumbHolder" HorizontalAlignment="Left" VerticalAlignment="Top">
                <Ellipse x:Name="RippleThumb" Width="25" Height="25" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBackground)}" IsHitTestVisible="False" Opacity="0" RenderTransformOrigin="0.5,0.5">
                  <Ellipse.RenderTransform>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                  </Ellipse.RenderTransform>
                </Ellipse>
                <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(p:ShadowAssist.CacheMode)}">
                  <Ellipse x:Name="Thumb" Width="25" Height="25" Margin="0 0 0 0" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource MyNet.Shadows.Elevation1}" Fill="{TemplateBinding Background}" RenderTransformOrigin="0.5,0.5" Stroke="{x:Null}" />
                </AdornerDecorator>
                <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" FlowDirection="LeftToRight" />
                <Grid.RenderTransform>
                  <TranslateTransform X="0" Y="0" />
                </Grid.RenderTransform>
              </Grid>
            </Grid>
          </Viewbox>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Thumb" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBackground)}" />
              <Setter TargetName="Track" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ThemeAssist.IsCheckedBorderBrush)}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="p:ToggleButtonAssist.HasOnContent" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ToggleButtonAssist.OnContent)}" />
              <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:ToggleButtonAssist.OnContentTemplate)}" />
            </MultiTrigger>
            <Trigger Property="Button.IsDefaulted" Value="true" />
            <Trigger Property="IsMouseOver" Value="true" />
            <Trigger Property="IsPressed" Value="true">
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource ShowRipple}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HideRipple}" />
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Medium}}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground)}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Switch.Alternate.Accent" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch.Alternate}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Switch.Alternate.Custom" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch.Alternate}">
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Switch.Alternate.Foreground" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Switch.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Checked}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text}">
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Elevation" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Elevation}">
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Elevation.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Filled" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Filled}">
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Filled.Primary" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar.Filled}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.ToolBar" TargetType="ToggleButton" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Text}">
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ComboBox.ToolBar" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <ToggleButton Name="PART_Toggle" Style="{StaticResource MyNet.Styles.ToggleButton.Filled}" Width="Auto" Height="Auto" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" p:RippleAssist.Feedback="{TemplateBinding p:RippleAssist.Feedback}" p:ThemeAssist.CornerRadius="{TemplateBinding p:ThemeAssist.CornerRadius}" p:ThemeAssist.IsCheckedBackground="{TemplateBinding p:ThemeAssist.IsCheckedBackground}" p:ThemeAssist.IsCheckedBorderBrush="{TemplateBinding p:ThemeAssist.IsCheckedBorderBrush}" p:ThemeAssist.IsCheckedForeground="{TemplateBinding p:ThemeAssist.IsCheckedForeground}" p:ThemeAssist.IsMouseOverBackground="{TemplateBinding p:ThemeAssist.IsMouseOverBackground}" p:ThemeAssist.IsMouseOverBorderBrush="{TemplateBinding p:ThemeAssist.IsMouseOverBorderBrush}" p:ThemeAssist.IsMouseOverForeground="{TemplateBinding p:ThemeAssist.IsMouseOverForeground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ContentTemplate="{x:Null}" Cursor="{TemplateBinding Cursor}" Focusable="{TemplateBinding Focusable}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}" IsTabStop="False" TabIndex="{TemplateBinding TabIndex}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="Col0" Width="*" />
                  <ColumnDefinition x:Name="Col1" Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition x:Name="Row0" Height="Auto" />
                  <RowDefinition x:Name="Row1" Height="Auto" />
                </Grid.RowDefinitions>
                <ctrl:PackIcon x:Name="Caret" Grid.Row="0" Grid.Column="1" Width="18" Height="18" HorizontalAlignment="Center" VerticalAlignment="Center" Kind="ChevronDown" RenderTransformOrigin="0.5, 0.5" Visibility="{Binding Path=(p:ComboBoxAssist.ShowCaret), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                  <ctrl:PackIcon.RenderTransform>
                    <RotateTransform Angle="0" />
                  </ctrl:PackIcon.RenderTransform>
                </ctrl:PackIcon>
                <ContentControl x:Name="Content" Grid.Row="0" Grid.Column="0" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
              </Grid>
            </ToggleButton>
            <!-- Popup -->
            <ctrl:ComboBoxPopup x:Name="PART_Popup" Grid.Column="0" AllowsTransparency="True" Background="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource TemplatedParent}}" ClassicContentTemplate="{StaticResource MyNet.Styles.ContentControl.Embedded.ComboBox.Popup}" ContentMargin="6,0,6,6" ContentMinWidth="{Binding Path=ActualWidth, ElementName=PART_Toggle}" DefaultVerticalOffset="-1" DownVerticalOffset="0" Focusable="False" HorizontalOffset="-7" Placement="Custom" PlacementTarget="{Binding ElementName=PART_Toggle}" PopupAnimation="Slide" RelativeHorizontalOffset="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.Foreground="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" UpVerticalOffset="15" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalOffset="0">
              <ctrl:ComboBoxPopup.IsOpen>
                <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
                  <Binding Path="IsDropDownOpen" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="(p:ComboBoxAssist.ShowDropDownPopup)" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </ctrl:ComboBoxPopup.IsOpen>
              <ctrl:ComboBoxPopup.Style>
                <Style TargetType="{x:Type ctrl:ComboBoxPopup}">
                  <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container.Bottom}" />
                  <Style.Triggers>
                    <Trigger Property="OpenDirection" Value="Up">
                      <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container.Top}" />
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </ctrl:ComboBoxPopup.Style>
              <ContentControl>
                <ctrl:DynamicScrollViewer MinHeight="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" Background="{Binding Background, ElementName=PART_Popup}" Foreground="{Binding ElementName=PART_Popup, Path=(TextElement.Foreground)}">
                  <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ctrl:DynamicScrollViewer>
              </ContentControl>
            </ctrl:ComboBoxPopup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="0" To="180" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="180" To="0" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:ComboBoxAssist.ShowDropDownPopup" Value="True" />
    <Setter Property="p:ComboBoxAssist.ShowSelectedItem" Value="True" />
    <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Style.Triggers>
      <Trigger Property="IsDropDownOpen" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.CheckBox.ToolBar" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.CheckBox}">
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.RadioButton.ToolBar" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MyNet.Styles.RadioButton}">
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.ToolBar" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker}">
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TextBox.ToolBar" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox}">
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.ToolBar" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean.Caption}">
    <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:HeaderAssist.FontSize" Value="11" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="Center" />
    <Setter Property="p:HeaderAssist.Padding" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.Badged.ToolBar" TargetType="{x:Type ctrl:Badged}" BasedOn="{StaticResource MyNet.Styles.Badged}">
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Validate" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}">
    <Setter Property="Content" Value="{me:Resource Validate}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Positive}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Check}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Cancel" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}">
    <Setter Property="Content" Value="{me:Resource Cancel}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Negative}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Cancel}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Restore" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}">
    <Setter Property="Content" Value="{me:Resource Restore}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=SettingsBackupRestore}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Refresh" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}">
    <Setter Property="Content" Value="{me:Resource Refresh}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=CircularArrows}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Add" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}">
    <Setter Property="Content" Value="{me:Resource Add}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Add}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Edit" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}">
    <Setter Property="Content" Value="{me:Resource Edit}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Edit}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Remove" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}">
    <Setter Property="Content" Value="{me:Resource Remove}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Trash}" />
  </Style>
  <Style x:Key="MyNet.Styles.Button.ToolBar.Open" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}">
    <Setter Property="Content" Value="{me:Resource Open}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:MediumIcon Kind=Eye}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToolTip" TargetType="{x:Type ToolTip}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FontFamily" Value="{me:RobotoFont}" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="FontWeight" Value="{StaticResource MyNet.Font.Weight.ToolTip}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToolTip">
          <ctrl:Card x:Name="card" Style="{StaticResource MyNet.Styles.Card.Popup}" Padding="{TemplateBinding Padding}" p:PopupAssist.PlacementMode="{Binding Path=(p:PopupAssist.PlacementMode), RelativeSource={RelativeSource TemplatedParent}}" p:PopupAssist.ShowIndicator="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Foreground="{TemplateBinding Foreground}">
            <ctrl:SimpleStackPanel Spacing="{StaticResource MyNet.Margin.Default}">
              <ContentControl Content="{Binding Path=(p:HeaderAssist.Header), RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{Binding Path=(p:HeaderAssist.HeaderTemplate), RelativeSource={RelativeSource TemplatedParent}}" TextElement.FontSize="{Binding Path=(p:HeaderAssist.FontSize), RelativeSource={RelativeSource TemplatedParent}}" TextElement.FontWeight="{Binding Path=(p:HeaderAssist.FontWeight), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:HeaderAssist.Header), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
              <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}">
                <ContentPresenter.Resources>
                  <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock}">
                    <Setter Property="TextAlignment" Value="Justify" />
                    <Setter Property="TextWrapping" Value="Wrap" />
                  </Style>
                </ContentPresenter.Resources>
              </ContentPresenter>
            </ctrl:SimpleStackPanel>
          </ctrl:Card>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:HeaderAssist.FontSize" Value="{StaticResource MyNet.Font.Size.Caption}" />
    <Setter Property="p:HeaderAssist.FontWeight" Value="{StaticResource MyNet.Font.Weight.Header}" />
  </Style>
  <Style x:Key="MyNet.Styles.ApplicationIcon" TargetType="{x:Type ctrl:ApplicationIcon}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary.Dark}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="FontFamily" Value="{StaticResource MyNet.Font.Family.Nuvel}" />
    <Setter Property="FontSize" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={x:Static c:FontSizeConverter.Default}, ConverterParameter=0.51}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="IconSize" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=0.98}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ApplicationIcon}">
          <Grid>
            <ctrl:Card p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" UniformCornerRadius="{TemplateBinding UniformCornerRadius}">
              <ctrl:GeometryIcon Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{TemplateBinding Data}" Foreground="{TemplateBinding Foreground}" />
            </ctrl:Card>
            <Canvas Visibility="{Binding ShowText, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
              <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation}" Canvas.Right="{Binding OffsetX, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=-1}" Canvas.Bottom="{Binding OffsetY, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=-1}" Width="{TemplateBinding TextSize}" Height="{TemplateBinding TextSize}" HorizontalContentAlignment="Center" p:ThemeAssist.CornerRadius="{Binding TextSize, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:DoubleToCornerRadiusConverter.All}}" Background="{TemplateBinding TextBackground}" Content="{TemplateBinding Text}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding TextForeground}" />
            </Canvas>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TextBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static c:BrushConverter.Darken}}" />
    <Setter Property="TextForeground" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="TextSize" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=0.58}" />
    <Setter Property="TextSize" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=0.55}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="Dp4" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.AutoSuggestBox" TargetType="{x:Type ctrl:AutoSuggestBox}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <Grid>
              <!-- Mouse Over -->
              <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
              <!-- Focus -->
              <Border x:Name="focus" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
              <!-- Ripple on focus -->
              <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
                <Border.RenderTransform>
                  <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
                </Border.RenderTransform>
              </Border>
              <Grid Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <!-- Icon -->
                <ContentControl x:Name="Icon" Grid.Column="0" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                  <ContentControl.Resources>
                    <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                      <Setter Property="Height" Value="20" />
                      <Setter Property="Width" Value="20" />
                    </Style>
                    <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                      <Setter Property="Height" Value="20" />
                      <Setter Property="Width" Value="20" />
                    </Style>
                  </ContentControl.Resources>
                </ContentControl>
                <!-- Content -->
                <Grid x:Name="grid" Grid.Column="1" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Host Text -->
                    <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1" VerticalAlignment="Center" Panel.ZIndex="1" p:ScrollViewerAssist.IgnorePadding="True" Focusable="false" HorizontalScrollBarVisibility="Hidden" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalScrollBarVisibility="Hidden" />
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                    <!-- Clear button -->
                    <Button x:Name="PART_ClearButton" Style="{StaticResource MyNet.Styles.Button.Icon.Tool.Clear}" Grid.Column="3">
                      <Button.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                          <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                        </MultiBinding>
                      </Button.Visibility>
                    </Button>
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
            </Grid>
            <ctrl:PopupEx x:Name="PART_Popup" MinWidth="{TemplateBinding ActualWidth}" MinHeight="25" AllowsTransparency="True" Focusable="False" HorizontalOffset="-7" IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" Placement="Bottom" PlacementTarget="{Binding ElementName=border}" PopupAnimation="{TemplateBinding PopupAnimation}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalOffset="0">
              <Grid>
                <Border Background="White" Opacity="0.002" />
                <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" Padding="0" Background="{TemplateBinding p:PopupAssist.Background}" FontSize="{StaticResource MyNet.Font.Size}" FontWeight="{StaticResource MyNet.Font.Weight.ToolTip}" Foreground="{TemplateBinding p:PopupAssist.Foreground}">
                  <Grid Width="{Binding Path=PopupWidth, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}">
                    <ListBox x:Name="PART_Selector" MaxHeight="{Binding Path=MaxPopupHeight, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" BorderThickness="0" Focusable="False" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" ItemTemplate="{TemplateBinding ItemTemplate}" ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                    <Border Visibility="{Binding Path=IsLoading, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                      <ContentPresenter ContentSource="LoadingContent" />
                    </Border>
                  </Grid>
                </ctrl:Card>
              </Grid>
            </ctrl:PopupEx>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="CharacterCounterContainer" Grid.Column="1">
            <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding Path=(p:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </Grid>
      </Canvas>
    </Grid>
    <ControlTemplate.Triggers>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="2" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- IsKeyboardFocused -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
      <!-- IsReadOnly -->
      <Trigger Property="IsReadOnly" Value="True">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Opacity" Value="1" />
        <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="border" Property="Opacity" Value="1" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
        <Setter TargetName="grid" Property="Opacity" Value="1" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.AutoSuggestBox" TargetType="{x:Type ctrl:AutoSuggestBox}">
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="CaretBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
    <Setter Property="Cursor" Value="IBeam" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
          <Setter Property="ContentTemplate" Value="{x:Null}" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <Setter Property="LoadingContent">
      <Setter.Value>
        <Grid>
          <ProgressBar Style="{StaticResource MyNet.Styles.ProgressBar.Circular}" Width="100" Height="100" p:ProgressBarAssist.ShowSecondProgress="True" p:ProgressBarAssist.BorderThickness="10" ClipToBounds="False" IsIndeterminate="True" />
        </Grid>
      </Setter.Value>
    </Setter>
    <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="SelectionBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.AutoSuggestBox}" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.AutoSuggestBox.HelperText}" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:TextFieldAssist.CharacterCounterIsVisible" Value="False" />
    <Setter Property="p:TextFieldAssist.CharacterCounterStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.AutoSuggestBox.CharacterCounter}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
    <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
  </Style>
  <Style x:Key="MyNet.Styles.AutoSuggestBox.Foreground" TargetType="{x:Type ctrl:AutoSuggestBox}" BasedOn="{StaticResource MyNet.Styles.AutoSuggestBox}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.AutoSuggestBox.Filled" TargetType="{x:Type ctrl:AutoSuggestBox}" BasedOn="{StaticResource MyNet.Styles.AutoSuggestBox}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.AutoSuggestBox.Filled.Foreground" TargetType="{x:Type ctrl:AutoSuggestBox}" BasedOn="{StaticResource MyNet.Styles.AutoSuggestBox.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.AutoSuggestBox.Outlined" TargetType="{x:Type ctrl:AutoSuggestBox}" BasedOn="{StaticResource MyNet.Styles.AutoSuggestBox.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.AutoSuggestBox.Outlined.Foreground" TargetType="{x:Type ctrl:AutoSuggestBox}" BasedOn="{StaticResource MyNet.Styles.AutoSuggestBox.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <DataTemplate x:Key="MyNet.DataTemplates.IndeterminateBusy">
    <ctrl:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="{StaticResource MyNet.Margin.VeryLarge}">
      <ProgressBar x:Name="ProgressBar" Style="{Binding Path=(p:ThemeAssist.Style), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" Margin="{StaticResource MyNet.Margins.Medium}" IsIndeterminate="True" />
      <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Caption}" Text="{Binding Message}" Visibility="{Binding Message, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
      <Button x:Name="button" Style="{StaticResource MyNet.Styles.Button.Text}" Height="35" HorizontalAlignment="Center" p:IconAssist.Icon="{me:MediumIcon Kind=Cancel}" Command="{Binding CancelCommand}" Tag="{Binding IsCancelling}" Visibility="{Binding IsCancellable, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
        <Grid>
          <ContentControl Content="{me:Resource Cancel}" ContentTemplate="{StaticResource MyNet.DataTemplates.Icon}" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
          <ctrl:SimpleStackPanel Orientation="Horizontal" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
            <TextBlock Text="{me:Resource CancellationInProgress}" />
            <ctrl:LoadingIndicator VerticalAlignment="Center" Foreground="{me:BrushBinding InheritPath=(TextElement.Foreground)}" Mode="ThreeDots">
              <ctrl:LoadingIndicator.RenderTransform>
                <ScaleTransform ScaleX="0.7" ScaleY="0.7" />
              </ctrl:LoadingIndicator.RenderTransform>
            </ctrl:LoadingIndicator>
          </ctrl:SimpleStackPanel>
        </Grid>
      </Button>
    </ctrl:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="MyNet.DataTemplates.DeterminateBusy">
    <ctrl:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="{StaticResource MyNet.Margin.VeryLarge}">
      <ProgressBar x:Name="ProgressBar" Style="{Binding Path=(p:ThemeAssist.Style), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" Margin="{StaticResource MyNet.Margins.Medium}" p:ProgressBarAssist.ShowValue="True" Maximum="{Binding Maximum}" Minimum="{Binding Minimum}" Value="{Binding Value}" />
      <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Caption}" Text="{Binding Message}" Visibility="{Binding Message, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
      <Button x:Name="button" Style="{StaticResource MyNet.Styles.Button.Text}" Height="35" HorizontalAlignment="Center" p:IconAssist.Icon="{me:MediumIcon Kind=Cancel}" Command="{Binding CancelCommand}" Tag="{Binding IsCancelling}" Visibility="{Binding IsCancellable, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
        <Grid>
          <ContentControl Content="{me:Resource Cancel}" ContentTemplate="{StaticResource MyNet.DataTemplates.Icon}" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
          <ctrl:SimpleStackPanel Orientation="Horizontal" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
            <TextBlock Text="{me:Resource CancellationInProgress}" />
            <ctrl:LoadingIndicator VerticalAlignment="Center" Foreground="{me:BrushBinding InheritPath=(TextElement.Foreground)}" Mode="ThreeDots">
              <ctrl:LoadingIndicator.RenderTransform>
                <ScaleTransform ScaleX="0.7" ScaleY="0.7" />
              </ctrl:LoadingIndicator.RenderTransform>
            </ctrl:LoadingIndicator>
          </ctrl:SimpleStackPanel>
        </Grid>
      </Button>
    </ctrl:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="MyNet.DataTemplates.ProgressionBusy">
    <ctrl:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="{StaticResource MyNet.Margin.VeryLarge}">
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Title}" Margin="{StaticResource MyNet.Margins.Default.Bottom}" HorizontalAlignment="Center" Opacity="{StaticResource MyNet.Opacity.Default}" Text="{Binding Title}" />
      <ProgressBar x:Name="ProgressBar" Style="{Binding Path=(p:ThemeAssist.Style), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" Margin="{StaticResource MyNet.Margins.Medium}" p:ProgressBarAssist.ShowValue="True" Maximum="1" Minimum="0" Value="{Binding Value}" />
      <ItemsControl Style="{StaticResource MyNet.Styles.ItemsControl}" Grid.Row="4" HorizontalAlignment="Center" ItemsSource="{Binding Messages}">
        <ItemsControl.ItemTemplate>
          <DataTemplate>
            <TextBlock HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Caption}" Text="{Binding}" />
          </DataTemplate>
        </ItemsControl.ItemTemplate>
      </ItemsControl>
      <Button x:Name="button" Style="{StaticResource MyNet.Styles.Button.Text}" Height="35" HorizontalAlignment="Center" p:IconAssist.Icon="{me:MediumIcon Kind=Cancel}" Command="{Binding CancelCommand}" Tag="{Binding IsCancelling}" Visibility="{Binding IsCancellable, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
        <Grid>
          <ContentControl Content="{me:Resource Cancel}" ContentTemplate="{StaticResource MyNet.DataTemplates.Icon}" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
          <ctrl:SimpleStackPanel Orientation="Horizontal" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
            <TextBlock Text="{me:Resource CancellationInProgress}" />
            <ctrl:LoadingIndicator VerticalAlignment="Center" Foreground="{me:BrushBinding InheritPath=(TextElement.Foreground)}" Mode="ThreeDots">
              <ctrl:LoadingIndicator.RenderTransform>
                <ScaleTransform ScaleX="0.7" ScaleY="0.7" />
              </ctrl:LoadingIndicator.RenderTransform>
            </ctrl:LoadingIndicator>
          </ctrl:SimpleStackPanel>
        </Grid>
      </Button>
    </ctrl:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="MyNet.DataTemplates.IndeterminateBusy.Alternate" DataType="{x:Type busy:IndeterminateBusy}">
    <ctrl:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="{StaticResource MyNet.Margin.VeryLarge}">
      <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Elevation.Custom}" Padding="0" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" Foreground="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" UniformCornerRadius="100">
        <ProgressBar x:Name="ProgressBar" Style="{StaticResource MyNet.Styles.ProgressBar.Circular.Foreground}" Width="125" Height="125" Margin="{StaticResource MyNet.Margins.Medium}" p:ProgressBarAssist.BorderThickness="12" p:ProgressBarAssist.InnerPadding="16" p:ProgressBarAssist.ShowSecondProgress="{Binding IsCancelling, Converter={x:Static c:NotBooleanConverter.Default}}" ClipToBounds="False" FontSize="{StaticResource MyNet.Font.Size.Header}" IsIndeterminate="True" />
      </ctrl:Card>
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:BusyControl}}}" FontStyle="Italic" Text="{Binding Message}" Visibility="{Binding Message, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
      <Button x:Name="button" Style="{StaticResource MyNet.Styles.Button.Text}" Height="35" HorizontalAlignment="Center" p:IconAssist.Icon="{me:MediumIcon Kind=Cancel}" Command="{Binding CancelCommand}" Tag="{Binding IsCancelling}" Visibility="{Binding IsCancellable, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
        <Grid>
          <ContentControl HorizontalAlignment="Center" Content="{me:Resource Cancel}" ContentTemplate="{StaticResource MyNet.DataTemplates.Icon}" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
          <ctrl:SimpleStackPanel HorizontalAlignment="Center" Orientation="Horizontal" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
            <TextBlock Text="{me:Resource CancellationInProgress}" />
            <ctrl:LoadingIndicator VerticalAlignment="Center" Foreground="{me:BrushBinding InheritPath=(TextElement.Foreground)}" Mode="ThreeDots">
              <ctrl:LoadingIndicator.RenderTransform>
                <ScaleTransform ScaleX="0.7" ScaleY="0.7" />
              </ctrl:LoadingIndicator.RenderTransform>
            </ctrl:LoadingIndicator>
          </ctrl:SimpleStackPanel>
        </Grid>
      </Button>
    </ctrl:SimpleStackPanel>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding IsCancelling}" Value="True">
        <Setter TargetName="ProgressBar" Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Negative}" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <DataTemplate x:Key="MyNet.DataTemplates.DeterminateBusy.Alternate" DataType="{x:Type busy:DeterminateBusy}">
    <ctrl:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="{StaticResource MyNet.Margin.VeryLarge}">
      <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Elevation.Custom}" Padding="0" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" Foreground="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" UniformCornerRadius="100">
        <ProgressBar x:Name="ProgressBar" Style="{StaticResource MyNet.Styles.ProgressBar.Circular.Foreground}" Width="125" Height="125" Margin="{StaticResource MyNet.Margins.Medium}" HorizontalAlignment="Center" VerticalAlignment="Center" p:ProgressBarAssist.BorderThickness="12" p:ProgressBarAssist.InnerPadding="16" p:ProgressBarAssist.ShowSecondProgress="{Binding IsCancelling, Converter={x:Static c:NotBooleanConverter.Default}}" p:ProgressBarAssist.ShowValue="True" FontSize="{StaticResource MyNet.Font.Size.Header}" Maximum="{Binding Maximum}" Minimum="{Binding Minimum}" Value="{Binding Value}" />
      </ctrl:Card>
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:BusyControl}}}" FontStyle="Italic" Text="{Binding Message}" Visibility="{Binding Message, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
      <Button x:Name="button" Style="{StaticResource MyNet.Styles.Button.Text}" Height="35" HorizontalAlignment="Center" p:IconAssist.Icon="{me:MediumIcon Kind=Cancel}" Command="{Binding CancelCommand}" Tag="{Binding IsCancelling}" Visibility="{Binding IsCancellable, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
        <Grid>
          <ContentControl Content="{me:Resource Cancel}" ContentTemplate="{StaticResource MyNet.DataTemplates.Icon}" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
          <ctrl:SimpleStackPanel Orientation="Horizontal" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
            <TextBlock Text="{me:Resource CancellationInProgress}" />
            <ctrl:LoadingIndicator VerticalAlignment="Center" Foreground="{me:BrushBinding InheritPath=(TextElement.Foreground)}" Mode="ThreeDots">
              <ctrl:LoadingIndicator.RenderTransform>
                <ScaleTransform ScaleX="0.7" ScaleY="0.7" />
              </ctrl:LoadingIndicator.RenderTransform>
            </ctrl:LoadingIndicator>
          </ctrl:SimpleStackPanel>
        </Grid>
      </Button>
    </ctrl:SimpleStackPanel>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding IsCancelling}" Value="True">
        <Setter TargetName="ProgressBar" Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Negative}" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <DataTemplate x:Key="MyNet.DataTemplates.ProgressionBusy.Alternate" DataType="{x:Type busy:ProgressionBusy}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="250" />
      </Grid.RowDefinitions>
      <ctrl:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="{StaticResource MyNet.Margin.VeryLarge}">
        <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Elevation.Custom}" Padding="0" HorizontalAlignment="Center" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" Foreground="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" UniformCornerRadius="100">
          <Grid>
            <ProgressBar x:Name="ProgressBar" Style="{StaticResource MyNet.Styles.ProgressBar.Circular.Foreground}" Width="125" Height="125" Margin="{StaticResource MyNet.Margins.Medium}" p:ProgressBarAssist.BorderThickness="12" p:ProgressBarAssist.InnerPadding="16" p:ProgressBarAssist.ShowValue="True" FontSize="{StaticResource MyNet.Font.Size.Header}" Maximum="1" Minimum="0" Value="{Binding Value}" />
          </Grid>
        </ctrl:Card>
        <Button x:Name="button" Style="{StaticResource MyNet.Styles.Button.Text.Foreground}" Height="35" HorizontalAlignment="Center" VerticalAlignment="Top" p:IconAssist.Icon="{me:MediumIcon Kind=Cancel}" Command="{Binding CancelCommand}" Tag="{Binding IsCancelling}" Visibility="{Binding IsCancellable, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
          <Grid>
            <ContentControl Content="{me:Resource Cancel}" ContentTemplate="{StaticResource MyNet.DataTemplates.Icon}" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
            <ctrl:SimpleStackPanel Orientation="Horizontal" Visibility="{Binding Tag, ElementName=button, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
              <TextBlock Text="{me:Resource CancellationInProgress}" />
              <ctrl:LoadingIndicator VerticalAlignment="Center" Foreground="{me:BrushBinding InheritPath=(TextElement.Foreground)}" Mode="ThreeDots">
                <ctrl:LoadingIndicator.RenderTransform>
                  <ScaleTransform ScaleX="0.7" ScaleY="0.7" />
                </ctrl:LoadingIndicator.RenderTransform>
              </ctrl:LoadingIndicator>
            </ctrl:SimpleStackPanel>
          </Grid>
        </Button>
      </ctrl:SimpleStackPanel>
      <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Elevation.Custom}" Grid.Row="1" Padding="0" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" Foreground="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}}" UniformCornerRadius="0">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="20" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="10" />
            <RowDefinition Height="*" />
          </Grid.RowDefinitions>
          <ProgressBar Style="{StaticResource MyNet.Styles.ProgressBar.Linear.Foreground}" Height="5" IsIndeterminate="True" Visibility="{Binding IsCancelling, Converter={x:Static c:BooleanToVisibilityConverter.HiddenIfTrue}}" />
          <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}" Grid.Row="2" Margin="{StaticResource MyNet.Margins.Default.Bottom}" HorizontalAlignment="Center" Opacity="{StaticResource MyNet.Opacity.Default}" Text="{Binding Title}" />
          <ItemsControl Style="{StaticResource MyNet.Styles.ItemsControl}" Grid.Row="4" HorizontalAlignment="Center" ItemsSource="{Binding Messages}">
            <ItemsControl.ItemTemplate>
              <DataTemplate>
                <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" Text="{Binding}" />
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ItemsControl>
        </Grid>
      </ctrl:Card>
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding IsCancelling}" Value="True">
        <Setter TargetName="ProgressBar" Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Negative}" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <s:BusyTemplateSelector x:Key="MyNet.Selectors.Busy" DeterminateBusyTemplate="{StaticResource MyNet.DataTemplates.DeterminateBusy}" IndeterminateBusyTemplate="{StaticResource MyNet.DataTemplates.IndeterminateBusy}" ProgressionBusyTemplate="{StaticResource MyNet.DataTemplates.ProgressionBusy}" />
  <s:BusyTemplateSelector x:Key="MyNet.Selectors.Busy.Alternate" DeterminateBusyTemplate="{StaticResource MyNet.DataTemplates.DeterminateBusy.Alternate}" IndeterminateBusyTemplate="{StaticResource MyNet.DataTemplates.IndeterminateBusy.Alternate}" ProgressionBusyTemplate="{StaticResource MyNet.DataTemplates.ProgressionBusy.Alternate}" />
  <Style x:Key="MyNet.Styles.BusyControl" TargetType="{x:Type ctrl:BusyControl}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Overlay}" />
    <Setter Property="ClipToBounds" Value="False" />
    <Setter Property="ContentTemplateSelector" Value="{StaticResource MyNet.Selectors.Busy}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Title}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="IsHitTestVisible" Value="{Binding IsActive, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Opacity" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:BusyControl}">
          <Grid>
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="False" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ClipToBounds="False" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:ThemeAssist.Style" Value="{StaticResource MyNet.Styles.ProgressBar.Embedded.BusyControl}" />
  </Style>
  <Style x:Key="MyNet.Styles.BusyControl.Accent" TargetType="{x:Type ctrl:BusyControl}" BasedOn="{StaticResource MyNet.Styles.BusyControl}">
    <Setter Property="p:ThemeAssist.Style" Value="{StaticResource MyNet.Styles.ProgressBar.Embedded.BusyControl.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.BusyControl.Foreground" TargetType="{x:Type ctrl:BusyControl}" BasedOn="{StaticResource MyNet.Styles.BusyControl}">
    <Setter Property="p:ThemeAssist.Style" Value="{StaticResource MyNet.Styles.ProgressBar.Embedded.BusyControl.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.BusyControl.Alternate" TargetType="{x:Type ctrl:BusyControl}" BasedOn="{StaticResource MyNet.Styles.BusyControl}">
    <Setter Property="ContentTemplateSelector" Value="{StaticResource MyNet.Selectors.Busy.Alternate}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.BusyControl.Alternate.Accent" TargetType="{x:Type ctrl:BusyControl}" BasedOn="{StaticResource MyNet.Styles.BusyControl.Alternate}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.BusyControl.Small" TargetType="{x:Type ctrl:BusyControl}" BasedOn="{StaticResource MyNet.Styles.BusyControl}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="ContentTemplateSelector">
      <Setter.Value>
        <s:BusyTemplateSelector DeterminateBusyTemplate="{StaticResource MyNet.DataTemplates.DeterminateBusy}" IndeterminateBusyTemplate="{StaticResource MyNet.DataTemplates.IndeterminateBusy.Small}" ProgressionBusyTemplate="{StaticResource MyNet.DataTemplates.ProgressionBusy}" />
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:ThemeAssist.Style" Value="{StaticResource MyNet.Styles.ProgressBar.Circular}" />
  </Style>
  <Style x:Key="MyNet.Styles.BusyControl.Small.Accent" TargetType="{x:Type ctrl:BusyControl}" BasedOn="{StaticResource MyNet.Styles.BusyControl.Small}">
    <Setter Property="p:ThemeAssist.Style" Value="{StaticResource MyNet.Styles.ProgressBar.Circular.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.BusyControl.Small.Foreground" TargetType="{x:Type ctrl:BusyControl}" BasedOn="{StaticResource MyNet.Styles.BusyControl.Small}">
    <Setter Property="p:ThemeAssist.Style" Value="{StaticResource MyNet.Styles.ProgressBar.Circular.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.BusyControl.Dark.Foreground" TargetType="{x:Type ctrl:BusyControl}" BasedOn="{StaticResource MyNet.Styles.BusyControl.Foreground}">
    <Setter Property="Background">
      <Setter.Value>
        <SolidColorBrush Opacity="{DynamicResource MyNet.Opacity.Overlay}" Color="{DynamicResource MyNet.Colors.Application.Background}" />
      </Setter.Value>
    </Setter>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ProgressBar Style="{StaticResource MyNet.Styles.ProgressBar.Circular.Foreground}" Width="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=0.17}" Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=0.17}" HorizontalAlignment="Center" VerticalAlignment="Center" p:ProgressBarAssist.BorderThickness="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:BusyControl}}, Converter={x:Static c:MathConverter.Multiply}, ConverterParameter=0.010}" p:ProgressBarAssist.ShowSecondProgress="True" IsIndeterminate="True" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContentTemplateSelector" Value="{x:Null}" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarItem" TargetType="{x:Type ctrl:CalendarItem}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="IsTabStop" Value="True" />
    <Setter Property="MinHeight" Value="5" />
    <Setter Property="MinWidth" Value="5" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:CalendarItem}">
          <Border Margin="{TemplateBinding Margin}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                    <VisualTransition.GeneratedEasingFunction>
                      <CircleEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Normal" />
                <VisualState Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="{StaticResource MyNet.Opacity.Hovered}" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="{StaticResource MyNet.Opacity.Checked}" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unselected" />
                <VisualState Name="SelectedUnfocused">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="0.03" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="base">
              <Border Background="{TemplateBinding Background}" />
              <Border x:Name="MouseOverBorder" Background="{TemplateBinding Foreground}" Opacity="0" />
              <Border x:Name="SelectedBorder" Background="{TemplateBinding Foreground}" Opacity="0" RenderTransformOrigin="0.5,0.5">
                <Border.RenderTransform>
                  <ScaleTransform ScaleX="1" />
                </Border.RenderTransform>
              </Border>
              <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Feedback="{TemplateBinding Foreground}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                  </Grid.RowDefinitions>
                  <ContentPresenter x:Name="DayText" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                  <Button x:Name="PART_AddButton" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Top" Content="{me:ToolIcon Kind=Plus}" Visibility="Hidden" />
                  <ItemsControl Grid.Row="1" ItemTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}" ItemTemplateSelector="{Binding ItemTemplateSelector, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}" ItemsSource="{Binding Appointments, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding AppointmentsDisplayMode, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}, Converter={x:Static c:EnumToVisibilityConverter.CollapsedIfNotAny}, ConverterParameter={x:Static ctrl:AppointmentsDisplayMode.Cell}}">
                    <ItemsControl.ItemsPanel>
                      <ItemsPanelTemplate>
                        <ctrl:SimpleStackPanel IsItemsHost="True" Spacing="{StaticResource MyNet.Margin.Small}" />
                      </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                  </ItemsControl>
                </Grid>
              </ctrl:Ripple>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Owner.DatesSelectionMode, RelativeSource={RelativeSource Self}}" Value="None">
              <Setter Property="p:RippleAssist.IsDisabled" Value="True" />
            </DataTrigger>
            <Trigger Property="IsNow" Value="True">
              <Setter TargetName="DayText" Property="TextElement.FontWeight" Value="Bold" />
              <Setter TargetName="DayText" Property="TextElement.Foreground" Value="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsInactive" Value="True">
              <Setter TargetName="base" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="base" Property="Opacity" Value="0" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_AddButton" Property="Visibility" Value="Visible" />
            </Trigger>
            <DataTrigger Binding="{Binding Owner.AddCommand, RelativeSource={RelativeSource Self}, Converter={x:Static c:NullToBooleanConverter.TrueIfNull}}" Value="True">
              <Setter TargetName="PART_AddButton" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsLastOfWeek, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Owner.LastDayOfWeekIsHighlighted, RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
      </MultiDataTrigger>
      <Trigger Property="IsNow" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="BorderThickness" Value="2" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.CalendarItem.DaysByMonth" TargetType="{x:Type ctrl:CalendarItem}" BasedOn="{StaticResource MyNet.Styles.CalendarItem}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="Left" VerticalAlignment="Top" Text="{Binding Converter={x:Static c:DayNumberToStringConverter.ToTitle}}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.CalendarItem.MonthsByYear" TargetType="{x:Type ctrl:CalendarItem}" BasedOn="{StaticResource MyNet.Styles.CalendarItem}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="Left" VerticalAlignment="Top" Text="{me:DisplayDateTime Format=MMM, Casing=Title}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.CalendarItem.YearsByDecade" TargetType="{x:Type ctrl:CalendarItem}" BasedOn="{StaticResource MyNet.Styles.CalendarItem}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="Left" VerticalAlignment="Top" Text="{me:DisplayDateTime Format=yyyy, Casing=Title}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.CalendarItem.HoursByWeek" TargetType="{x:Type ctrl:CalendarItem}" BasedOn="{StaticResource MyNet.Styles.CalendarItem}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.CalendarItem.HoursByDay" TargetType="{x:Type ctrl:CalendarItem}" BasedOn="{StaticResource MyNet.Styles.CalendarItem}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.CalendarItem.DaysByYear" TargetType="{x:Type ctrl:CalendarItem}" BasedOn="{StaticResource MyNet.Styles.CalendarItem}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:SimpleStackPanel HorizontalAlignment="Left" VerticalAlignment="Center" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
            <TextBlock Text="{me:DisplayDateTime Format=dd}" />
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Text="{me:DisplayDateTime Format=ddd, Casing=Title}" Typography.Capitals="AllSmallCaps" />
          </ctrl:SimpleStackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.CalendarItem.DaysRange" TargetType="{x:Type ctrl:CalendarItem}" BasedOn="{StaticResource MyNet.Styles.CalendarItem}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
            <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{me:DisplayDateTime Format=ddd}" Typography.Capitals="AllSmallCaps" />
            <TextBlock Text="{Binding Converter={x:Static c:DayNumberToStringConverter.ToTitle}}" />
          </ctrl:SimpleStackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Calendar" TargetType="{x:Type ctrl:CalendarBase}">
    <Setter Property="AccurateDateForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="AccurateDatePreviewOpacity" Value="{StaticResource MyNet.Opacity.Overlay}" />
    <Setter Property="AccurateDateTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <Rectangle Height="2" VerticalAlignment="Top" Fill="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
            <TextBlock Margin="0 -15 0 0" VerticalAlignment="Top" Text="{me:DisplayDateTime Format=t}" />
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="AppointmentsSpacing" Value="{StaticResource MyNet.Margin.Small}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CalendarItemStyle" Value="{StaticResource MyNet.Styles.CalendarItem}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{me:DisplayDateTime Casing=AllCaps, Format=Y}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="InnerBorderBrush" Value="{me:BrushBinding SelfPath=BorderBrush, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="InnerBorderThickess" Value="1" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <ctrl:AppointmentsPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsItemsHost="True" Orientation="{Binding ItemsOrientation, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}" Owner="{Binding RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}" Spacing="{Binding AppointmentsSpacing, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:CalendarBase}">
          <DockPanel>
            <!-- Header -->
            <ctrl:SimpleStackPanel Margin="{StaticResource MyNet.Margins.Medium.Bottom}" HorizontalAlignment="Right" DockPanel.Dock="Top" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Large}" Visibility="{Binding ShowHeader, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
              <ContentControl VerticalAlignment="Center" Content="{Binding DisplayDate, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding HeaderTemplate}" FontSize="{StaticResource MyNet.Font.Size.Caption}" FontWeight="DemiBold" />
              <StackPanel Orientation="Horizontal">
                <Button x:Name="PART_PreviousButton" Style="{StaticResource MyNet.Styles.Button.Filled}" Padding="6 1" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="2 0 0 2" Content="{me:MediumIcon Kind=ChevronLeft}" ToolTip="{me:Resource Previous}" />
                <Button x:Name="PART_TodayButton" Style="{StaticResource MyNet.Styles.Button.Filled}" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Content="{me:Resource Today,                                                               Casing=AllCaps}" />
                <Button x:Name="PART_NextButton" Style="{StaticResource MyNet.Styles.Button.Filled}" Padding="6 1" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0 2 2 0" Content="{me:MediumIcon Kind=ChevronRight}" ToolTip="{me:Resource Next}" />
              </StackPanel>
            </ctrl:SimpleStackPanel>
            <!-- Calendar -->
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <DockPanel Grid.IsSharedSizeScope="True">
                <Grid DockPanel.Dock="Top">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="rowHeadersColumn" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <!-- Column headers -->
                  <ItemsControl x:Name="PART_ColumnHeaders" Style="{StaticResource MyNet.Styles.ItemsControl}" Grid.Column="1" Height="{Binding Path=(p:HeaderAssist.Height), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(p:HeaderAssist.Background), RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" FontWeight="{Binding Path=(p:HeaderAssist.FontWeight), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" ItemTemplate="{TemplateBinding ColumnHeaderTemplate}">
                    <ItemsControl.ItemsPanel>
                      <ItemsPanelTemplate>
                        <UniformGrid Rows="1" />
                      </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                  </ItemsControl>
                </Grid>
                <!-- Content -->
                <Grid>
                  <ctrl:DynamicScrollViewer x:Name="scrollViewer" Padding="0" CanContentScroll="True" Focusable="False" HorizontalScrollBarVisibility="Disabled" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                    <Grid>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="rowHeadersColumn" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <!-- Row headers -->
                      <ItemsControl x:Name="PART_RowHeaders" Style="{StaticResource MyNet.Styles.ItemsControl}" Grid.Column="0" Width="{Binding Path=(p:HeaderAssist.Width), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(p:HeaderAssist.Background), RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" FontWeight="{Binding Path=(p:HeaderAssist.FontWeight), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" ItemTemplate="{TemplateBinding RowHeaderTemplate}">
                        <ItemsControl.ItemsPanel>
                          <ItemsPanelTemplate>
                            <UniformGrid Columns="1" />
                          </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                      </ItemsControl>
                      <!-- Calendar items -->
                      <ctrl:CalendarItemsControl x:Name="PART_DatesItemsControl" Style="{StaticResource MyNet.Styles.CalendarItemsControl}" Grid.Column="1" ItemContainerStyle="{TemplateBinding CalendarItemStyle}" />
                      <!-- Grid used fot extra content (i.e. Week number) -->
                      <Grid x:Name="PART_Grid" Grid.Column="1" p:GridAssist.ColumnCount="{Binding ColumnsCount, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}" p:GridAssist.RowCount="{Binding RowsCount, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}">
                        <ContentControl x:Name="PART_AccurateDatePreview" HorizontalAlignment="Stretch" VerticalAlignment="Top" Content="{Binding AccurateDatePreview, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}}" ContentTemplate="{TemplateBinding AccurateDateTemplate}" Foreground="{TemplateBinding AccurateDateForeground}" IsHitTestVisible="False" Opacity="{TemplateBinding AccurateDatePreviewOpacity}">
                          <ContentControl.Visibility>
                            <MultiBinding Converter="{x:Static c:MultipleBooleanToVisibilityConverter.AndCollapse}">
                              <Binding Path="ShowAccurateDate" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding Converter="{x:Static c:NullToBooleanConverter.FalseIfNull}" Mode="OneWay" Path="AccurateDatePreview" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                          </ContentControl.Visibility>
                        </ContentControl>
                        <ContentControl x:Name="PART_AccurateDate" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding AccurateDate}" ContentTemplate="{TemplateBinding AccurateDateTemplate}" Foreground="{TemplateBinding AccurateDateForeground}" IsHitTestVisible="False">
                          <ContentControl.Visibility>
                            <MultiBinding Converter="{x:Static c:MultipleBooleanToVisibilityConverter.AndCollapse}">
                              <Binding Path="ShowAccurateDate" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding Mode="OneWay" Path="AccurateDateIsVisible" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding Converter="{x:Static c:NullToBooleanConverter.FalseIfNull}" Path="AccurateDate" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                          </ContentControl.Visibility>
                        </ContentControl>
                      </Grid>
                      <!-- Appointment items -->
                      <ItemsPresenter Grid.Column="1" Visibility="{Binding AppointmentsDisplayMode, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:EnumToVisibilityConverter.CollapsedIfNotAny}, ConverterParameter={x:Static ctrl:AppointmentsDisplayMode.Range}}" />
                    </Grid>
                  </ctrl:DynamicScrollViewer>
                  <Grid p:BusyAssist.AttachService="{Binding BusyService, RelativeSource={RelativeSource TemplatedParent}}" p:BusyAssist.Style="{StaticResource MyNet.Styles.BusyControl.Dark.Foreground}" />
                </Grid>
              </DockPanel>
            </Border>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
    <Setter Property="p:HeaderAssist.Background" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:HeaderAssist.FontWeight" Value="{StaticResource MyNet.Font.Weight.Header}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:HeaderAssist.Height" Value="35" />
    <Setter Property="p:HeaderAssist.Opacity" Value="{DynamicResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:HeaderAssist.Width" Value="50" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysByMonth" TargetType="{x:Type ctrl:CalendarDaysByMonth}" BasedOn="{StaticResource MyNet.Styles.Calendar}">
    <Setter Property="AppointmentsMargin" Value="2 25 2 2" />
    <Setter Property="CalendarItemStyle" Value="{StaticResource MyNet.Styles.CalendarItem.DaysByMonth}" />
    <Setter Property="ColumnHeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Margin="{StaticResource MyNet.Margins.Default}" Text="{me:Translation Converter={x:Static c:DayOfWeekStringConverter.ToTitle}}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.DaysByMonth}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysByMonth.Accent" TargetType="{x:Type ctrl:CalendarDaysByMonth}" BasedOn="{StaticResource MyNet.Styles.Calendar.DaysByMonth}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.DaysByMonth.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysByMonth.Alternate" TargetType="{x:Type ctrl:CalendarDaysByMonth}" BasedOn="{StaticResource MyNet.Styles.Calendar.DaysByMonth}">
    <Setter Property="AppointmentsMargin" Value="0 25 0 2" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.DaysByMonth}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysByMonth.Alternate.Accent" TargetType="{x:Type ctrl:CalendarDaysByMonth}" BasedOn="{StaticResource MyNet.Styles.Calendar.DaysByMonth}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.DaysByMonth.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.MonthsByYear" TargetType="{x:Type ctrl:CalendarMonthsByYear}" BasedOn="{StaticResource MyNet.Styles.Calendar}">
    <Setter Property="AppointmentsMargin" Value="2 25 2 2" />
    <Setter Property="CalendarItemStyle" Value="{StaticResource MyNet.Styles.CalendarItem.MonthsByYear}" />
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{me:DisplayDateTime Casing=AllCaps, Format=yyyy}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.MonthsByYear}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.MonthsByYear.Accent" TargetType="{x:Type ctrl:CalendarMonthsByYear}" BasedOn="{StaticResource MyNet.Styles.Calendar.MonthsByYear}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.MonthsByYear.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.MonthsByYear.Alternate" TargetType="{x:Type ctrl:CalendarMonthsByYear}" BasedOn="{StaticResource MyNet.Styles.Calendar.MonthsByYear}">
    <Setter Property="AppointmentsMargin" Value="0 25 0 2" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.MonthsByYear}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.MonthsByYear.Alternate.Accent" TargetType="{x:Type ctrl:CalendarMonthsByYear}" BasedOn="{StaticResource MyNet.Styles.Calendar.MonthsByYear}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.MonthsByYear.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.YearsByDecade" TargetType="{x:Type ctrl:CalendarYearsByDecade}" BasedOn="{StaticResource MyNet.Styles.Calendar}">
    <Setter Property="AppointmentsMargin" Value="2 25 2 2" />
    <Setter Property="CalendarItemStyle" Value="{StaticResource MyNet.Styles.CalendarItem.YearsByDecade}" />
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{me:DisplayDateTime Casing=AllCaps, Format=yyyy}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.YearsByDecade}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.YearsByDecade.Accent" TargetType="{x:Type ctrl:CalendarYearsByDecade}" BasedOn="{StaticResource MyNet.Styles.Calendar.YearsByDecade}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.YearsByDecade.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.YearsByDecade.Alternate" TargetType="{x:Type ctrl:CalendarYearsByDecade}" BasedOn="{StaticResource MyNet.Styles.Calendar.YearsByDecade}">
    <Setter Property="AppointmentsMargin" Value="0 25 0 2" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.YearsByDecade}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.MonthsBYearsByDecadeyYear.Alternate.Accent" TargetType="{x:Type ctrl:CalendarYearsByDecade}" BasedOn="{StaticResource MyNet.Styles.Calendar.YearsByDecade}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.YearsByDecade.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.HoursByWeek" TargetType="{x:Type ctrl:CalendarHoursByWeek}" BasedOn="{StaticResource MyNet.Styles.Calendar}">
    <Setter Property="AppointmentsMargin" Value="2" />
    <Setter Property="BorderThickness" Value="0 0 1 1" />
    <Setter Property="CalendarItemStyle" Value="{StaticResource MyNet.Styles.CalendarItem.HoursByWeek}" />
    <Setter Property="ColumnHeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:SimpleStackPanel Margin="{StaticResource MyNet.Margins.Default}" VerticalAlignment="Center" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
            <TextBlock Text="{me:Translation Converter={x:Static c:DayOfWeekStringConverter.ToTitle}}" />
            <TextBlock Text="{me:Translation Converter={x:Static c:DayNumberToStringConverter.ToTitle}}" />
          </ctrl:SimpleStackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:SimpleStackPanel Orientation="Horizontal">
            <TextBlock Tag="{Binding Converter={x:Static c:DateToWeekConverter.ToStartWeek}}" Text="{me:DisplayDateTime Path=Tag, RelativeSource={RelativeSource Self}, Casing=Title, Format=M}" />
            <TextBlock Text="-" />
            <TextBlock Tag="{Binding Converter={x:Static c:DateToWeekConverter.ToEndWeek}}" Text="{me:DisplayDateTime Path=Tag, RelativeSource={RelativeSource Self}, Casing=Title, Format='dd MMMM yyyy'}" />
          </ctrl:SimpleStackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.HoursByWeek}" />
    <Setter Property="RowHeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Margin="{StaticResource MyNet.Margins.Default}" HorizontalAlignment="Center" VerticalAlignment="Top" Text="{me:DisplayDateTime Format=t}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.HoursByWeek.Accent" TargetType="{x:Type ctrl:CalendarHoursByWeek}" BasedOn="{StaticResource MyNet.Styles.Calendar.HoursByWeek}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.HoursByWeek.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.HoursByWeek.Alternate" TargetType="{x:Type ctrl:CalendarHoursByWeek}" BasedOn="{StaticResource MyNet.Styles.Calendar.HoursByWeek}">
    <Setter Property="AppointmentsMargin" Value="0" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.HoursByWeek}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.HoursByWeek.Alternate.Accent" TargetType="{x:Type ctrl:CalendarHoursByWeek}" BasedOn="{StaticResource MyNet.Styles.Calendar.HoursByWeek.Alternate}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.HoursByWeek.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.HoursByDay" TargetType="{x:Type ctrl:CalendarHoursByDay}" BasedOn="{StaticResource MyNet.Styles.Calendar}">
    <Setter Property="AppointmentsMargin" Value="2" />
    <Setter Property="BorderThickness" Value="0 0 1 1" />
    <Setter Property="CalendarItemStyle" Value="{StaticResource MyNet.Styles.CalendarItem.HoursByDay}" />
    <Setter Property="ColumnHeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:SimpleStackPanel Margin="{StaticResource MyNet.Margins.Default}" VerticalAlignment="Center" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
            <TextBlock Text="{me:Translation Converter={x:Static c:DayOfWeekStringConverter.ToTitle}}" />
            <TextBlock Text="{me:Translation Converter={x:Static c:DayNumberToStringConverter.ToTitle}}" />
          </ctrl:SimpleStackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:SimpleStackPanel Orientation="Horizontal">
            <TextBlock Text="{me:DisplayDateTime Path=DisplayDateStart, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}, Casing=Title, Format=M}" />
            <TextBlock Text="-" />
            <TextBlock Text="{me:DisplayDateTime Path=DisplayDateEnd, RelativeSource={RelativeSource AncestorType={x:Type ctrl:CalendarBase}}, Casing=Title, Format='dd MMMM yyyy'}" />
          </ctrl:SimpleStackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.HoursByDay}" />
    <Setter Property="RowHeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Margin="{StaticResource MyNet.Margins.Default}" HorizontalAlignment="Center" VerticalAlignment="Top" Text="{me:DisplayDateTime Format=t}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.HoursByDay.Accent" TargetType="{x:Type ctrl:CalendarHoursByDay}" BasedOn="{StaticResource MyNet.Styles.Calendar.HoursByDay}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.HoursByDay.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.HoursByDay.Alternate" TargetType="{x:Type ctrl:CalendarHoursByDay}" BasedOn="{StaticResource MyNet.Styles.Calendar.HoursByDay}">
    <Setter Property="AppointmentsMargin" Value="0" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.HoursByDay}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.HoursByDay.Alternate.Accent" TargetType="{x:Type ctrl:CalendarHoursByDay}" BasedOn="{StaticResource MyNet.Styles.Calendar.HoursByDay.Alternate}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.HoursByDay.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysByYear" TargetType="{x:Type ctrl:CalendarDaysByYear}" BasedOn="{StaticResource MyNet.Styles.Calendar}">
    <Setter Property="AppointmentsMargin" Value="25 2 2 2" />
    <Setter Property="CalendarItemStyle" Value="{StaticResource MyNet.Styles.CalendarItem.DaysByYear}" />
    <Setter Property="ColumnHeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Margin="{StaticResource MyNet.Margins.Default}" Text="{me:DisplayDateTime Format=MMMM, Casing=AllCaps}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{me:DisplayDateTime Casing=AllCaps, Format=yyyy}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.DaysByYear}" />
    <Setter Property="WeekStyle" Value="{StaticResource MyNet.Styles.ContentControl.Calendar.DaysByYear.Week}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysByYear.Accent" TargetType="{x:Type ctrl:CalendarDaysByYear}" BasedOn="{StaticResource MyNet.Styles.Calendar.DaysByYear}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.DaysByYear.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysByYear.Alternate" TargetType="{x:Type ctrl:CalendarDaysByYear}" BasedOn="{StaticResource MyNet.Styles.Calendar.DaysByYear}">
    <Setter Property="AppointmentsMargin" Value="25 0 0 0" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.DaysByYear}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysByYear.Alternate.Accent" TargetType="{x:Type ctrl:CalendarDaysByYear}" BasedOn="{StaticResource MyNet.Styles.Calendar.DaysByYear.Alternate}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.DaysByYear.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysRange" TargetType="{x:Type ctrl:CalendarDaysRange}" BasedOn="{StaticResource MyNet.Styles.Calendar}">
    <Setter Property="AppointmentsMargin" Value="2 25 2 2" />
    <Setter Property="CalendarItemStyle" Value="{StaticResource MyNet.Styles.CalendarItem.DaysRange}" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.DaysRange}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysRange.Accent" TargetType="{x:Type ctrl:CalendarDaysRange}" BasedOn="{StaticResource MyNet.Styles.Calendar.DaysRange}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.DaysRange.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysRange.Alternate" TargetType="{x:Type ctrl:CalendarDaysRange}" BasedOn="{StaticResource MyNet.Styles.Calendar.DaysRange}">
    <Setter Property="AppointmentsMargin" Value="0 25 0 2" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.DaysRange}" />
  </Style>
  <Style x:Key="MyNet.Styles.Calendar.DaysRange.Alternate.Accent" TargetType="{x:Type ctrl:CalendarDaysRange}" BasedOn="{StaticResource MyNet.Styles.Calendar.DaysRange.Alternate}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.DaysRange.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.Chip" TargetType="{x:Type ctrl:Chip}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="Height" Value="32" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="IconBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="IconForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:Chip}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3" Background="{TemplateBinding Background}" CornerRadius="16" />
            <ContentControl x:Name="IconControl" Width="32" Height="32" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Background="{TemplateBinding IconBackground}" Content="{TemplateBinding Icon}" FontSize="17" FontWeight="{StaticResource MyNet.Font.Weight}" Foreground="{TemplateBinding IconForeground}" IsTabStop="False" Visibility="{TemplateBinding Icon, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
              <ContentControl.Clip>
                <EllipseGeometry Center="16,16" RadiusX="16" RadiusY="16" />
              </ContentControl.Clip>
              <ContentControl.Template>
                <ControlTemplate TargetType="ContentControl">
                  <Border Background="{TemplateBinding Background}">
                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" />
                  </Border>
                </ControlTemplate>
              </ContentControl.Template>
            </ContentControl>
            <ContentControl x:Name="TextBlock" Grid.Column="1" Margin="8 0 12 0" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentTemplateSelector}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" IsTabStop="False" />
            <Button x:Name="PART_DeleteButton" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Grid.Column="2" Margin="0 0 8 0" Content="{me:ToolIcon Kind=Close}" ToolTip="{TemplateBinding DeleteToolTip}" Visibility="{TemplateBinding IsDeletable, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="IconControl" Property="Visibility" Value="Collapsed">
              <Setter TargetName="TextBlock" Property="Margin" Value="12 0 12 0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.Clock" TargetType="{x:Type ctrl:Clock}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ButtonRadiusInnerRatio" Value=".6" />
    <Setter Property="ButtonRadiusRatio" Value=".835" />
    <Setter Property="ButtonStyle">
      <Setter.Value>
        <Style TargetType="{x:Type md:ClockItemButton}">
          <Setter Property="Background" Value="Transparent" />
          <Setter Property="Canvas.ZIndex" Value="0" />
          <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:Clock}}}" />
          <Setter Property="Height" Value="25" />
          <Setter Property="HorizontalContentAlignment" Value="Center" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type md:ClockItemButton}">
                <Grid>
                  <Thumb x:Name="PART_Thumb" Style="{StaticResource MyNet.Styles.Thumb.Embedded.Clock}" Background="{TemplateBinding Background}" Opacity="23" />
                  <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" IsHitTestVisible="False" />
                </Grid>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <Setter Property="VerticalContentAlignment" Value="Center" />
          <Setter Property="Width" Value="25" />
          <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:Clock}}, Converter={x:Static c:BrushConverter.Opacity}, ConverterParameter={StaticResource MyNet.Opacity.Hovered}}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Background" Value="{Binding Path=LineBackground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:Clock}}}" />
              <Setter Property="Foreground" Value="{Binding Path=SelectedForeground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:Clock}}}" />
            </Trigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="ClockBackground" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="FlowDirection" Value="LeftToRight" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="HeaderBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="HeaderForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="Is24Hours" Value="True" />
    <Setter Property="IsHeaderVisible" Value="True" />
    <Setter Property="LesserButtonStyle">
      <Setter.Value>
        <Style TargetType="{x:Type md:ClockItemButton}">
          <Setter Property="Background" Value="Transparent" />
          <Setter Property="Canvas.ZIndex" Value="1" />
          <Setter Property="Height" Value="10" />
          <Setter Property="HorizontalContentAlignment" Value="Center" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type md:ClockItemButton}">
                <Grid>
                  <Thumb x:Name="PART_Thumb" Style="{StaticResource MyNet.Styles.Thumb.Embedded.Clock}" Background="{TemplateBinding Background}" Opacity=".52" ToolTip="{TemplateBinding Content}" />
                  <Ellipse Width="6" Height="6" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{TemplateBinding Background}" IsHitTestVisible="False" />
                </Grid>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <Setter Property="VerticalContentAlignment" Value="Center" />
          <Setter Property="Width" Value="10" />
          <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:Clock}}, Converter={x:Static c:BrushConverter.Opacity}, ConverterParameter={StaticResource MyNet.Opacity.Hovered}}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Background" Value="{Binding Path=LineBackground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:Clock}}}" />
              <Setter Property="Foreground" Value="{Binding Path=LineBackground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:Clock}}, Converter={x:Static c:BrushConverter.Contrast}}" />
            </Trigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="LineBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="SelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:Clock}">
          <ctrl:Card Padding="0 -1 0 0" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" ClipContent="True" Foreground="{TemplateBinding Foreground}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="*" To="Hours">
                    <Storyboard>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                      </BooleanAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1.2" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1.2" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                      </BooleanAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value=".85">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value=".85">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Hours" To="Minutes">
                    <Storyboard>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                      </BooleanAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.2">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.2">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                      </BooleanAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0.85" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0.85" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Minutes" To="Seconds">
                    <Storyboard>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                      </BooleanAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.2">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.2">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_SecondsCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                      </BooleanAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_SecondsCanvas" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SecondsScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0.85" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SecondsScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0.85" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Hours" To="Seconds">
                    <Storyboard>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                      </BooleanAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.2">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.2">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_SecondsCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                      </BooleanAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_SecondsCanvas" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SecondsScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0.85" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SecondsScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0.85" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Seconds" To="Minutes">
                    <Storyboard>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_SecondsCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                      </BooleanAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_SecondsCanvas" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SecondsScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value=".85">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SecondsScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value=".85">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                      </BooleanAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1.2" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="1.2" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Hours">
                  <Storyboard>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                      <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                    </BooleanAnimationUsingKeyFrames>
                    <DoubleAnimation Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleX" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleY" To="1" Duration="0" />
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                      <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                    </BooleanAnimationUsingKeyFrames>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_SecondsCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                      <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                    </BooleanAnimationUsingKeyFrames>
                    <DoubleAnimation Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleX" To=".85" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleY" To=".85" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="PART_SecondsCanvas" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="SecondsScaleTransform" Storyboard.TargetProperty="ScaleX" To=".85" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="SecondsScaleTransform" Storyboard.TargetProperty="ScaleY" To=".85" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Minutes">
                  <Storyboard>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                      <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                    </BooleanAnimationUsingKeyFrames>
                    <DoubleAnimation Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleX" To="1.2" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleY" To="1.2" Duration="0" />
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                      <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                    </BooleanAnimationUsingKeyFrames>
                    <DoubleAnimation Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleX" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleY" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Seconds">
                  <Storyboard>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                      <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                    </BooleanAnimationUsingKeyFrames>
                    <DoubleAnimation Storyboard.TargetName="PART_HoursCanvas" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleX" To="1.2" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="HoursScaleTransform" Storyboard.TargetProperty="ScaleY" To="1.2" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleX" To="1.2" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="MinutesScaleTransform" Storyboard.TargetProperty="ScaleY" To="1.2" Duration="0" />
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_MinutesCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                      <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                    </BooleanAnimationUsingKeyFrames>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_SecondsCanvas" Storyboard.TargetProperty="IsHitTestVisible">
                      <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                    </BooleanAnimationUsingKeyFrames>
                    <DoubleAnimation Storyboard.TargetName="PART_SecondsCanvas" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="SecondsScaleTransform" Storyboard.TargetProperty="ScaleX" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="SecondsScaleTransform" Storyboard.TargetProperty="ScaleY" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <!-- Header -->
              <Border Width="236" Height="84" Margin="0 0 0 12" Background="{TemplateBinding HeaderBackground}" CornerRadius="{StaticResource MyNet.CornerRadius.Container.Top}" Visibility="{TemplateBinding IsHeaderVisible, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                <ctrl:SimpleStackPanel x:Name="TimeReadoutStackPanel" Margin="20 15" HorizontalAlignment="Left" VerticalAlignment="Center" Orientation="Horizontal">
                  <ctrl:SimpleStackPanel.Resources>
                    <Style x:Key="TimeTextBlock" TargetType="{x:Type TextBlock}">
                      <Setter Property="FontSize" Value="40" />
                      <Setter Property="FontWeight" Value="{StaticResource MyNet.Font.Weight}" />
                      <Setter Property="Foreground" Value="{Binding HeaderForeground, RelativeSource={RelativeSource AncestorType={x:Type ctrl:Clock}}}" />
                    </Style>
                  </ctrl:SimpleStackPanel.Resources>
                  <Grid x:Name="PART_HourReadOut">
                    <TextBlock x:Name="PART_HourReadOutText" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Time, Mode=OneWay, StringFormat={}{0:%h}}">
                      <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TimeTextBlock}">
                          <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DisplayMode}" Value="{x:Static md:ClockDisplayMode.Hours}">
                              <Setter Property="Opacity" Value="1" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </TextBlock.Style>
                    </TextBlock>
                  </Grid>
                  <TextBlock Style="{StaticResource TimeTextBlock}" Margin="-16 0 -16 0" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Time, Mode=OneWay, StringFormat={}{0: : }}" />
                  <Grid x:Name="PART_MinuteReadOut">
                    <TextBlock x:Name="PART_MinuteReadOutText" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Time, Mode=OneWay, StringFormat={}{0:mm}}">
                      <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TimeTextBlock}">
                          <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DisplayMode}" Value="{x:Static md:ClockDisplayMode.Minutes}">
                              <Setter Property="Opacity" Value="1" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </TextBlock.Style>
                    </TextBlock>
                  </Grid>
                  <TextBlock x:Name="PART_SecondColonPrefix" Style="{StaticResource TimeTextBlock}" Margin="-16 0 -16 0" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Time, Mode=OneWay, StringFormat={}{0: : }}" />
                  <Grid x:Name="PART_SecondReadOut">
                    <TextBlock x:Name="PART_SecondReadOutText" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Time, Mode=OneWay, StringFormat={}{0:ss}}">
                      <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TimeTextBlock}">
                          <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DisplayMode}" Value="{x:Static md:ClockDisplayMode.Seconds}">
                              <Setter Property="Opacity" Value="1" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </TextBlock.Style>
                    </TextBlock>
                  </Grid>
                  <TextBlock x:Name="AmPmReadout" Margin="2 0 0 8" VerticalAlignment="Bottom" FontSize="20" Foreground="{TemplateBinding HeaderForeground}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Time, Mode=OneWay, StringFormat={}{0:tt}}" />
                </ctrl:SimpleStackPanel>
              </Border>
              <!-- Clock -->
              <Grid Grid.Row="1" Margin="15" VerticalAlignment="Center">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="auto" />
                </Grid.RowDefinitions>
                <!-- Clock background -->
                <Ellipse x:Name="BackgroundEllipse" Width="180" Height="180" HorizontalAlignment="Center" Fill="{TemplateBinding ClockBackground}" />
                <!-- Hours -->
                <Canvas x:Name="PART_HoursCanvas" Width="180" Height="180" HorizontalAlignment="Center" RenderTransformOrigin=".5,.5">
                  <Path x:Name="HourLine" Canvas.Left="88.923" Canvas.Top="14.906" Width="3" Height="75.88" Data="M2.25,95.515 C2.25,96.036356 1.8582492,96.459 1.375,96.459 C0.89175084,96.459 0.5,96.036356 0.5,95.515 C0.5,94.993643 0.89175084,94.571 1.375,94.571 C1.8582492,94.571 2.25,94.993643 2.25,95.515 z M1.375,95.469003 L1.375,0.50000001" Fill="{TemplateBinding LineBackground}" RenderTransformOrigin="0.5,0.985" Stretch="Fill" Stroke="{TemplateBinding LineBackground}">
                    <Path.RenderTransform>
                      <RotateTransform Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Time, Converter={x:Static c:ClockLineConverter.Hours}}" />
                    </Path.RenderTransform>
                  </Path>
                  <Canvas.RenderTransform>
                    <ScaleTransform x:Name="HoursScaleTransform" ScaleX="1" ScaleY="1" />
                  </Canvas.RenderTransform>
                </Canvas>
                <!-- Minutes -->
                <Canvas x:Name="PART_MinutesCanvas" Width="180" Height="180" IsHitTestVisible="False" Opacity="0" RenderTransformOrigin=".5,.5">
                  <Path x:Name="MinuteLine" Canvas.Left="88.923" Canvas.Top="14.906" Width="3" Height="75.88" Data="M2.25,95.515 C2.25,96.036356 1.8582492,96.459 1.375,96.459 C0.89175084,96.459 0.5,96.036356 0.5,95.515 C0.5,94.993643 0.89175084,94.571 1.375,94.571 C1.8582492,94.571 2.25,94.993643 2.25,95.515 z M1.375,95.469003 L1.375,0.50000001" Fill="{TemplateBinding LineBackground}" RenderTransformOrigin="0.5,0.985" Stretch="Fill" Stroke="{TemplateBinding LineBackground}">
                    <Path.RenderTransform>
                      <RotateTransform Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Time, Converter={x:Static c:ClockLineConverter.Minutes}}" />
                    </Path.RenderTransform>
                  </Path>
                  <Canvas.RenderTransform>
                    <ScaleTransform x:Name="MinutesScaleTransform" ScaleX="1" ScaleY="1" />
                  </Canvas.RenderTransform>
                </Canvas>
                <!-- Seconds -->
                <Canvas x:Name="PART_SecondsCanvas" Width="180" Height="180" IsHitTestVisible="False" Opacity="0" RenderTransformOrigin=".5,.5">
                  <Path x:Name="SecondLine" Canvas.Left="88.923" Canvas.Top="14.906" Width="3" Height="75.88" Data="M2.25,95.515 C2.25,96.036356 1.8582492,96.459 1.375,96.459 C0.89175084,96.459 0.5,96.036356 0.5,95.515 C0.5,94.993643 0.89175084,94.571 1.375,94.571 C1.8582492,94.571 2.25,94.993643 2.25,95.515 z M1.375,95.469003 L1.375,0.50000001" Fill="{TemplateBinding LineBackground}" RenderTransformOrigin="0.5,0.985" Stretch="Fill" Stroke="{TemplateBinding LineBackground}">
                    <Path.RenderTransform>
                      <RotateTransform Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Time, Converter={x:Static c:ClockLineConverter.Seconds}}" />
                    </Path.RenderTransform>
                  </Path>
                  <Canvas.RenderTransform>
                    <ScaleTransform x:Name="SecondsScaleTransform" ScaleX="1" ScaleY="1" />
                  </Canvas.RenderTransform>
                </Canvas>
                <UniformGrid Grid.Row="1" Rows="1">
                  <RadioButton x:Name="AMRadioButton" Style="{StaticResource MyNet.Styles.ToggleButton.Rounded.Text}" Width="47.333" Height="47.333" Margin="0 0 15 0" HorizontalAlignment="Center" VerticalAlignment="Bottom" Content="AM" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPostMeridiem, Converter={x:Static c:NotBooleanConverter.Default}}" />
                  <RadioButton x:Name="PMRadioButton" Style="{StaticResource MyNet.Styles.ToggleButton.Rounded.Text}" Width="47.333" Height="47.333" Margin="15 0 0 0" HorizontalAlignment="Center" VerticalAlignment="Bottom" Content="PM" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPostMeridiem}" />
                </UniformGrid>
              </Grid>
            </Grid>
          </ctrl:Card>
          <ControlTemplate.Triggers>
            <Trigger Property="Is24Hours" Value="True">
              <Setter TargetName="AMRadioButton" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="AmPmReadout" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_HourReadOutText" Property="Text" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Time, Mode=OneWay, StringFormat={}{0:HH}}" />
              <Setter TargetName="PMRadioButton" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Is24Hours" Value="True" />
                <Condition Property="IsPostMeridiem" Value="False" />
                <Condition Property="IsMidnightHour" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="HourLine" Property="Canvas.Top" Value="31.304" />
              <Setter TargetName="HourLine" Property="Height" Value="59.478" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Is24Hours" Value="True" />
                <Condition Property="IsMiddayHour" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="HourLine" Property="Canvas.Top" Value="31.304" />
              <Setter TargetName="HourLine" Property="Height" Value="59.478" />
            </MultiTrigger>
            <Trigger Property="DisplayAutomation" Value="{x:Static md:ClockDisplayAutomation.None}">
              <Setter TargetName="PART_SecondColonPrefix" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_SecondReadOut" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="DisplayAutomation" Value="{x:Static md:ClockDisplayAutomation.Cycle}">
              <Setter TargetName="PART_SecondColonPrefix" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_SecondReadOut" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="DisplayAutomation" Value="{x:Static md:ClockDisplayAutomation.ToMinutesOnly}">
              <Setter TargetName="PART_SecondColonPrefix" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_SecondReadOut" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="DisplayAutomation" Value="{x:Static md:ClockDisplayAutomation.ToSeconds}">
              <Setter TargetName="PART_SecondColonPrefix" Property="Visibility" Value="Visible" />
              <Setter TargetName="PART_SecondReadOut" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.GroupBox.Embedded.ColorCanvas" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.Clean.Caption}">
    <Setter Property="p:HeaderAssist.FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="p:HeaderAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:HeaderAssist.Padding" Value="{StaticResource MyNet.Margins.Small.Bottom}" />
  </Style>
  <Style x:Key="MyNet.Styles.ContentDialog" TargetType="{x:Type ctrl:ContentDialog}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="FooterPadding" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="HeaderBackground" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="HeaderFontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="HeaderForeground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="HeaderHeight" Value="30" />
    <Setter Property="HeaderPadding" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ContentDialog}">
          <Grid p:BusyAssist.AttachService="{TemplateBinding BusyService}">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!-- Header -->
            <Grid DockPanel.Dock="Top">
              <Border Height="{TemplateBinding HeaderHeight}" Padding="{TemplateBinding HeaderPadding}" Background="{TemplateBinding HeaderBackground}" Visibility="{Binding ShowHeader, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                <ContentControl Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Focusable="False" FontSize="{TemplateBinding HeaderFontSize}" Foreground="{TemplateBinding HeaderForeground}" />
              </Border>
              <!-- Close Button -->
              <Button Style="{StaticResource MyNet.Styles.Button.Text}" Width="20" Height="20" Margin="{StaticResource MyNet.Margins.Default}" Padding="0" HorizontalAlignment="Right" Command="{x:Static ctrl:OverlayDialogControl.CloseDialogCommand}" Content="{me:Icon Kind=Close}" Focusable="False" ToolTip="{me:Resource Close}" Visibility="{Binding ShowCloseButton, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            </Grid>
            <!-- Content -->
            <ContentPresenter Grid.Row="1" Margin="{TemplateBinding Padding}" Focusable="False" />
            <!-- Footer -->
            <ContentControl Grid.Row="2" Margin="{TemplateBinding FooterPadding}" Content="{TemplateBinding Footer}" ContentTemplate="{TemplateBinding FooterTemplate}" Focusable="False" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MyNet.Styles.ToggleButton.Embedded.Expander.Horizontal.Alternate" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.Button.Rounded.Text}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <DataTemplate.Resources>
            <Storyboard x:Key="OpenStorybard">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                <EasingDoubleKeyFrame KeyTime="{StaticResource ExpandKeyTime}" Value="180" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CloseStorybard">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                <EasingDoubleKeyFrame KeyTime="{StaticResource CollapseKeyTime}" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </DataTemplate.Resources>
          <ctrl:PackIcon x:Name="ExpandPath" Width="24" Height="24" Kind="ArrowRight" RenderTransformOrigin="0.5 0.5">
            <ctrl:PackIcon.RenderTransform>
              <RotateTransform x:Name="ExpandPathRotateTransform" />
            </ctrl:PackIcon.RenderTransform>
          </ctrl:PackIcon>
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}" Value="True">
              <DataTrigger.EnterActions>
                <BeginStoryboard x:Name="BeginOpenStorybard" Storyboard="{StaticResource OpenStorybard}" />
              </DataTrigger.EnterActions>
              <DataTrigger.ExitActions>
                <RemoveStoryboard BeginStoryboardName="BeginOpenStorybard" />
              </DataTrigger.ExitActions>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}" Value="False">
              <DataTrigger.EnterActions>
                <BeginStoryboard x:Name="BeginCloseStorybard" Storyboard="{StaticResource CloseStorybard}" />
              </DataTrigger.EnterActions>
              <DataTrigger.ExitActions>
                <RemoveStoryboard BeginStoryboardName="BeginCloseStorybard" />
              </DataTrigger.ExitActions>
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Height" Value="30" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="RenderTransformOrigin" Value="0.5 0.5" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Width" Value="30" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType={x:Type ctrl:ContentExpander}}}" Value="Up">
        <Setter Property="RenderTransform">
          <Setter.Value>
            <RotateTransform Angle="180" />
          </Setter.Value>
        </Setter>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ContentExpander.Horizontal.Alternate" TargetType="{x:Type ctrl:ContentExpander}" BasedOn="{StaticResource MyNet.Styles.ContentExpander.Horizontal}">
    <Setter Property="CollapsedSize" Value="50" />
    <Setter Property="ExpandedSize" Value="250" />
    <Setter Property="Padding" Value="0 50 0 0" />
    <Setter Property="ToggleButtontyle" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.Expander.Horizontal.Alternate}" />
    <Setter Property="Width" Value="250" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Filled" TargetType="{x:Type ctrl:DropDownButton}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.ToggleButton.Filled}" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Button}" />
    <Setter Property="FontWeight" Value="{StaticResource MyNet.Font.Weight.Button}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="11 5" />
    <Setter Property="PlacementMode" Value="BottomAndAlignLeftEdges" />
    <Setter Property="PopupHorizontalOffset" Value="0" />
    <Setter Property="PopupMode" Value="Click" />
    <Setter Property="PopupVerticalOffset" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:DropDownButton}">
          <Grid>
            <ToggleButton Name="PART_Toggle" Style="{TemplateBinding ButtonStyle}" Width="Auto" Height="Auto" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" p:IconAssist.Alignment="{TemplateBinding p:IconAssist.Alignment}" p:IconAssist.Icon="{TemplateBinding p:IconAssist.Icon}" p:IconAssist.Margin="{TemplateBinding p:IconAssist.Margin}" p:IconAssist.Opacity="{TemplateBinding p:IconAssist.Opacity}" p:RippleAssist.Feedback="{TemplateBinding p:RippleAssist.Feedback}" p:ThemeAssist.CornerRadius="{TemplateBinding p:ThemeAssist.CornerRadius}" p:ThemeAssist.IsCheckedBackground="{TemplateBinding p:ThemeAssist.IsCheckedBackground}" p:ThemeAssist.IsCheckedBorderBrush="{TemplateBinding p:ThemeAssist.IsCheckedBorderBrush}" p:ThemeAssist.IsCheckedForeground="{TemplateBinding p:ThemeAssist.IsCheckedForeground}" p:ThemeAssist.IsMouseOverBackground="{TemplateBinding p:ThemeAssist.IsMouseOverBackground}" p:ThemeAssist.IsMouseOverBorderBrush="{TemplateBinding p:ThemeAssist.IsMouseOverBorderBrush}" p:ThemeAssist.IsMouseOverForeground="{TemplateBinding p:ThemeAssist.IsMouseOverForeground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ContentTemplate="{x:Null}" Cursor="{TemplateBinding Cursor}" Focusable="{TemplateBinding Focusable}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}" IsTabStop="False" TabIndex="{TemplateBinding TabIndex}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="Col0" Width="Auto" />
                  <ColumnDefinition x:Name="Col1" Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition x:Name="Row0" Height="Auto" />
                  <RowDefinition x:Name="Row1" Height="Auto" />
                </Grid.RowDefinitions>
                <ctrl:PackIcon x:Name="Caret" Grid.Row="0" Grid.Column="1" Width="18" Height="18" HorizontalAlignment="Center" VerticalAlignment="Center" Kind="ChevronDown" RenderTransformOrigin="0.5, 0.5" Visibility="{Binding ShowDropDownButton, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                  <ctrl:PackIcon.RenderTransform>
                    <RotateTransform Angle="0" />
                  </ctrl:PackIcon.RenderTransform>
                </ctrl:PackIcon>
                <ContentControl x:Name="Content" Grid.Row="0" Grid.Column="0" Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}" ContentTemplateSelector="{TemplateBinding ToggleContentTemplateSelector}" />
              </Grid>
            </ToggleButton>
            <ctrl:PopupEx x:Name="PART_Popup" CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}" HorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupHorizontalOffset}" IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}" PlacementTarget="{Binding ElementName=PART_Toggle}" PopupAnimation="{TemplateBinding PopupAnimation}" VerticalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupVerticalOffset}">
              <Grid>
                <Border Background="White" Opacity="0.002" />
                <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" MaxWidth="{TemplateBinding MaxPopupWidth}" MaxHeight="{TemplateBinding MaxPopupHeight}" Padding="{TemplateBinding PopupPadding}" p:PopupAssist.PlacementMode="{TemplateBinding PlacementMode}" p:PopupAssist.ShowIndicator="{Binding Path=(p:PopupAssist.ShowIndicator), RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding p:PopupAssist.Background}" FontSize="{StaticResource MyNet.Font.Size}" FontWeight="{StaticResource MyNet.Font.Weight.ToolTip}" Foreground="{TemplateBinding p:PopupAssist.Foreground}">
                  <ContentControl Content="{TemplateBinding PopupContent}" ContentTemplate="{TemplateBinding PopupContentTemplate}" />
                </ctrl:Card>
              </Grid>
            </ctrl:PopupEx>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="DropDownButtonPosition" Value="Top">
              <Setter TargetName="Caret" Property="Grid.Column" Value="0" />
              <Setter TargetName="Caret" Property="Grid.Row" Value="0" />
              <Setter TargetName="Content" Property="Grid.Column" Value="0" />
              <Setter TargetName="Content" Property="Grid.Row" Value="1" />
              <Setter TargetName="Row0" Property="Height" Value="Auto" />
              <Setter TargetName="Row1" Property="Height" Value="*" />
            </Trigger>
            <Trigger Property="DropDownButtonPosition" Value="Right">
              <Setter TargetName="Caret" Property="Grid.Column" Value="1" />
              <Setter TargetName="Caret" Property="Grid.Row" Value="0" />
              <Setter TargetName="Col0" Property="Width" Value="*" />
              <Setter TargetName="Col1" Property="Width" Value="Auto" />
              <Setter TargetName="Content" Property="Grid.Column" Value="0" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
            </Trigger>
            <Trigger Property="DropDownButtonPosition" Value="Bottom">
              <Setter TargetName="Caret" Property="Grid.Column" Value="0" />
              <Setter TargetName="Caret" Property="Grid.Row" Value="1" />
              <Setter TargetName="Content" Property="Grid.Column" Value="0" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
              <Setter TargetName="Row0" Property="Height" Value="*" />
              <Setter TargetName="Row1" Property="Height" Value="Auto" />
            </Trigger>
            <Trigger Property="DropDownButtonPosition" Value="Left">
              <Setter TargetName="Caret" Property="Grid.Column" Value="0" />
              <Setter TargetName="Caret" Property="Grid.Row" Value="0" />
              <Setter TargetName="Col0" Property="Width" Value="Auto" />
              <Setter TargetName="Col1" Property="Width" Value="*" />
              <Setter TargetName="Content" Property="Grid.Column" Value="1" />
              <Setter TargetName="Content" Property="Grid.Row" Value="0" />
            </Trigger>
            <Trigger Property="DropDownButtonOrientation" Value="Up">
              <Setter TargetName="Caret" Property="Kind" Value="ChevronUp" />
            </Trigger>
            <Trigger Property="DropDownButtonOrientation" Value="Right">
              <Setter TargetName="Caret" Property="Kind" Value="ChevronRight" />
            </Trigger>
            <Trigger Property="DropDownButtonOrientation" Value="Down">
              <Setter TargetName="Caret" Property="Kind" Value="ChevronDown" />
            </Trigger>
            <Trigger Property="DropDownButtonOrientation" Value="Left">
              <Setter TargetName="Caret" Property="Kind" Value="ChevronLeft" />
            </Trigger>
            <Trigger Property="IsPopupOpen" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="0" To="180" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="180" To="0" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ToggleContentTemplate" Value="{StaticResource MyNet.DataTemplates.Icon}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsMouseOverForeground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Style.Triggers>
      <Trigger Property="IsPopupOpen" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Filled.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Filled.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Filled.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Filled.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Custom}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Filled.Alternate" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled}" />
  <Style x:Key="MyNet.Styles.DropDownButton.Filled.Alternate.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Filled.Alternate.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Filled.Alternate.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Filled.Alternate.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Outlined" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Outlined.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate.Primary}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Outlined.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate.Accent}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Outlined.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate.Custom}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Outlined.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate.Foreground}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Text" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Text.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate.Primary}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Text.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate.Accent}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Text.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate.Custom}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Text.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate.Foreground}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Elevation" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled}">
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.ToggleButton.Elevation}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Button}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Elevation.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Elevation}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Elevation.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Elevation.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Elevation.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Elevation.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Elevation.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Elevation.Custom}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Elevation.Alternate" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled.Alternate}">
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.ToggleButton.Elevation}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Button}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Elevation.Alternate.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Elevation.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Elevation.Alternate.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Elevation.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Elevation.Alternate.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Elevation.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Elevation.Alternate.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Elevation.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Filled" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled}">
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.ToggleButton.Rounded.Filled}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rounded.Margin}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Style.Triggers>
      <Trigger Property="IsPopupOpen" Value="true">
        <Setter Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Filled.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Filled.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Filled.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Filled.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Custom}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Filled.Alternate" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled}" />
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Outlined" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Outlined.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Primary}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Outlined.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Accent}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Outlined.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Custom}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Outlined.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Foreground}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Text" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Text.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Primary}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Text.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Accent}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Text.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Custom}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Text.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate.Foreground}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Elevation" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled}">
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.ToggleButton.Rounded.Elevation}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Button}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Elevation.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Elevation}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Elevation.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Elevation.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Elevation.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Elevation.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Elevation.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Elevation.Custom}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Elevation.Alternate" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate}">
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.ToggleButton.Rounded.Elevation}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Button}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Elevation.Alternate.Custom" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Elevation.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Elevation.Alternate.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Elevation.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Elevation.Alternate.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Elevation.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Rounded.Elevation.Alternate.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Elevation.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Icon" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Rounded.Filled.Alternate}">
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.ToggleButton.Icon}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground), Opacity={StaticResource MyNet.Opacity.Secondary}}" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsMouseOverForeground)}" />
      </Trigger>
      <Trigger Property="IsPopupOpen" Value="True">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground)}" />
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Icon.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon}">
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Icon.Accent" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon}">
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Icon.Foreground" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon}">
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Icon.ToolTip" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon.Foreground}">
    <Setter Property="Cursor" Value="Arrow" />
    <Setter Property="MaxPopupWidth" Value="300" />
    <Setter Property="PlacementMode" Value="RightAndAlignMiddles" />
    <Setter Property="PopupAnimation" Value="Fade" />
    <Setter Property="PopupContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:SimpleStackPanel Spacing="{StaticResource MyNet.Margin.Default}">
            <ContentControl Content="{Binding Path=(p:HeaderAssist.Header), RelativeSource={RelativeSource AncestorType={x:Type ctrl:DropDownButton}}}" ContentTemplate="{Binding Path=(p:HeaderAssist.HeaderTemplate), RelativeSource={RelativeSource AncestorType={x:Type ctrl:DropDownButton}}}" TextElement.FontSize="{Binding Path=(p:HeaderAssist.FontSize), RelativeSource={RelativeSource AncestorType={x:Type ctrl:DropDownButton}}}" TextElement.FontWeight="{Binding Path=(p:HeaderAssist.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type ctrl:DropDownButton}}}" Visibility="{Binding Path=(p:HeaderAssist.Header), RelativeSource={RelativeSource AncestorType={x:Type ctrl:DropDownButton}}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            <ContentPresenter Content="{Binding}">
              <ContentPresenter.Resources>
                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock}">
                  <Setter Property="TextAlignment" Value="Justify" />
                  <Setter Property="TextWrapping" Value="Wrap" />
                </Style>
              </ContentPresenter.Resources>
            </ContentPresenter>
          </ctrl:SimpleStackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="PopupMode" Value="MouseOver" />
    <Setter Property="ShowDropDownButton" Value="False" />
    <Setter Property="StaysOpen" Value="True" />
    <Setter Property="p:HeaderAssist.FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="p:HeaderAssist.FontWeight" Value="Bold" />
    <Setter Property="p:PopupAssist.ShowIndicator" Value="True" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.DynamicScrollBar.Vertical" TargetType="{x:Type ctrl:DynamicScrollBar}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition MaxHeight="14" />
        <RowDefinition Height="0.00001*" />
        <RowDefinition MaxHeight="14" />
      </Grid.RowDefinitions>
      <RepeatButton x:Name="PART_ButtonScrollUp" Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Line}" Grid.Row="0" Command="ScrollBar.LineUpCommand" Content="{me:SmallIcon Kind=ChevronUp}" Foreground="{TemplateBinding Background}" Opacity="0" />
      <Track x:Name="PART_Track" Grid.Row="1" Width="6" IsDirectionReversed="True" Opacity="0">
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Page}" Command="ScrollBar.PageUpCommand" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <!--
                        TODO: Need to add a custom Thumb with a corner radius that will increase when OnMouseOver is triggered.
                    -->
          <Thumb Style="{StaticResource MyNet.Styles.Thumb.Embedded.ScrollBar}" Margin="0" Padding="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Page}" Command="ScrollBar.PageDownCommand" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton x:Name="PART_ButtonScrollDown" Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Line}" Grid.Row="2" Command="ScrollBar.LineDownCommand" Content="{me:SmallIcon Kind=ChevronDown}" Foreground="{TemplateBinding Background}" Opacity="0" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsInteracted" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Opacity" From="0.0" To="{StaticResource MyNet.Opacity.Hovered}" Duration="{StaticResource DynamicScrollAnimationDuration}" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Opacity" From="{StaticResource MyNet.Opacity.Hovered}" To="0.0" Duration="{StaticResource DynamicScrollAnimationDuration}" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Width" From="6" To="10" Duration="{StaticResource DynamicScrollAnimationDuration}" />
              <DoubleAnimation Storyboard.TargetName="PART_ButtonScrollUp" Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="{StaticResource DynamicScrollAnimationDuration}" />
              <DoubleAnimation Storyboard.TargetName="PART_ButtonScrollDown" Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="{StaticResource DynamicScrollAnimationDuration}" />
              <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Opacity" From="{StaticResource MyNet.Opacity.Hovered}" To="{StaticResource MyNet.Opacity.Overlay}" Duration="{StaticResource DynamicScrollAnimationDuration}" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Width" From="10" To="6" Duration="{StaticResource DynamicScrollAnimationDuration}" />
              <DoubleAnimation Storyboard.TargetName="PART_ButtonScrollUp" Storyboard.TargetProperty="Opacity" From="1.0" To="0.0" Duration="{StaticResource DynamicScrollAnimationDuration}" />
              <DoubleAnimation Storyboard.TargetName="PART_ButtonScrollDown" Storyboard.TargetProperty="Opacity" From="1.0" To="0.0" Duration="{StaticResource DynamicScrollAnimationDuration}" />
              <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Opacity" From="{StaticResource MyNet.Opacity.Overlay}" To="{StaticResource MyNet.Opacity.Hovered}" Duration="{StaticResource DynamicScrollAnimationDuration}" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MyNet.Templates.DynamicScrollBar.Horizontal" TargetType="{x:Type ctrl:DynamicScrollBar}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition MaxWidth="18" />
        <ColumnDefinition Width="0.00001*" />
        <ColumnDefinition MaxWidth="18" />
      </Grid.ColumnDefinitions>
      <RepeatButton x:Name="PART_ButtonScrollLeft" Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Line}" Grid.Column="0" VerticalAlignment="Center" Command="ScrollBar.LineLeftCommand" Content="{me:SmallIcon Kind=ChevronLeft}" Foreground="{TemplateBinding Background}" Opacity="0" />
      <Track x:Name="PART_Track" Grid.Column="1" Height="6" VerticalAlignment="Center" IsDirectionReversed="False">
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Page}" Command="ScrollBar.PageLeftCommand" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb Style="{StaticResource MyNet.Styles.Thumb.Embedded.ScrollBar}" Margin="0" Padding="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Page}" Command="ScrollBar.PageRightCommand" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton x:Name="PART_ButtonScrollRight" Style="{StaticResource MyNet.Styles.RepeatButton.Embedded.ScrollBar.Line}" Grid.Column="2" VerticalAlignment="Center" Command="ScrollBar.LineRightCommand" Content="{me:SmallIcon Kind=ChevronRight}" Foreground="{TemplateBinding Background}" Opacity="0" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Height" From="6" To="10" Duration="{StaticResource DynamicScrollAnimationDuration}" />
              <DoubleAnimation Storyboard.TargetName="PART_ButtonScrollLeft" Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="{StaticResource DynamicScrollAnimationDuration}" />
              <DoubleAnimation Storyboard.TargetName="PART_ButtonScrollRight" Storyboard.TargetProperty="Opacity" From="0.0" To="1.0" Duration="{StaticResource DynamicScrollAnimationDuration}" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Height" From="10" To="6" Duration="{StaticResource DynamicScrollAnimationDuration}" />
              <DoubleAnimation Storyboard.TargetName="PART_ButtonScrollLeft" Storyboard.TargetProperty="Opacity" From="1.0" To="0.0" Duration="{StaticResource DynamicScrollAnimationDuration}" />
              <DoubleAnimation Storyboard.TargetName="PART_ButtonScrollRight" Storyboard.TargetProperty="Opacity" From="1.0" To="0.0" Duration="{StaticResource DynamicScrollAnimationDuration}" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="IsInteracted" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Opacity" From="0.0" To="{StaticResource MyNet.Opacity.Secondary}" Duration="{StaticResource DynamicScrollAnimationDuration}" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Opacity" From="{StaticResource MyNet.Opacity.Secondary}" To="0.0" Duration="{StaticResource DynamicScrollAnimationDuration}" />
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.DynamicScrollBar" TargetType="{x:Type ctrl:DynamicScrollBar}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.ScrollBar.Background}" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Height" Value="14" />
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.DynamicScrollBar.Horizontal}" />
        <Setter Property="Width" Value="Auto" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{StaticResource MyNet.Templates.DynamicScrollBar.Vertical}" />
        <Setter Property="Width" Value="14" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.DynamicScrollBar.Foreground" TargetType="{x:Type ctrl:DynamicScrollBar}" BasedOn="{StaticResource MyNet.Styles.DynamicScrollBar}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DynamicScrollViewer.Foreground" TargetType="{x:Type ctrl:DynamicScrollViewer}" BasedOn="{StaticResource MyNet.Styles.DynamicScrollViewer}">
    <Style.Resources>
      <Style TargetType="{x:Type ctrl:DynamicScrollBar}" BasedOn="{StaticResource MyNet.Styles.DynamicScrollBar.Foreground}" />
    </Style.Resources>
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.ImagePicker" TargetType="{x:Type ctrl:ImagePicker}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <!-- Mouse Over -->
            <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Focus -->
            <Border x:Name="focus" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Ripple on focus -->
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Icon -->
              <ContentControl x:Name="Icon" Grid.Column="0" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <ContentControl.Resources>
                  <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                  <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                </ContentControl.Resources>
              </ContentControl>
              <!-- Content -->
              <Grid Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Grid x:Name="grid" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Preview -->
                    <ContentControl Grid.Column="1" Content="{TemplateBinding SelectedImage}" ContentTemplate="{TemplateBinding SelectedImageTemplate}" />
                    <!-- Host Text -->
                    <TextBox x:Name="PART_TextBox" Style="{StaticResource MyNet.Styles.TextBox.Embedded}" Grid.Column="2" HorizontalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="Center" CaretBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" SelectionBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Text="{Binding ImagePath, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, ValidatesOnExceptions=True}" />
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="3" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
              <!-- Calendar button -->
              <Button x:Name="PART_Button" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Grid.Column="3" Content="{me:Icon Kind=ImageEdit}" />
              <!-- Clear button -->
              <Button x:Name="PART_ClearButton" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="2" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{x:Static p:TextFieldAssist.ClearCommand}" Content="{me:Icon Kind=Close,                                                       Size=16}" ToolTip="{me:Resource Clear}">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
            </Grid>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="CharacterCounterContainer" Grid.Column="1">
            <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding Path=(p:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </Grid>
      </Canvas>
      <!-- Errors -->
      <Canvas x:Name="Errors" VerticalAlignment="Bottom" Visibility="{Binding Errors.Count, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:CountToVisibilityConverter.CollapsedIfNotAny}}">
        <Grid Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <ItemsControl ItemsSource="{TemplateBinding Errors}">
            <ItemsControl.ItemTemplate>
              <DataTemplate>
                <TextBlock FontSize="{StaticResource MyNet.Font.Size.Secondary}" Foreground="{DynamicResource MyNet.Brushes.Validation.Error}" Text="{Binding}" TextWrapping="Wrap" />
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ItemsControl>
        </Grid>
      </Canvas>
    </Grid>
    <ControlTemplate.Triggers>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="4" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="p:TextFieldAssist.IsEditable" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Button" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_ClearButton" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- IsKeyboardFocused -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="Errors" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <Trigger Property="HasErrors" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
      <!-- IsReadOnly -->
      <Trigger Property="p:TextFieldAssist.IsReadOnly" Value="True">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Opacity" Value="1" />
        <Setter TargetName="PART_Button" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
        <Setter TargetName="border" Property="Opacity" Value="1" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
        <Setter TargetName="grid" Property="Opacity" Value="1" />
      </Trigger>
      <!-- IsEditable -->
      <Trigger Property="p:TextFieldAssist.IsEditable" Value="False">
        <Setter TargetName="PART_Button" Property="Content" Value="" />
        <Setter TargetName="PART_Button" Property="Grid.Column" Value="1" />
        <Setter TargetName="PART_Button" Property="Grid.ColumnSpan" Value="4" />
        <Setter TargetName="PART_Button" Property="Height" Value="Auto" />
        <Setter TargetName="PART_Button" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="PART_Button" Property="Style" Value="{StaticResource MyNet.Styles.Button.Embedded.ImagePicker}" />
        <Setter TargetName="PART_Button" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="PART_Button" Property="Width" Value="Auto" />
        <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
        <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.ImagePicker" TargetType="{x:Type ctrl:ImagePicker}">
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="SelectedImageTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:PictureControl Width="18" Height="18" Margin="{StaticResource MyNet.Margins.Small.Right}" VerticalAlignment="Center" Image="{Binding}" Visibility="{Binding Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.ImagePicker}" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.TextBox.HelperText}" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle" Value="{StaticResource MyNet.Styles.Button.Icon.Tool}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
    <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.Foreground" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.Filled" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.Filled.Foreground" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.Filled.Alternate" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker.Filled}">
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.Filled.Alternate.Foreground" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.Outlined" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.Outlined.Foreground" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.Secondary" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ContextMenu" Value="{x:Null}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="FontSize" Value="40" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Medium}}" />
    <Setter Property="Height" Value="80" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="SelectedImageTemplate">
      <Setter.Value>
        <DataTemplate>
          <Image Source="{Binding}" Stretch="{Binding Stretch, RelativeSource={RelativeSource AncestorType={x:Type ctrl:ImagePicker}}}" Visibility="{Binding UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ImagePicker}">
          <Grid>
            <ctrl:Card Padding="0" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Foreground="{TemplateBinding Foreground}" UniformCornerRadius="{TemplateBinding p:ThemeAssist.UniformCornerRadius}">
              <Grid>
                <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding p:IconAssist.Icon}" Visibility="{Binding SelectedImage, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNotNull}}" />
                <ContentControl HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding SelectedImage}" ContentTemplate="{TemplateBinding SelectedImageTemplate}" />
                <Button x:Name="PART_Button" Style="{StaticResource MyNet.Styles.Button.Filled}" Padding="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" p:ThemeAssist.IsMouseOverBackground="Transparent" Background="{TemplateBinding p:ThemeAssist.IsMouseOverBackground}" BorderThickness="0" Content="{me:MediumIcon Kind=PhotoCamera}" Opacity="0" />
              </Grid>
            </ctrl:Card>
            <Canvas HorizontalAlignment="Right" VerticalAlignment="Top">
              <Button x:Name="PART_ClearButton" Style="{StaticResource MyNet.Styles.Button.Icon.Tool.Clear}" Canvas.Left="-11" Canvas.Top="-11" Width="22" Height="22" Foreground="{DynamicResource MyNet.Brushes.Negative}">
                <Button.ContentTemplate>
                  <DataTemplate>
                    <ctrl:PackIcon Kind="CloseCircle" />
                  </DataTemplate>
                </Button.ContentTemplate>
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Converter="{x:Static c:NullToBooleanConverter.TrueIfNull}" Path="SelectedImage" RelativeSource="{RelativeSource TemplatedParent}" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
            </Canvas>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
              <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
              <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Width" Value="80" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    <Setter Property="p:IconAssist.Icon" Value="{me:Icon Data={StaticResource MyNet.Geometries.Male}, Size=85}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.HasClearButton" Value="True" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Background, Opacity={StaticResource MyNet.Opacity.Medium}}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.DropDown" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker}">
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:TextFieldAssist.IsEditable" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.DropDown.Foreground" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker.DropDown}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.DropDown.Filled" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker.DropDown}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text.Foreground}">
          <Setter Property="Focusable" Value="False" />
          <Setter Property="Padding" Value="3 0" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.DropDown.Filled.Foreground" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker.DropDown.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.DropDown.Outlined" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker.DropDown.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ImagePicker.DropDown.Outlined.Foreground" TargetType="{x:Type ctrl:ImagePicker}" BasedOn="{StaticResource MyNet.Styles.ImagePicker.DropDown.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MessageView" TargetType="{x:Type ctrl:MessageView}" BasedOn="{StaticResource MyNet.Styles.ContentDialog}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:DynamicScrollViewer FocusVisualStyle="{x:Null}" Focusable="False" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
            <ContentControl Content="{Binding}" Focusable="False" />
          </ctrl:DynamicScrollViewer>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FooterTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:SimpleStackPanel HorizontalAlignment="Right" Orientation="Horizontal">
            <Button x:Name="PART_YesButton" Style="{StaticResource MyNet.Styles.Button.Outlined}" Width="{StaticResource MyNet.Widths.MessageView.Buttons}" Command="{x:Static ctrl:MessageView.YesCommand}" Content="{me:Resource Yes,                                                       Casing=AllCaps}">
              <Button.Visibility>
                <Binding Converter="{x:Static c:EnumToVisibilityConverter.CollapsedIfNotAny}" Path="Buttons" RelativeSource="{RelativeSource AncestorType={x:Type ctrl:MessageView}}">
                  <Binding.ConverterParameter>
                    <x:Array Type="{x:Type dialSettings:MessageBoxResultOption}">
                      <x:Static Member="dialSettings:MessageBoxResultOption.YesNo" />
                      <x:Static Member="dialSettings:MessageBoxResultOption.YesNoCancel" />
                    </x:Array>
                  </Binding.ConverterParameter>
                </Binding>
              </Button.Visibility>
              <Button.IsDefault>
                <Binding Converter="{x:Static c:EnumToBooleanConverter.Any}" Path="Buttons" RelativeSource="{RelativeSource AncestorType={x:Type ctrl:MessageView}}">
                  <Binding.ConverterParameter>
                    <x:Array Type="{x:Type dialSettings:MessageBoxResultOption}">
                      <x:Static Member="dialSettings:MessageBoxResultOption.YesNo" />
                      <x:Static Member="dialSettings:MessageBoxResultOption.YesNoCancel" />
                    </x:Array>
                  </Binding.ConverterParameter>
                </Binding>
              </Button.IsDefault>
            </Button>
            <Button x:Name="PART_NoButton" Style="{StaticResource MyNet.Styles.Button.Outlined}" Width="{StaticResource MyNet.Widths.MessageView.Buttons}" Command="{x:Static ctrl:MessageView.NoCommand}" Content="{me:Resource No,                                                       Casing=AllCaps}">
              <Button.Visibility>
                <Binding Converter="{x:Static c:EnumToVisibilityConverter.CollapsedIfNotAny}" Path="Buttons" RelativeSource="{RelativeSource AncestorType={x:Type ctrl:MessageView}}">
                  <Binding.ConverterParameter>
                    <x:Array Type="{x:Type dialSettings:MessageBoxResultOption}">
                      <x:Static Member="dialSettings:MessageBoxResultOption.YesNo" />
                      <x:Static Member="dialSettings:MessageBoxResultOption.YesNoCancel" />
                    </x:Array>
                  </Binding.ConverterParameter>
                </Binding>
              </Button.Visibility>
            </Button>
            <Button x:Name="PART_OkButton" Style="{StaticResource MyNet.Styles.Button.Outlined}" Width="{StaticResource MyNet.Widths.MessageView.Buttons}" Command="{x:Static ctrl:MessageView.OkCommand}" Content="{me:Resource Ok,                                                       Casing=AllCaps}">
              <Button.Visibility>
                <Binding Converter="{x:Static c:EnumToVisibilityConverter.CollapsedIfNotAny}" Path="Buttons" RelativeSource="{RelativeSource AncestorType={x:Type ctrl:MessageView}}">
                  <Binding.ConverterParameter>
                    <x:Array Type="{x:Type dialSettings:MessageBoxResultOption}">
                      <x:Static Member="dialSettings:MessageBoxResultOption.OkCancel" />
                      <x:Static Member="dialSettings:MessageBoxResultOption.Ok" />
                    </x:Array>
                  </Binding.ConverterParameter>
                </Binding>
              </Button.Visibility>
            </Button>
            <Button x:Name="PART_CancelButton" Style="{StaticResource MyNet.Styles.Button.Outlined}" Width="{StaticResource MyNet.Widths.MessageView.Buttons}" Command="{x:Static ctrl:MessageView.CancelCommand}" Content="{me:Resource Cancel,                                                       Casing=AllCaps}">
              <Button.Visibility>
                <Binding Converter="{x:Static c:EnumToVisibilityConverter.CollapsedIfNotAny}" Path="Buttons" RelativeSource="{RelativeSource AncestorType={x:Type ctrl:MessageView}}">
                  <Binding.ConverterParameter>
                    <x:Array Type="{x:Type dialSettings:MessageBoxResultOption}">
                      <x:Static Member="dialSettings:MessageBoxResultOption.OkCancel" />
                      <x:Static Member="dialSettings:MessageBoxResultOption.YesNoCancel" />
                    </x:Array>
                  </Binding.ConverterParameter>
                </Binding>
              </Button.Visibility>
            </Button>
          </ctrl:SimpleStackPanel>
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding DefaultResult, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MessageView}}}" Value="OK">
              <Setter TargetName="PART_OkButton" Property="Style" Value="{StaticResource MyNet.Styles.Button.Filled.Primary}" />
              <Setter TargetName="PART_OkButton" Property="p:FocusAssist.IsDefault" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DefaultResult, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MessageView}}}" Value="Cancel">
              <Setter TargetName="PART_CancelButton" Property="Style" Value="{StaticResource MyNet.Styles.Button.Filled.Primary}" />
              <Setter TargetName="PART_CancelButton" Property="p:FocusAssist.IsDefault" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DefaultResult, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MessageView}}}" Value="Yes">
              <Setter TargetName="PART_YesButton" Property="Style" Value="{StaticResource MyNet.Styles.Button.Filled.Primary}" />
              <Setter TargetName="PART_YesButton" Property="p:FocusAssist.IsDefault" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DefaultResult, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MessageView}}}" Value="No">
              <Setter TargetName="PART_NoButton" Property="Style" Value="{StaticResource MyNet.Styles.Button.Filled.Primary}" />
              <Setter TargetName="PART_NoButton" Property="p:FocusAssist.IsDefault" Value="True" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ShowCloseButton" Value="True" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
  </Style>
  <Style x:Key="MyNet.Styles.CalendarMonthsByYear.Embedded.MonthPicker" TargetType="{x:Type ctrl:CalendarMonthsByYear}" BasedOn="{StaticResource MyNet.Styles.Calendar.MonthsByYear}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="CalendarItemStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ctrl:CalendarItem}" BasedOn="{StaticResource MyNet.Styles.CalendarItem.MonthsByYear}">
          <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
          <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
          <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
          <Setter Property="Height" Value="50" />
          <Setter Property="HorizontalContentAlignment" Value="Center" />
          <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Small}" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ctrl:CalendarItem}">
                <ctrl:Card x:Name="Card" Padding="0" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UniformCornerRadius="{TemplateBinding p:ThemeAssist.UniformCornerRadius}">
                  <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup Name="CommonStates">
                      <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                          <VisualTransition.GeneratedEasingFunction>
                            <CircleEase EasingMode="EaseOut" />
                          </VisualTransition.GeneratedEasingFunction>
                        </VisualTransition>
                      </VisualStateGroup.Transitions>
                      <VisualState Name="Normal" />
                      <VisualState Name="MouseOver">
                        <Storyboard>
                          <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                        </Storyboard>
                      </VisualState>
                    </VisualStateGroup>
                    <VisualStateGroup Name="SelectionStates">
                      <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" />
                      </VisualStateGroup.Transitions>
                      <VisualState Name="Selected">
                        <Storyboard>
                          <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                        </Storyboard>
                      </VisualState>
                      <VisualState Name="Unselected" />
                    </VisualStateGroup>
                    <VisualStateGroup Name="FocusStates">
                      <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" To="Unfocused" />
                      </VisualStateGroup.Transitions>
                      <VisualState Name="Focused">
                        <Storyboard>
                          <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                        </Storyboard>
                      </VisualState>
                      <VisualState Name="Unfocused" />
                    </VisualStateGroup>
                  </VisualStateManager.VisualStateGroups>
                  <Grid>
                    <Border x:Name="MouseOverBorder" Background="{TemplateBinding p:ListBoxItemAssist.IsMouseOverBackground}" Opacity="0" SnapsToDevicePixels="True" />
                    <Border x:Name="SelectedBorder" Background="{TemplateBinding p:ListBoxItemAssist.IsSelectedBackground}" BorderBrush="{TemplateBinding p:ListBoxItemAssist.IsSelectedBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" RenderTransformOrigin="0.5,0.5" />
                    <ctrl:Ripple x:Name="Ripple" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Feedback="{TemplateBinding Foreground}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Grid>
                </ctrl:Card>
                <ControlTemplate.Triggers>
                  <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <Setter Property="VerticalContentAlignment" Value="Center" />
          <Setter Property="Width" Value="50" />
          <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
          <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
          <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
          <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
          <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Control}" />
          <Style.Triggers>
            <Trigger Property="IsNow" Value="True">
              <Setter Property="BorderBrush" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource Self}}" />
              <Setter Property="BorderThickness" Value="1" />
              <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
              <Setter Property="BorderThickness" Value="0" />
              <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Self}}" />
            </Trigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="InnerBorderThickess" Value="0" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.CalendarAppointment.MonthsByYear}" />
    <Setter Property="Margin" Value="16 8 16 24" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:CalendarMonthsByYear}">
          <ctrl:Card Padding="0 -1 0 0" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" BorderThickness="{TemplateBinding BorderThickness}" ClipContent="True">
            <DockPanel Margin="{TemplateBinding Padding}">
              <!-- Header -->
              <ctrl:SimpleStackPanel Margin="{StaticResource MyNet.Margins.Medium.Bottom}" HorizontalAlignment="Right" DockPanel.Dock="Top" Orientation="Horizontal" Visibility="{Binding ShowHeader, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                <ContentControl VerticalAlignment="Center" Content="{Binding DisplayDate, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding HeaderTemplate}" FontSize="{StaticResource MyNet.Font.Size.Tab}" FontWeight="DemiBold" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
                <StackPanel Orientation="Horizontal">
                  <Button x:Name="PART_PreviousButton" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Content="{me:MediumIcon Kind=ChevronLeft}" ToolTip="{me:Resource Previous}" />
                  <Button x:Name="PART_NextButton" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Content="{me:MediumIcon Kind=ChevronRight}" ToolTip="{me:Resource Next}" />
                </StackPanel>
              </ctrl:SimpleStackPanel>
              <!-- Calendar -->
              <DockPanel Grid.IsSharedSizeScope="True">
                <Grid DockPanel.Dock="Top">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="rowHeadersColumn" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <!-- Column headers -->
                  <ItemsControl x:Name="PART_ColumnHeaders" Style="{StaticResource MyNet.Styles.ItemsControl}" Grid.Column="1" Height="{Binding Path=(p:HeaderAssist.Height), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(p:HeaderAssist.Background), RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" FontWeight="{Binding Path=(p:HeaderAssist.FontWeight), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" ItemTemplate="{TemplateBinding ColumnHeaderTemplate}">
                    <ItemsControl.ItemsPanel>
                      <ItemsPanelTemplate>
                        <UniformGrid Rows="1" />
                      </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                  </ItemsControl>
                </Grid>
                <!-- Content -->
                <Grid>
                  <ctrl:DynamicScrollViewer x:Name="scrollViewer" Padding="0" CanContentScroll="True" Focusable="False" HorizontalScrollBarVisibility="Disabled" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                    <Grid>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="rowHeadersColumn" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <!-- Row headers -->
                      <ItemsControl x:Name="PART_RowHeaders" Style="{StaticResource MyNet.Styles.ItemsControl}" Grid.Column="0" Width="{Binding Path=(p:HeaderAssist.Width), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(p:HeaderAssist.Background), RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" FontWeight="{Binding Path=(p:HeaderAssist.FontWeight), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding Path=(p:HeaderAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" ItemTemplate="{TemplateBinding RowHeaderTemplate}">
                        <ItemsControl.ItemsPanel>
                          <ItemsPanelTemplate>
                            <UniformGrid Columns="1" />
                          </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                      </ItemsControl>
                      <!-- Calendar items -->
                      <ctrl:CalendarItemsControl x:Name="PART_DatesItemsControl" Style="{StaticResource MyNet.Styles.CalendarItemsControl}" Grid.Column="1" ItemContainerStyle="{TemplateBinding CalendarItemStyle}" />
                      <!-- Appointment items -->
                      <ItemsPresenter Grid.Column="1" Visibility="{Binding AppointmentsDisplayMode, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:EnumToVisibilityConverter.CollapsedIfNotAny}, ConverterParameter={x:Static ctrl:AppointmentsDisplayMode.Range}}" />
                    </Grid>
                  </ctrl:DynamicScrollViewer>
                  <Grid p:BusyAssist.AttachService="{Binding BusyService, RelativeSource={RelativeSource TemplatedParent}}" p:BusyAssist.Style="{StaticResource MyNet.Styles.BusyControl.Dark.Foreground}" />
                </Grid>
              </DockPanel>
            </DockPanel>
          </ctrl:Card>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Popup}" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.MonthPicker" TargetType="{x:Type ctrl:MonthPicker}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <!-- Mouse Over -->
            <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Focus -->
            <Border x:Name="focus" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Ripple on focus -->
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Previous button -->
              <RepeatButton x:Name="PART_Previous" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{Binding Path=(p:TextFieldAssist.PreviousCommand), RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Path=(p:TextFieldAssist.PreviousButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:TextFieldAssist.PreviousCommand), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
              <!-- Icon -->
              <ContentControl x:Name="Icon" Grid.Column="1" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <ContentControl.Resources>
                  <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                  <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                </ContentControl.Resources>
              </ContentControl>
              <Grid Grid.Column="2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <!-- Content -->
                <Grid x:Name="grid" Grid.Column="1" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Host Text -->
                    <TextBlock Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center">
                      <TextBlock.Text>
                        <MultiBinding Converter="{x:Static c:StringConverter.ToTitle}">
                          <Binding Path="SelectedMonth" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="SelectedMonthFormat" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Text>
                    </TextBlock>
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
              <!-- Calendar button -->
              <Button x:Name="PART_Button" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Grid.Column="4" Content="{me:Icon Kind=Calendar}" />
              <!-- Clear button -->
              <Button x:Name="PART_ClearButton" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="3" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{x:Static p:TextFieldAssist.ClearCommand}" Content="{me:Icon Kind=Close,                                                       Size=16}" ToolTip="{me:Resource Clear}">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
              <!-- Next button -->
              <RepeatButton x:Name="PART_Next" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="6" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{Binding Path=(p:TextFieldAssist.NextCommand), RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Path=(p:TextFieldAssist.NextButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:TextFieldAssist.NextCommand), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            </Grid>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="CharacterCounterContainer" Grid.Column="1">
            <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding Path=(p:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </Grid>
      </Canvas>
      <Popup x:Name="PART_Popup" AllowsTransparency="True" HorizontalOffset="-16" Placement="Bottom" PlacementTarget="{Binding ElementName=border}" PopupAnimation="Slide" StaysOpen="False" VerticalOffset="-5" />
    </Grid>
    <ControlTemplate.Triggers>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="5" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="p:TextFieldAssist.IsEditable" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Button" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_ClearButton" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_Next" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_Previous" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- IsDropDownOpen -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="PART_Button" Property="Foreground" Value="{Binding Path=(p:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
      <!-- IsReadOnly -->
      <Trigger Property="p:TextFieldAssist.IsReadOnly" Value="True">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Opacity" Value="1" />
        <Setter TargetName="PART_Button" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="border" Property="Opacity" Value="1" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
        <Setter TargetName="grid" Property="Opacity" Value="1" />
      </Trigger>
      <!-- IsEditable -->
      <Trigger Property="p:TextFieldAssist.IsEditable" Value="False">
        <Setter TargetName="PART_Button" Property="Content" Value="" />
        <Setter TargetName="PART_Button" Property="Grid.Column" Value="1" />
        <Setter TargetName="PART_Button" Property="Grid.ColumnSpan" Value="3" />
        <Setter TargetName="PART_Button" Property="Height" Value="Auto" />
        <Setter TargetName="PART_Button" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="PART_Button" Property="Style" Value="{StaticResource MyNet.Styles.Button.Embedded.MonthPicker}" />
        <Setter TargetName="PART_Button" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="PART_Button" Property="Width" Value="Auto" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.MonthPicker" TargetType="{x:Type ctrl:MonthPicker}">
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="CalendarStyle" Value="{StaticResource MyNet.Styles.CalendarMonthsByYear.Embedded.MonthPicker}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.MonthPicker}" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.TextBox.HelperText}" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle" Value="{StaticResource MyNet.Styles.Button.Icon.Tool}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.NextButtonContent" Value="{StaticResource MyNet.Icons.ChevronRight.Medium}" />
    <Setter Property="p:TextFieldAssist.PreviousButtonContent" Value="{StaticResource MyNet.Icons.ChevronLeft.Medium}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
    <Setter Property="p:GlobalizationAssist.UpdateOnCultureChanged" Value="True" />
    <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.Foreground" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.Filled" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.Filled.Foreground" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.Filled.Alternate" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker.Filled}">
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.Filled.Alternate.Foreground" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.Outlined" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.Outlined.Foreground" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.DropDown" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker}">
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:TextFieldAssist.IsEditable" Value="False" />
    <Setter Property="p:TextFieldAssist.NextCommand" Value="{x:Static cmd:AppCommands.NextMonthCommand}" />
    <Setter Property="p:TextFieldAssist.PreviousCommand" Value="{x:Static cmd:AppCommands.PreviousMonthCommand}" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.DropDown.Foreground" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker.DropDown}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.DropDown.Filled" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker.DropDown}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text.Foreground}">
          <Setter Property="Padding" Value="3 0" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.DropDown.Filled.Foreground" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker.DropDown.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.DropDown.Outlined" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker.DropDown.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.MonthPicker.DropDown.Outlined.Foreground" TargetType="{x:Type ctrl:MonthPicker}" BasedOn="{StaticResource MyNet.Styles.MonthPicker.DropDown.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBoxSelectedItem" TargetType="{x:Type ctrl:MultiComboBoxSelectedItem}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Secondary}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MultiComboBoxSelectedItem}">
          <Grid Margin="1 1 1 0">
            <Border Grid.ColumnSpan="3" Background="{TemplateBinding Background}" CornerRadius="10" />
            <Grid Margin="6 1">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="AUto" />
              </Grid.ColumnDefinitions>
              <ContentControl VerticalAlignment="Center" Content="{TemplateBinding DataContext}" ContentTemplate="{TemplateBinding ContentTemplate}" />
              <Button x:Name="PART_RemoveItemButton" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Grid.Column="1" Width="12" Height="12" Margin="2 0 -3 0">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:MultipleBooleanToVisibilityConverter.AndCollapse}">
                    <Binding Path="ShowRemoveItemButton" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ctrl:MultiComboBox}}" />
                    <Binding Converter="{x:Static c:NotBooleanConverter.Default}" Path="IsReadOnly" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ctrl:MultiComboBox}}" />
                  </MultiBinding>
                </Button.Visibility>
                <ctrl:PackIcon Width="12" Height="12" Margin="0" Kind="CloseCircle" />
              </Button>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBoxSelectedItems" TargetType="{x:Type ctrl:MultiComboBoxSelectedItems}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.MultiComboBoxSelectedItem}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel ClipToBounds="False" Orientation="Horizontal" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="OverridesDefaultStyle" Value="False" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MultiComboBoxSelectedItems}">
          <ScrollViewer CanContentScroll="True" Focusable="False" Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" HorizontalScrollBarVisibility="Disabled" OverridesDefaultStyle="True">
            <ItemsPresenter />
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBoxItem" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ComboBoxItem}">
    <Setter Property="p:ComboBoxAssist.ShowSelectedItem" Value="{Binding Path=(p:ComboBoxAssist.ShowSelectedItem), RelativeSource={RelativeSource AncestorType={x:Type ctrl:MultiComboBox}}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:MultiComboBox}}}" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.MultiComboBox" TargetType="{x:Type ctrl:MultiComboBox}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition x:Name="columnCaret" Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <!-- Mouse Over -->
            <Border x:Name="mouseOver" Grid.ColumnSpan="2" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Focus -->
            <Border x:Name="focus" Grid.ColumnSpan="2" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Ripple on focus -->
            <Border Grid.ColumnSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <ToggleButton x:Name="toggleButton" Style="{StaticResource MyNet.Styles.ToggleButton.Embedded.ComboBox}" Grid.ColumnSpan="2" Padding="{TemplateBinding Padding}" p:ComboBoxAssist.ShowCaret="{Binding Path=(p:ComboBoxAssist.ShowCaret), RelativeSource={RelativeSource TemplatedParent}}" p:ComboBoxAssist.ShowDropDownPopup="{Binding Path=(p:ComboBoxAssist.ShowDropDownPopup), RelativeSource={RelativeSource TemplatedParent}}" p:TextFieldAssist.IsReadOnly="{TemplateBinding IsReadOnly}" p:TextFieldAssist.RippleOnFocusEnabled="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Previous button -->
              <RepeatButton x:Name="PART_NumericDown" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{Binding Path=(p:TextFieldAssist.PreviousCommand), RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Path=(p:TextFieldAssist.PreviousButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
              <!-- Icon -->
              <ContentControl x:Name="Icon" Grid.Column="1" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <ContentControl.Resources>
                  <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                  <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                </ContentControl.Resources>
              </ContentControl>
              <Grid Grid.Column="2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <!-- Content -->
                <Grid x:Name="grid" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Selected Item -->
                    <Grid Grid.Column="1" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" HorizontalAlignment="Left" VerticalAlignment="Center">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <ctrl:MultiComboBoxSelectedItems x:Name="PART_MultiComboBoxSelectedItems" Style="{StaticResource MyNet.Styles.MultiComboBoxSelectedItems}" DisplayMemberPath="{TemplateBinding DisplayMemberPath}" Focusable="False" ItemTemplate="{TemplateBinding SelectedItemTemplate}" ItemsSource="{TemplateBinding SelectedItems}" Visibility="{Binding HasSelectedItems, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                      <TextBox x:Name="PART_EditableTextBox" Style="{StaticResource MyNet.Styles.TextBox.Embedded}" Grid.Row="1" Margin="0 1 0 0" p:TextFieldAssist.Mask="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(p:TextFieldAssist.Mask)}" CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" SelectionBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="Collapsed" />
                    </Grid>
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
              <!-- Clear button -->
              <Button x:Name="PART_ClearButton" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="3" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{x:Static p:TextFieldAssist.ClearCommand}" Content="{me:Icon Kind=Close,                                                       Size=16}" ToolTip="{me:Resource Clear}">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
              <!-- Next button -->
              <RepeatButton x:Name="PART_NumericUp" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="5" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{Binding Path=(p:TextFieldAssist.NextCommand), RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Path=(p:TextFieldAssist.NextButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            </Grid>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
      </Canvas>
      <!-- Popup -->
      <ctrl:ComboBoxPopup x:Name="PART_Popup" Grid.Column="0" AllowsTransparency="True" Background="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource TemplatedParent}}" ClassicContentTemplate="{StaticResource MyNet.Styles.ContentControl.Embedded.ComboBox.Popup}" ContentMargin="6,0,6,6" ContentMinWidth="{Binding Path=ActualWidth, ElementName=border}" DefaultVerticalOffset="-1" DownVerticalOffset="0" Focusable="False" HorizontalOffset="-7" Placement="Custom" PlacementTarget="{Binding ElementName=border}" PopupAnimation="Slide" RelativeHorizontalOffset="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.Foreground="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" UpVerticalOffset="15" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalOffset="0">
        <ctrl:ComboBoxPopup.IsOpen>
          <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
            <Binding Path="IsDropDownOpen" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="(p:ComboBoxAssist.ShowDropDownPopup)" RelativeSource="{RelativeSource TemplatedParent}" />
          </MultiBinding>
        </ctrl:ComboBoxPopup.IsOpen>
        <ctrl:ComboBoxPopup.Style>
          <Style TargetType="{x:Type ctrl:ComboBoxPopup}">
            <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container.Bottom}" />
            <Style.Triggers>
              <Trigger Property="OpenDirection" Value="Up">
                <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Container.Top}" />
              </Trigger>
            </Style.Triggers>
          </Style>
        </ctrl:ComboBoxPopup.Style>
        <ContentControl>
          <ctrl:DynamicScrollViewer MinHeight="1" MaxHeight="{Binding Path=MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Background, ElementName=PART_Popup}" Foreground="{Binding ElementName=PART_Popup, Path=(TextElement.Foreground)}">
            <Grid>
              <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" Visibility="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
              <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" Margin="16 8" Text="{me:Resource NoResults}" Visibility="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
            </Grid>
          </ctrl:DynamicScrollViewer>
        </ContentControl>
      </ctrl:ComboBoxPopup>
    </Grid>
    <ControlTemplate.Triggers>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="4" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Show DropDown Popup -->
      <Trigger Property="p:ComboBoxAssist.ShowUpDownButton" Value="True">
        <Setter TargetName="PART_NumericDown" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_NumericUp" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="p:ComboBoxAssist.ShowDropDownPopup" Value="False">
        <Setter TargetName="PART_EditableTextBox" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="columnCaret" Property="MinWidth" Value="0" />
      </Trigger>
      <!-- Show Caret -->
      <Trigger Property="p:ComboBoxAssist.ShowCaret" Value="False">
        <Setter TargetName="columnCaret" Property="MinWidth" Value="0" />
      </Trigger>
      <!-- IsEditable -->
      <Trigger Property="IsEditable" Value="True">
        <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
        <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(p:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True" />
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
      </MultiTrigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="True" />
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="p:TextFieldAssist.IsEditable" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ClearButton" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_NumericDown" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_NumericUp" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="toggleButton" Property="p:TextFieldAssist.TextBoxViewMargin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- IsKeyboardFocused -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter TargetName="toggleButton" Property="BorderBrush" Value="{Binding Path=(p:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
      </MultiTrigger>
      <!-- IsDropDownOpen -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsDropDownOpen" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter TargetName="toggleButton" Property="BorderBrush" Value="{Binding Path=(p:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
      <!-- IsReadOnly -->
      <Trigger Property="IsReadOnly" Value="True">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Opacity" Value="1" />
        <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_NumericDown" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_NumericUp" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="border" Property="Opacity" Value="1" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
        <Setter TargetName="grid" Property="Opacity" Value="1" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.MultiComboBox" TargetType="{x:Type ctrl:MultiComboBox}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="IsTabStop" Value="True" />
    <Setter Property="IsTextSearchEnabled" Value="True" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.MultiComboBoxItem}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="SelectedItemTemplate" Value="{StaticResource MyNet.DataTemplates.MultiComboBox.SelectedItem}" />
    <Setter Property="SelectionMode" Value="Multiple" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.MultiComboBox}" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:ComboBoxAssist.ShowSelectedItem" Value="True" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.ComboBox.HelperText}" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle" Value="{StaticResource MyNet.Styles.Button.Icon.Tool}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.NextButtonContent" Value="{StaticResource MyNet.Icons.ChevronRight.Medium}" />
    <Setter Property="p:TextFieldAssist.PreviousButtonContent" Value="{StaticResource MyNet.Icons.ChevronLeft.Medium}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
    <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
    <Style.Triggers>
      <Trigger Property="IsEditable" Value="True">
        <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="p:ComboBoxAssist.ShowSelectedItem" Value="True" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.Foreground" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.Filled" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.Filled.Foreground" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.Filled.Alternate" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.Filled}">
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.Filled.Alternate.Foreground" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.Outlined" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.Outlined.Foreground" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.DropDown" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox}">
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:ComboBoxAssist.ShowCaret" Value="False" />
    <Setter Property="p:ComboBoxAssist.ShowUpDownButton" Value="True" />
    <Setter Property="p:TextFieldAssist.NextCommand" Value="{x:Static cmd:AppCommands.ComboBoxUpCommand}" />
    <Setter Property="p:TextFieldAssist.PreviousCommand" Value="{x:Static cmd:AppCommands.ComboBoxDownCommand}" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.DropDown.Foreground" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.DropDown}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.DropDown.Filled" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.DropDown}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text.Foreground}">
          <Setter Property="Focusable" Value="False" />
          <Setter Property="Padding" Value="3 0" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.DropDown.Filled.Foreground" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.DropDown.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.DropDown.Outlined" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.DropDown.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.DropDown.Outlined.Foreground" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.DropDown.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NavigationViewItem.Compact" TargetType="{x:Type ctrl:NavigationViewItem}" BasedOn="{StaticResource MyNet.Styles.NavigationViewItem}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Secondary}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="RightAndAlignMiddles" />
    <Setter Property="Height" Value="60" />
    <Setter Property="Padding" Value="4" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:NavigationViewItem}">
          <Grid>
            <Border x:Name="PART_MainBorder" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource MyNet.CornerRadius.Container}">
              <Grid>
                <Rectangle x:Name="ActiveRectangle" Width="4" Height="24" HorizontalAlignment="{Binding Path=(p:HeaderAssist.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(p:HeaderAssist.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Fill="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" Opacity="0.0" RadiusX="2" RadiusY="2" />
                <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Feedback="{TemplateBinding Foreground}" Focusable="False" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                  <ctrl:Ripple.Clip>
                    <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                      <Binding ElementName="PART_MainBorder" Path="ActualWidth" />
                      <Binding ElementName="PART_MainBorder" Path="ActualHeight" />
                      <Binding ElementName="PART_MainBorder" Path="CornerRadius" />
                      <Binding ElementName="PART_MainBorder" Path="BorderThickness" />
                    </MultiBinding>
                  </ctrl:Ripple.Clip>
                  <Grid HorizontalAlignment="Stretch">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <ContentControl x:Name="Icon" VerticalAlignment="Center" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding IconForeground}" Visibility="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
                    <Grid x:Name="ContentGrid" Grid.Row="1" Height="15" Margin="0 2 0 0">
                      <ContentPresenter x:Name="ElementContentPresenter" HorizontalAlignment="Center" Content="{TemplateBinding Header}" TextElement.FontSize="{TemplateBinding FontSize}" TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Grid>
                    <ctrl:PackIcon x:Name="Caret" Grid.RowSpan="2" Width="18" Height="18" Margin="0 0 -5 0" HorizontalAlignment="Right" VerticalAlignment="Center" Kind="ChevronRight" RenderTransformOrigin="0.5, 0.5">
                      <ctrl:PackIcon.Visibility>
                        <MultiBinding Converter="{x:Static c:MultipleBooleanToVisibilityConverter.AndCollapse}">
                          <Binding Path="HasItems" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </ctrl:PackIcon.Visibility>
                      <ctrl:PackIcon.RenderTransform>
                        <RotateTransform Angle="0" />
                      </ctrl:PackIcon.RenderTransform>
                    </ctrl:PackIcon>
                  </Grid>
                </ctrl:Ripple>
              </Grid>
            </Border>
            <ctrl:PopupEx x:Name="PART_Popup" HorizontalOffset="-5" Placement="Right" PlacementTarget="{Binding ElementName=PART_MainBorder}" PopupAnimation="Fade" VerticalOffset="-5">
              <ctrl:PopupEx.IsOpen>
                <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
                  <Binding Mode="OneWay" Path="IsMouseOver" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Mode="OneWay" Path="HasItems" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </ctrl:PopupEx.IsOpen>
              <Grid>
                <Border Background="White" Opacity="0.002" />
                <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" Padding="0" Background="{TemplateBinding p:PopupAssist.Background}" FontSize="{StaticResource MyNet.Font.Size}" FontWeight="{StaticResource MyNet.Font.Weight.ToolTip}" Foreground="{TemplateBinding p:PopupAssist.Foreground}">
                  <ItemsPresenter />
                </ctrl:Card>
              </Grid>
            </ctrl:PopupEx>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsActive" Value="True">
              <Setter TargetName="ActiveRectangle" Property="Opacity" Value="1.0" />
              <Setter TargetName="ElementContentPresenter" Property="TextElement.Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Setter TargetName="Icon" Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Setter TargetName="PART_MainBorder" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Height" From="15" To="0" Duration="0:0:.16" />
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:.16" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Height" From="0" To="15" Duration="0:0:.16" />
                    <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:.16" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_MainBorder" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsActive" Value="False" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="Icon" Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsMouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="ElementContentPresenter" Property="TextElement.Foreground" Value="{Binding Path=(p:ThemeAssist.IsMouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasItems" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="IsExpanded" Value="True" />
              <MultiTrigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="0" To="180" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </MultiTrigger.EnterActions>
              <MultiTrigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="180" To="0" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </MultiTrigger.ExitActions>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasItems" Value="True" />
                <Condition Property="IsMouseOver" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="IsExpanded" Value="False" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Width" Value="60" />
    <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="{me:BrushBinding InheritPath=(p:HeaderAssist.HorizontalAlignment), RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="p:HeaderAssist.VerticalAlignment" Value="{me:BrushBinding InheritPath=(p:HeaderAssist.VerticalAlignment), RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="p:PopupAssist.Background" Value="{me:BrushBinding InheritPath=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{me:BrushBinding InheritPath=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NavigationViewItem.Top" TargetType="{x:Type ctrl:NavigationViewItem}" BasedOn="{StaticResource MyNet.Styles.NavigationViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:NavigationViewItem}">
          <Grid>
            <Border x:Name="PART_MainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding Border.CornerRadius}">
              <Grid>
                <ctrl:Ripple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Feedback="{TemplateBinding Foreground}" Focusable="False" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="IconContentPresenter" Margin="{StaticResource MyNet.Margins.Default.Right}" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Icon}" Focusable="False" Opacity="{StaticResource MyNet.Opacity.Secondary}" TextElement.Foreground="{TemplateBinding IconForeground}" Visibility="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
                    <ContentPresenter x:Name="ElementContentPresenter" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding Header}" TextElement.Foreground="{TemplateBinding Foreground}" />
                    <ctrl:PackIcon x:Name="Caret" Grid.Row="0" Grid.Column="2" Width="18" Height="18" HorizontalAlignment="Center" VerticalAlignment="Center" Kind="ChevronDown" RenderTransformOrigin="0.5, 0.5">
                      <ctrl:PackIcon.Visibility>
                        <MultiBinding Converter="{x:Static c:MultipleBooleanToVisibilityConverter.AndCollapse}">
                          <Binding Path="HasItems" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </ctrl:PackIcon.Visibility>
                      <ctrl:PackIcon.RenderTransform>
                        <RotateTransform Angle="0" />
                      </ctrl:PackIcon.RenderTransform>
                    </ctrl:PackIcon>
                  </Grid>
                </ctrl:Ripple>
                <Rectangle x:Name="ActiveRectangle" Width="60" Height="3.5" HorizontalAlignment="Center" VerticalAlignment="Bottom" Fill="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0.0" RadiusX="2" RadiusY="2" />
              </Grid>
            </Border>
            <ctrl:PopupEx x:Name="PART_Popup" HorizontalOffset="-5" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_MainBorder}" PopupAnimation="Fade" VerticalOffset="-5">
              <ctrl:PopupEx.IsOpen>
                <MultiBinding Converter="{x:Static c:MultipleBooleanConverter.And}">
                  <Binding Mode="OneWay" Path="IsMouseOver" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Mode="OneWay" Path="HasItems" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </ctrl:PopupEx.IsOpen>
              <Grid>
                <Border Background="White" Opacity="0.002" />
                <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" Padding="0" Background="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource TemplatedParent}}" FontSize="{StaticResource MyNet.Font.Size}" FontWeight="{StaticResource MyNet.Font.Weight.ToolTip}" Foreground="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}">
                  <ItemsPresenter />
                </ctrl:Card>
              </Grid>
            </ctrl:PopupEx>
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, ElementName=PART_MainBorder}" Value="True">
              <Setter TargetName="PART_MainBorder" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </DataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasItems" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="IsExpanded" Value="True" />
              <MultiTrigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="0" To="180" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </MultiTrigger.EnterActions>
              <MultiTrigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="180" To="0" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </MultiTrigger.ExitActions>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasItems" Value="True" />
                <Condition Property="IsMouseOver" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="IsExpanded" Value="False" />
            </MultiTrigger>
            <Trigger Property="IsActive" Value="True">
              <Setter TargetName="ActiveRectangle" Property="Opacity" Value="1.0" />
              <Setter TargetName="IconContentPresenter" Property="Opacity" Value="1.0" />
              <Setter TargetName="PART_MainBorder" Property="Background" Value="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:PopupAssist.Background" Value="{me:BrushBinding InheritPath=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{me:BrushBinding InheritPath=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:NavigationView}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NavigationView" TargetType="{x:Type ctrl:NavigationView}">
    <Style.Resources>
      <Style TargetType="{x:Type ctrl:NavigationViewItem}" BasedOn="{StaticResource MyNet.Styles.NavigationViewItem}" />
    </Style.Resources>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="CompactPaneLength" Value="40" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="FrameBackground" Value="{DynamicResource MyNet.Brushes.Application.Background.Dark}" />
    <Setter Property="FrameCornerRadius" Value="15,0,0,0" />
    <Setter Property="HeaderForeground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock FontSize="{StaticResource MyNet.Font.Size.Title}" Text="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsItemsHost="True" IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Contained" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="OpenPaneLength" Value="320" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:NavigationView}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="PaneStates">
                <VisualState Name="PaneOpen">
                  <Storyboard>
                    <DoubleAnimation AccelerationRatio="0.4" Storyboard.TargetName="PaneGrid" Storyboard.TargetProperty="Width" From="40" To="{TemplateBinding OpenPaneLength}" Duration="0:0:.16" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="PaneCompact">
                  <Storyboard>
                    <DoubleAnimation AccelerationRatio="0.4" Storyboard.TargetName="PaneGrid" Storyboard.TargetProperty="Width" From="{TemplateBinding OpenPaneLength}" To="40" Duration="0:0:.16" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Left Pane -->
            <Grid x:Name="PaneGrid" Grid.Column="0" Width="{TemplateBinding OpenPaneLength}" Margin="{StaticResource MyNet.Margins.Default.Horizontal}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <!-- Pane Header -->
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <!-- Menu button -->
                <Button x:Name="PART_ToggleButton" Style="{StaticResource MyNet.Styles.Button.Text}" Width="39" Height="39" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" Padding="0" Content="{me:MediumIcon Kind=Menu}" Visibility="{Binding IsPaneToggleVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                <!-- Header -->
                <ContentPresenter Grid.Column="1" Margin="{StaticResource MyNet.Margins.Default.Bottom}" Content="{TemplateBinding PaneHeader}" Visibility="{Binding PaneHeader, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
                <!-- Auto Suggest Box -->
                <Grid Grid.Row="1" Grid.ColumnSpan="2" Visibility="{Binding ShowAutoSuggestBox, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                  <ctrl:AutoSuggestBox x:Name="PART_AutoSuggestBox" Style="{StaticResource MyNet.Styles.AutoSuggestBox.Filled}" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" Padding="10 5" HorizontalAlignment="Stretch" p:HintAssist.Hint="{me:Resource Search}" p:IconAssist.Alignment="Right" p:IconAssist.Icon="{me:Icon Kind=Search}" p:IconAssist.Margin="{StaticResource MyNet.Margins.Default.Left}" p:TextFieldAssist.HasClearButton="True" DisplayMemberPath="Header" PopupWidth="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" Visibility="{Binding IsPaneOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                  <Button x:Name="PART_AutoSuggestButton" Style="{StaticResource MyNet.Styles.Button.Text}" Width="39" Height="{Binding Height, ElementName=PART_AutoSuggestBox}" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" Content="{me:Icon Kind=Search,                                                               Size=20}" Visibility="{Binding IsPaneOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
                </Grid>
              </Grid>
              <!-- Items -->
              <ctrl:DynamicScrollViewer Grid.Row="1" CanContentScroll="True" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <!-- Items -->
                  <ItemsPresenter />
                  <!-- Footer Items -->
                  <ItemsControl Style="{StaticResource MyNet.Styles.ItemsControl}" Grid.Row="1" ItemsSource="{Binding FooterMenuItems, RelativeSource={RelativeSource TemplatedParent}}" KeyboardNavigation.DirectionalNavigation="Contained" />
                </Grid>
              </ctrl:DynamicScrollViewer>
              <!-- PaneFooter -->
              <ContentPresenter Grid.Row="2" Margin="{StaticResource MyNet.Margins.Default.Top}" Content="{TemplateBinding PaneFooter}" Visibility="{Binding PaneFooter, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            </Grid>
            <!-- Main frame -->
            <Border Grid.Column="1" Margin="{TemplateBinding FrameMargin}" Background="{TemplateBinding FrameBackground}" BorderBrush="{TemplateBinding FrameBorderBrush}" BorderThickness="{TemplateBinding FrameBorderThickness}" CornerRadius="{TemplateBinding FrameCornerRadius}">
              <Border.Clip>
                <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                  <Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
              </Border.Clip>
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <!-- Header -->
                <DockPanel Margin="{StaticResource MyNet.Margins.Medium}" Visibility="{Binding ShowHeader, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                  <!-- Breadcrumb -->
                  <ctrl:SimpleStackPanel Margin="{StaticResource MyNet.Margins.Large.Right}" VerticalAlignment="Center" DockPanel.Dock="Left" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="{Binding ShowNavigationButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                    <Button x:Name="PART_PreviousButton" Style="{StaticResource MyNet.Styles.Button.Rounded.Text}" Content="{me:MediumIcon Kind=ArrowLeft}" IsEnabled="{TemplateBinding IsBackEnabled}" ToolTip="{me:Resource Previous}" />
                    <Button x:Name="PART_NextButton" Style="{StaticResource MyNet.Styles.Button.Rounded.Text}" Content="{me:MediumIcon Kind=ArrowRight}" IsEnabled="{TemplateBinding IsForwardEnabled}" ToolTip="{me:Resource Next}" />
                  </ctrl:SimpleStackPanel>
                  <ContentPresenter Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" />
                </DockPanel>
                <!-- Page content -->
                <ctrl:NavigationFrame x:Name="PART_NavigationFrame" Grid.Row="1" Padding="{TemplateBinding Padding}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Transition="{TemplateBinding Transition}" TransitionDuration="{TemplateBinding TransitionDuration}" />
              </Grid>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Standard" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Checked}}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.NavigationView.Compact" TargetType="{x:Type ctrl:NavigationView}" BasedOn="{StaticResource MyNet.Styles.NavigationView}">
    <Style.Resources>
      <Style TargetType="{x:Type ctrl:NavigationViewItem}" BasedOn="{StaticResource MyNet.Styles.NavigationViewItem.Compact}" />
    </Style.Resources>
    <Setter Property="CompactPaneLength" Value="60" />
    <Setter Property="IsPaneToggleVisible" Value="False" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <ctrl:SimpleStackPanel MinWidth="0" Margin="0" HorizontalAlignment="Left" Spacing="{StaticResource MyNet.Margin.Default}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="OpenPaneLength" Value="60" />
    <Setter Property="ShowAutoSuggestBox" Value="False" />
    <Setter Property="p:HeaderAssist.HorizontalAlignment" Value="Left" />
    <Setter Property="p:HeaderAssist.VerticalAlignment" Value="Center" />
    <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.NavigationView.Compact.Accent" TargetType="{x:Type ctrl:NavigationView}" BasedOn="{StaticResource MyNet.Styles.NavigationView.Compact}">
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.NavigationView.Top" TargetType="{x:Type ctrl:NavigationView}" BasedOn="{StaticResource MyNet.Styles.NavigationView}">
    <Style.Resources>
      <Style TargetType="{x:Type ctrl:NavigationViewItem}" BasedOn="{StaticResource MyNet.Styles.NavigationViewItem.Top}" />
    </Style.Resources>
    <Setter Property="IsPaneToggleVisible" Value="False" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <ctrl:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Small}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:NavigationView}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <!-- Top Pane -->
            <Grid x:Name="PaneGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Navigation button -->
              <ctrl:SimpleStackPanel Margin="{StaticResource MyNet.Margins.Medium.Right}" VerticalAlignment="Center" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="{Binding ShowNavigationButtons, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                <Button x:Name="PART_PreviousButton" Style="{StaticResource MyNet.Styles.Button.Rounded.Text}" Content="{me:MediumIcon Kind=ArrowLeft}" IsEnabled="{TemplateBinding IsBackEnabled}" ToolTip="{me:Resource Previous}" />
                <Button x:Name="PART_NextButton" Style="{StaticResource MyNet.Styles.Button.Rounded.Text}" Content="{me:MediumIcon Kind=ArrowRight}" IsEnabled="{TemplateBinding IsForwardEnabled}" ToolTip="{me:Resource Next}" />
              </ctrl:SimpleStackPanel>
              <!-- Header -->
              <ContentPresenter Grid.Column="1" Margin="{StaticResource MyNet.Margins.Medium.Right}" VerticalAlignment="Center" Content="{TemplateBinding PaneHeader}" Visibility="{Binding PaneHeader, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
              <!-- Items -->
              <ctrl:DynamicScrollViewer Grid.Column="2" Margin="{StaticResource MyNet.Margins.Medium.Right}" VerticalAlignment="Center" CanContentScroll="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <!-- Items -->
                  <ItemsPresenter />
                  <!-- Footer Items -->
                  <ItemsControl Style="{StaticResource MyNet.Styles.ItemsControl}" Grid.Column="1" ItemsSource="{Binding FooterMenuItems, RelativeSource={RelativeSource TemplatedParent}}" KeyboardNavigation.DirectionalNavigation="Contained">
                    <ItemsControl.ItemsPanel>
                      <ItemsPanelTemplate>
                        <ctrl:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Small}" />
                      </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                  </ItemsControl>
                </Grid>
              </ctrl:DynamicScrollViewer>
              <!-- Auto Suggest Box -->
              <!--<ctrl:AutoSuggestBox x:Name="PART_AutoSuggestBox"
                                                 Style="{StaticResource MyNet.Styles.AutoSuggestBox.Filled}"
                                                 Grid.Column="3"
                                                 Width="150"
                                                 Margin="{StaticResource MyNet.Margins.Medium.Right}"
                                                 Padding="10 5"
                                                 HorizontalAlignment="Stretch"
                                                 VerticalAlignment="Center"
                                                 p:HintAssist.Hint="{me:Resource Search}"
                                                 p:IconAssist.Alignment="Right"
                                                 p:IconAssist.Icon="{me:Icon Kind=Search}"
                                                 p:IconAssist.Margin="{StaticResource MyNet.Margins.Default.Left}"
                                                 p:TextFieldAssist.HasClearButton="True"
                                                 DisplayMemberPath="Header"
                                                 Visibility="{Binding ShowAutoSuggestBox, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />-->
              <!-- PaneFooter -->
              <ContentPresenter Grid.Column="4" Margin="{StaticResource MyNet.Margins.Default.Top}" VerticalAlignment="Center" Content="{TemplateBinding PaneFooter}" Visibility="{Binding PaneFooter, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            </Grid>
            <!-- Main frame -->
            <Border Grid.Row="1" Margin="{TemplateBinding FrameMargin}" Background="{TemplateBinding FrameBackground}" BorderBrush="{TemplateBinding FrameBorderBrush}" BorderThickness="{TemplateBinding FrameBorderThickness}" CornerRadius="{TemplateBinding FrameCornerRadius}">
              <Border.Clip>
                <MultiBinding Converter="{x:Static c:GeometryConverter.Border}">
                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                  <Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
              </Border.Clip>
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <!-- Header -->
                <ContentPresenter Margin="{StaticResource MyNet.Margins.Medium}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Visibility="{Binding ShowHeader, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                <!-- Page content -->
                <ctrl:NavigationFrame x:Name="PART_NavigationFrame" Grid.Row="1" Padding="{TemplateBinding Padding}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Transition="{TemplateBinding Transition}" TransitionDuration="{TemplateBinding TransitionDuration}" />
              </Grid>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.NavigationView.Top.Accent" TargetType="{x:Type ctrl:NavigationView}" BasedOn="{StaticResource MyNet.Styles.NavigationView.Top}">
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown" TargetType="{x:Type ctrl:NumericUpDown}">
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="ButtonsAlignment" Value="Right" />
    <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
    <Setter Property="Cursor" Value="IBeam" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="IsTabStop" Value="True" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="SwitchUpDownButtons" Value="False" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.NumericUpDown}" />
    <Setter Property="TextAlignment" Value="Left" />
    <Setter Property="UpDownButtonsFocusable" Value="False" />
    <Setter Property="UpDownButtonsWidth" Value="18" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.TextBox.HelperText}" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle" Value="{StaticResource MyNet.Styles.Button.Icon.Tool}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.NextButtonContent" Value="{StaticResource MyNet.Icons.Plus.Tool}" />
    <Setter Property="p:TextFieldAssist.PreviousButtonContent" Value="{StaticResource MyNet.Icons.Minus.Tool}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
    <Setter Property="p:GlobalizationAssist.UpdateOnCultureChanged" Value="True" />
    <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
    <Style.Triggers>
      <Trigger Property="p:TextFieldAssist.IsEditable" Value="False">
        <Setter Property="Cursor" Value="Arrow" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.Foreground" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.Filled" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.Filled.Foreground" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.Filled.Alternate" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.Filled}">
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.Filled.Alternate.Foreground" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.Outlined" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.Outlined.Foreground" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.DropDown" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown}">
    <Setter Property="ButtonsAlignment" Value="Opposite" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:TextFieldAssist.IsEditable" Value="False" />
    <Setter Property="p:TextFieldAssist.NextButtonContent" Value="{StaticResource MyNet.Icons.ChevronRight.Medium}" />
    <Setter Property="p:TextFieldAssist.PreviousButtonContent" Value="{StaticResource MyNet.Icons.ChevronLeft.Medium}" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.DropDown.Foreground" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.DropDown}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.DropDown.Filled" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.DropDown}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text.Foreground}">
          <Setter Property="Padding" Value="3 0" />
          <Setter Property="Focusable" Value="False" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.DropDown.Filled.Foreground" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.DropDown.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.DropDown.Outlined" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.DropDown.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.DropDown.Outlined.Foreground" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.DropDown.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.RevealPasswordBox" TargetType="{x:Type ctrl:RevealPasswordBox}" BasedOn="{StaticResource MyNet.Styles.TextBox}">
    <Setter Property="PasswordChar" Value="●" />
    <Setter Property="RevealButtonEnabled" Value="True" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.RevealPasswordBox}" />
  </Style>
  <Style x:Key="MyNet.Styles.RevealPasswordBox.Foreground" TargetType="{x:Type ctrl:RevealPasswordBox}" BasedOn="{StaticResource MyNet.Styles.RevealPasswordBox}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.RevealPasswordBox.Filled" TargetType="{x:Type ctrl:RevealPasswordBox}" BasedOn="{StaticResource MyNet.Styles.RevealPasswordBox}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.RevealPasswordBox.Filled.Foreground" TargetType="{x:Type ctrl:RevealPasswordBox}" BasedOn="{StaticResource MyNet.Styles.RevealPasswordBox.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.RevealPasswordBox.Filled.Alternate" TargetType="{x:Type ctrl:RevealPasswordBox}" BasedOn="{StaticResource MyNet.Styles.RevealPasswordBox.Filled}">
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
  </Style>
  <Style x:Key="MyNet.Styles.RevealPasswordBox.Filled.Alternate.Foreground" TargetType="{x:Type ctrl:RevealPasswordBox}" BasedOn="{StaticResource MyNet.Styles.RevealPasswordBox.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.RevealPasswordBox.Outlined" TargetType="{x:Type ctrl:RevealPasswordBox}" BasedOn="{StaticResource MyNet.Styles.RevealPasswordBox.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.RevealPasswordBox.Outlined.Foreground" TargetType="{x:Type ctrl:RevealPasswordBox}" BasedOn="{StaticResource MyNet.Styles.RevealPasswordBox.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Filled" TargetType="{x:Type ctrl:SplitButton}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.ToggleButton.Filled}" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Button}" />
    <Setter Property="FontWeight" Value="{StaticResource MyNet.Font.Weight.Button}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="11 5" />
    <Setter Property="PlacementMode" Value="BottomAndAlignRightEdges" />
    <Setter Property="PopupHorizontalOffset" Value="0" />
    <Setter Property="PopupMode" Value="Click" />
    <Setter Property="PopupVerticalOffset" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:SplitButton}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="Col0" Width="*" />
              <ColumnDefinition x:Name="Col1" Width="{TemplateBinding InnerSpacing}" />
              <ColumnDefinition x:Name="Col2" Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="Row0" Height="*" />
              <RowDefinition x:Name="Row1" Height="{TemplateBinding InnerSpacing}" />
              <RowDefinition x:Name="Row2" Height="*" />
            </Grid.RowDefinitions>
            <ToggleButton Name="PART_Button" Style="{TemplateBinding ButtonStyle}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" p:IconAssist.Alignment="{TemplateBinding p:IconAssist.Alignment}" p:IconAssist.Icon="{TemplateBinding p:IconAssist.Icon}" p:IconAssist.Margin="{TemplateBinding p:IconAssist.Margin}" p:IconAssist.Opacity="{TemplateBinding p:IconAssist.Opacity}" p:RippleAssist.Feedback="{TemplateBinding p:RippleAssist.Feedback}" p:ThemeAssist.CornerRadius="{StaticResource MyNet.CornerRadius.Control.Left}" p:ThemeAssist.IsCheckedBackground="{TemplateBinding p:ThemeAssist.IsCheckedBackground}" p:ThemeAssist.IsCheckedBorderBrush="{TemplateBinding p:ThemeAssist.IsCheckedBorderBrush}" p:ThemeAssist.IsCheckedForeground="{TemplateBinding p:ThemeAssist.IsCheckedForeground}" p:ThemeAssist.IsMouseOverBackground="{TemplateBinding p:ThemeAssist.IsMouseOverBackground}" p:ThemeAssist.IsMouseOverBorderBrush="{TemplateBinding p:ThemeAssist.IsMouseOverBorderBrush}" p:ThemeAssist.IsMouseOverForeground="{TemplateBinding p:ThemeAssist.IsMouseOverForeground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}" ContentTemplateSelector="{TemplateBinding ToggleContentTemplateSelector}" Cursor="{TemplateBinding Cursor}" Focusable="{TemplateBinding Focusable}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsChecked, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" IsTabStop="False" TabIndex="{TemplateBinding TabIndex}" />
            <ToggleButton Name="PART_Toggle" Style="{TemplateBinding ButtonStyle}" Grid.Column="2" Width="Auto" Height="Auto" Padding="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" p:RippleAssist.Feedback="{TemplateBinding p:RippleAssist.Feedback}" p:ThemeAssist.CornerRadius="{StaticResource MyNet.CornerRadius.Control.Right}" p:ThemeAssist.IsCheckedBackground="{TemplateBinding p:ThemeAssist.IsCheckedBackground}" p:ThemeAssist.IsCheckedBorderBrush="{TemplateBinding p:ThemeAssist.IsCheckedBorderBrush}" p:ThemeAssist.IsCheckedForeground="{TemplateBinding p:ThemeAssist.IsCheckedForeground}" p:ThemeAssist.IsMouseOverBackground="{TemplateBinding p:ThemeAssist.IsMouseOverBackground}" p:ThemeAssist.IsMouseOverBorderBrush="{TemplateBinding p:ThemeAssist.IsMouseOverBorderBrush}" p:ThemeAssist.IsMouseOverForeground="{TemplateBinding p:ThemeAssist.IsMouseOverForeground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ContentTemplate="{x:Null}" Cursor="{TemplateBinding Cursor}" Focusable="{TemplateBinding Focusable}" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}" IsTabStop="False" TabIndex="{TemplateBinding TabIndex}" Visibility="{Binding ShowDropDownButton, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
              <Grid>
                <ctrl:PackIcon x:Name="Caret" Width="18" Height="18" HorizontalAlignment="Center" VerticalAlignment="Center" Kind="ChevronDown" RenderTransformOrigin="0.5, 0.5">
                  <ctrl:PackIcon.RenderTransform>
                    <RotateTransform Angle="0" />
                  </ctrl:PackIcon.RenderTransform>
                </ctrl:PackIcon>
              </Grid>
            </ToggleButton>
            <ctrl:PopupEx x:Name="PART_Popup" Style="{StaticResource MyNet.Styles.PopupEx}" CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}" HorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupHorizontalOffset}" IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}" PlacementTarget="{Binding ElementName=PART_Toggle}" PopupAnimation="{TemplateBinding PopupAnimation}" VerticalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupVerticalOffset}">
              <Grid>
                <Border Background="White" Opacity="0.002" />
                <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" Padding="{TemplateBinding PopupPadding}" Background="{TemplateBinding p:PopupAssist.Background}" FontSize="{StaticResource MyNet.Font.Size}" FontWeight="{StaticResource MyNet.Font.Weight.ToolTip}" Foreground="{TemplateBinding p:PopupAssist.Foreground}">
                  <ContentControl Content="{TemplateBinding PopupContent}" ContentTemplate="{TemplateBinding PopupContentTemplate}" />
                </ctrl:Card>
              </Grid>
            </ctrl:PopupEx>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsPopupOpen" Value="true">
              <Setter TargetName="PART_Toggle" Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="PART_Button" Property="Foreground" Value="{Binding Path=(p:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Trigger>
            <Trigger Property="DropDownButtonPosition" Value="Top">
              <Setter TargetName="Col0" Property="Width" Value="*" />
              <Setter TargetName="Col2" Property="Width" Value="Auto" />
              <Setter TargetName="PART_Button" Property="Grid.Column" Value="0" />
              <Setter TargetName="PART_Button" Property="Grid.Row" Value="2" />
              <Setter TargetName="PART_Toggle" Property="Grid.Column" Value="0" />
              <Setter TargetName="PART_Toggle" Property="Grid.Row" Value="0" />
              <Setter TargetName="Row0" Property="Height" Value="Auto" />
              <Setter TargetName="Row2" Property="Height" Value="*" />
              <Setter TargetName="Col1" Property="Width" Value="0" />
            </Trigger>
            <Trigger Property="DropDownButtonPosition" Value="Right">
              <Setter TargetName="Col0" Property="Width" Value="*" />
              <Setter TargetName="Col2" Property="Width" Value="Auto" />
              <Setter TargetName="PART_Button" Property="Grid.Column" Value="0" />
              <Setter TargetName="PART_Button" Property="Grid.Row" Value="0" />
              <Setter TargetName="PART_Toggle" Property="Grid.Column" Value="2" />
              <Setter TargetName="PART_Toggle" Property="Grid.Row" Value="0" />
              <Setter TargetName="Row0" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="Auto" />
              <Setter TargetName="Row1" Property="Height" Value="0" />
            </Trigger>
            <Trigger Property="DropDownButtonPosition" Value="Bottom">
              <Setter TargetName="Col0" Property="Width" Value="*" />
              <Setter TargetName="Col2" Property="Width" Value="Auto" />
              <Setter TargetName="PART_Button" Property="Grid.Column" Value="0" />
              <Setter TargetName="PART_Button" Property="Grid.Row" Value="0" />
              <Setter TargetName="PART_Toggle" Property="Grid.Column" Value="0" />
              <Setter TargetName="PART_Toggle" Property="Grid.Row" Value="2" />
              <Setter TargetName="Row0" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="Auto" />
              <Setter TargetName="Col1" Property="Width" Value="0" />
            </Trigger>
            <Trigger Property="DropDownButtonPosition" Value="Left">
              <Setter TargetName="Col0" Property="Width" Value="Auto" />
              <Setter TargetName="Col2" Property="Width" Value="*" />
              <Setter TargetName="PART_Button" Property="Grid.Column" Value="2" />
              <Setter TargetName="PART_Button" Property="Grid.Row" Value="0" />
              <Setter TargetName="PART_Toggle" Property="Grid.Column" Value="0" />
              <Setter TargetName="PART_Toggle" Property="Grid.Row" Value="0" />
              <Setter TargetName="Row0" Property="Height" Value="*" />
              <Setter TargetName="Row2" Property="Height" Value="Auto" />
              <Setter TargetName="Row1" Property="Height" Value="0" />
            </Trigger>
            <Trigger Property="DropDownButtonOrientation" Value="Up">
              <Setter TargetName="Caret" Property="Kind" Value="ChevronUp" />
            </Trigger>
            <Trigger Property="DropDownButtonOrientation" Value="Right">
              <Setter TargetName="Caret" Property="Kind" Value="ChevronRight" />
            </Trigger>
            <Trigger Property="DropDownButtonOrientation" Value="Down">
              <Setter TargetName="Caret" Property="Kind" Value="ChevronDown" />
            </Trigger>
            <Trigger Property="DropDownButtonOrientation" Value="Left">
              <Setter TargetName="Caret" Property="Kind" Value="ChevronLeft" />
            </Trigger>
            <Trigger Property="IsPopupOpen" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="0" To="180" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="180" To="0" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ToggleContentTemplate" Value="{StaticResource MyNet.DataTemplates.Icon}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsMouseOverForeground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Filled.Custom" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Filled.Primary" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Filled.Accent" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Filled.Foreground" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Custom}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Filled.Alternate" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled}" />
  <Style x:Key="MyNet.Styles.SplitButton.Filled.Alternate.Custom" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Filled.Alternate.Primary" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Filled.Alternate.Accent" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Filled.Alternate.Foreground" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Outlined" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Outlined.Primary" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate.Primary}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Outlined.Accent" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate.Accent}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Outlined.Custom" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate.Custom}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Outlined.Foreground" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate.Foreground}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Text" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Text.Primary" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate.Primary}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Text.Accent" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate.Accent}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Text.Custom" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate.Custom}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Text.Foreground" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate.Foreground}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Elevation" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled}">
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.ToggleButton.Elevation}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Button}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Elevation.Custom" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Elevation}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Background, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Elevation.Primary" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Elevation.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Elevation.Accent" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Elevation.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Elevation.Foreground" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Elevation.Custom}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Elevation.Alternate" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled.Alternate}">
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.ToggleButton.Elevation}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Button}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Elevation.Alternate.Custom" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Elevation.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Elevation.Alternate.Primary" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Elevation.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Elevation.Alternate.Accent" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Elevation.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Elevation.Alternate.Foreground" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Elevation.Alternate.Custom}">
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedBackground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Icon" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled}">
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.ToggleButton.Icon}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground), Opacity={StaticResource MyNet.Opacity.Secondary}}" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsMouseOverForeground)}" />
      </Trigger>
      <Trigger Property="IsPopupOpen" Value="True">
        <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=(p:ThemeAssist.IsCheckedForeground)}" />
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Icon.Primary" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Icon}">
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Icon.Accent" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Icon}">
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.Icon.Foreground" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Icon}">
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.Clock.Embedded.TimePicker" TargetType="{x:Type ctrl:Clock}" BasedOn="{StaticResource MyNet.Styles.Clock}">
    <Setter Property="Margin" Value="16 8 16 24" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Popup}" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.TimePicker" TargetType="{x:Type ctrl:TimePicker}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <!-- Mouse Over -->
            <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Focus -->
            <Border x:Name="focus" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Ripple on focus -->
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Previous button -->
              <RepeatButton x:Name="PART_Previous" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{Binding Path=(p:TextFieldAssist.PreviousCommand), RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Path=(p:TextFieldAssist.PreviousButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:TextFieldAssist.PreviousCommand), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
              <!-- Icon -->
              <ContentControl x:Name="Icon" Grid.Column="1" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <ContentControl.Resources>
                  <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                  <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                </ContentControl.Resources>
              </ContentControl>
              <Grid Grid.Column="2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <!-- Content -->
                <Grid x:Name="grid" Grid.Column="1" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Host Text -->
                    <md:TimePickerTextBox x:Name="PART_TextBox" Style="{StaticResource MyNet.Styles.TextBox.Embedded}" Grid.Column="1" HorizontalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="Center" CaretBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" SelectionBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{Binding Path=(p:TextFieldAssist.IsEditable), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                    <TextBlock Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" Visibility="{Binding Path=(p:TextFieldAssist.IsEditable), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfTrue}}">
                      <TextBlock.Text>
                        <MultiBinding Converter="{x:Static c:StringConverter.ToTitle}">
                          <Binding Path="SelectedTime" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:TextFieldAssist.Format)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Text>
                    </TextBlock>
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
              <!-- Calendar button -->
              <Button x:Name="PART_Button" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Grid.Column="4" Content="{me:Icon Kind=ClockOutline}" />
              <!-- Clear button -->
              <Button x:Name="PART_ClearButton" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="3" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{x:Static p:TextFieldAssist.ClearCommand}" Content="{me:Icon Kind=Close,                                                       Size=16}" ToolTip="{me:Resource Clear}">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
              <!-- Next button -->
              <RepeatButton x:Name="PART_Next" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="6" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{Binding Path=(p:TextFieldAssist.NextCommand), RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Path=(p:TextFieldAssist.NextButtonContent), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:TextFieldAssist.NextCommand), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            </Grid>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          <Border x:Name="CharacterCounterContainer" Grid.Column="1">
            <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding Path=(p:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </Grid>
      </Canvas>
      <Popup x:Name="PART_Popup" AllowsTransparency="True" HorizontalOffset="-16" Placement="Bottom" PlacementTarget="{Binding ElementName=border}" PopupAnimation="Slide" StaysOpen="False" VerticalOffset="-5" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsHeaderVisible" Value="False">
        <Setter Property="ClockStyle">
          <Setter.Value>
            <Style TargetType="{x:Type ctrl:Clock}" BasedOn="{StaticResource MyNet.Styles.Clock}">
              <Setter Property="IsHeaderVisible" Value="False" />
            </Style>
          </Setter.Value>
        </Setter>
      </Trigger>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="5" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="p:TextFieldAssist.IsEditable" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Button" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_ClearButton" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_Next" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_Previous" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- IsKeyboardFocused -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
      </MultiTrigger>
      <!-- IsDropDownOpen -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="PART_Button" Property="Foreground" Value="{Binding Path=(p:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
      <!-- IsReadOnly -->
      <Trigger Property="p:TextFieldAssist.IsReadOnly" Value="True">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Opacity" Value="1" />
        <Setter TargetName="PART_Button" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
        <Setter TargetName="border" Property="Opacity" Value="1" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
        <Setter TargetName="grid" Property="Opacity" Value="1" />
      </Trigger>
      <!-- IsEditable -->
      <Trigger Property="p:TextFieldAssist.IsEditable" Value="False">
        <Setter TargetName="PART_Button" Property="Content" Value="" />
        <Setter TargetName="PART_Button" Property="Grid.Column" Value="1" />
        <Setter TargetName="PART_Button" Property="Grid.ColumnSpan" Value="3" />
        <Setter TargetName="PART_Button" Property="Height" Value="Auto" />
        <Setter TargetName="PART_Button" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="PART_Button" Property="Style" Value="{StaticResource MyNet.Styles.Button.Embedded.TimePicker}" />
        <Setter TargetName="PART_Button" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="PART_Button" Property="Width" Value="Auto" />
        <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
        <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.TimePicker" TargetType="{x:Type ctrl:TimePicker}">
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="ClockStyle" Value="{StaticResource MyNet.Styles.Clock.Embedded.TimePicker}" />
    <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Is24Hours" Value="True" />
    <Setter Property="IsHeaderVisible" Value="True" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.TimePicker}" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.TextBox.HelperText}" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle" Value="{StaticResource MyNet.Styles.Button.Icon.Tool}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.NextButtonContent" Value="{StaticResource MyNet.Icons.ChevronRight.Medium}" />
    <Setter Property="p:TextFieldAssist.PreviousButtonContent" Value="{StaticResource MyNet.Icons.ChevronLeft.Medium}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
    <Setter Property="p:GlobalizationAssist.UpdateOnCultureChanged" Value="True" />
    <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.Foreground" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.Filled" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.Filled.Foreground" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.Filled.Alternate" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.Filled}">
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.Filled.Alternate.Foreground" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.Outlined" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.Outlined.Foreground" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.DropDown" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker}">
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:TextFieldAssist.Format" Value="HH:mm" />
    <Setter Property="p:TextFieldAssist.IsEditable" Value="False" />
    <Setter Property="p:TextFieldAssist.NextCommand" Value="{x:Static cmd:AppCommands.NextHourCommand}" />
    <Setter Property="p:TextFieldAssist.PreviousCommand" Value="{x:Static cmd:AppCommands.PreviousHourCommand}" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.DropDown.Foreground" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.DropDown}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.DropDown.Filled" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.DropDown}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text.Foreground}">
          <Setter Property="Padding" Value="3 0" />
          <Setter Property="Focusable" Value="False" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.DropDown.Filled.Foreground" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.DropDown.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.DropDown.Outlined" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.DropDown.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.DropDown.Outlined.Foreground" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.DropDown.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToastItem" TargetType="{x:Type ctrl:ToastItem}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Small}" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Default}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ToastItem}">
          <ControlTemplate.Resources>
            <DataTemplate DataType="{x:Type notif:MessageNotification}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ctrl:PackIcon x:Name="Icon" Width="40" Height="40" Margin="{StaticResource MyNet.Margins.Default.Left}" VerticalAlignment="Center" Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type FrameworkElement}}}" />
                <StackPanel Grid.Column="1" Margin="{StaticResource MyNet.Margins.VeryLarge.Horizontal}" VerticalAlignment="Center" Orientation="Vertical">
                  <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}" Margin="{StaticResource MyNet.Margins.Default.Bottom}" FontWeight="{StaticResource MyNet.Font.Weight.Header}" Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type FrameworkElement}}}" Opacity="{StaticResource MyNet.Opacity.Default}" Text="{Binding Title, Converter={x:Static c:StringConverter.ToUpper}, Mode=OneTime}" TextWrapping="Wrap" Visibility="{Binding Title, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
                  <TextBlock Margin="{StaticResource MyNet.Margins.Default.Bottom}" Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type FrameworkElement}}}" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{Binding Message, Mode=OneTime}" TextWrapping="Wrap" />
                </StackPanel>
              </Grid>
              <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Success}">
                  <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.Check}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Error}">
                  <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.RemoveCircle}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Warning}">
                  <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.Warning}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Information}">
                  <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.InformationCircle}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.None}">
                  <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </DataTrigger>
              </DataTemplate.Triggers>
            </DataTemplate>
          </ControlTemplate.Resources>
          <ctrl:Card Padding="0" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Foreground="{TemplateBinding Foreground}" UniformCornerRadius="{TemplateBinding p:ThemeAssist.UniformCornerRadius}">
            <Grid>
              <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{Binding Notification}" />
              <Button x:Name="CloseButton" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Margin="{StaticResource MyNet.Margins.Default}" HorizontalAlignment="Right" VerticalAlignment="Top" Content="{me:ToolIcon Kind=Close}" ToolTip="{me:Resource Close}" />
            </Grid>
          </ctrl:Card>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Toast.OnClick, RelativeSource={RelativeSource Self}, Converter={x:Static c:NullToBooleanConverter.FalseIfNull}}" Value="True">
        <Setter Property="Cursor" Value="Hand" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.TextBox.Embedded.DataGrid.Edition" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox.Foreground}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="-1 0 -1 -2" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.DatePicker.Embedded.DataGrid.Edition" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.Foreground}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="-1 0 -1 -2" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.Embedded.DataGrid.Edition" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.Foreground}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="-1 0 -1 -2" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.Embedded.DataGrid.Edition" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.Foreground}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="-1 0 -1 -2" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.DataGrid" TargetType="{x:Type DataGrid}">
    <Setter Property="AlternationCount" Value="2" />
    <Setter Property="AutoGenerateColumns" Value="False" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="CanUserAddRows" Value="True" />
    <Setter Property="CanUserDeleteRows" Value="True" />
    <Setter Property="CanUserReorderColumns" Value="False" />
    <Setter Property="CanUserResizeColumns" Value="False" />
    <Setter Property="CanUserResizeRows" Value="False" />
    <Setter Property="CellStyle" Value="{StaticResource MyNet.Styles.DataGridCell}" />
    <Setter Property="ColumnHeaderStyle" Value="{StaticResource MyNet.Styles.DataGridColumnHeader}" />
    <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.FontSize)}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="GridLinesVisibility" Value="None" />
    <Setter Property="HeadersVisibility" Value="Column" />
    <Setter Property="HeadersVisibility" Value="All" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
    <Setter Property="RowHeaderStyle" Value="{StaticResource MyNet.Styles.DataGridRowHeader}" />
    <Setter Property="RowHeight" Value="40" />
    <Setter Property="RowStyle" Value="{StaticResource MyNet.Styles.DataGridRow}" />
    <Setter Property="RowValidationErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <Grid Margin="0 -2 0 -2" ToolTip="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}}, Path=(Validation.Errors)[0].ErrorContent}">
            <ctrl:PackIcon Width="20" Height="20" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Validation.Error}" Kind="Error" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="SelectionMode" Value="Extended" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGrid}">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding p:ThemeAssist.CornerRadius}" SnapsToDevicePixels="True">
            <ctrl:DynamicScrollViewer x:Name="DG_ScrollViewer" p:ScrollViewerAssist.IsAutoHideEnabled="{Binding Path=(p:ScrollViewerAssist.IsAutoHideEnabled), RelativeSource={RelativeSource TemplatedParent}}" Focusable="false">
              <ctrl:DynamicScrollViewer.Template>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Button Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                    <Border Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}">
                      <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" />
                    </Border>
                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="1" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" CanContentScroll="{TemplateBinding CanContentScroll}" />
                    <ctrl:DynamicScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="1" Grid.Column="2" HorizontalAlignment="Right" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    <Grid x:Name="Grid_HorizontalScrollBar" Grid.Row="2" Grid.Column="1" VerticalAlignment="Bottom">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <ctrl:DynamicScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                  </Grid>
                </ControlTemplate>
              </ctrl:DynamicScrollViewer.Template>
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </ctrl:DynamicScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
    <Setter Property="VerticalGridLinesBrush" Value="{Binding HorizontalGridLinesBrush, RelativeSource={RelativeSource Self}}" />
    <Setter Property="p:DataGridAssist.ApplyDefaultStyle" Value="True" />
    <Setter Property="p:DataGridAssist.CheckBoxColumnStyle" Value="{StaticResource MyNet.Styles.CheckBox.Embedded.DataGrid}" />
    <Setter Property="p:DataGridAssist.ComboBoxColumnStyle" Value="{StaticResource MyNet.Styles.ComboBox.Embedded.DataGrid}" />
    <Setter Property="p:DataGridAssist.EditingCheckBoxColumnStyle" Value="{StaticResource MyNet.Styles.CheckBox.Embedded.DataGrid.Edition}" />
    <Setter Property="p:DataGridAssist.EditingComboBoxColumnStyle" Value="{StaticResource MyNet.Styles.ComboBox.Embedded.DataGrid.Edition}" />
    <Setter Property="p:DataGridAssist.EditingTextColumnStyle" Value="{StaticResource MyNet.Styles.TextBox.Embedded.DataGrid.Edition}" />
    <Setter Property="p:DataGridAssist.EnableEditBoxAssist" Value="True" />
    <Setter Property="p:DataGridAssist.SelectedCellBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:DataGridAssist.TextColumnStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.DataGrid}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ListBoxItemAssist.ShowSelection" Value="True" />
    <Setter Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="True" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="true" />
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.DataGrid.Accent" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MyNet.Styles.DataGrid}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.DataGrid.Foreground" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MyNet.Styles.DataGrid}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="False" SnapsToDevicePixels="true">
            <Grid>
              <ctrl:DynamicScrollViewer Padding="{TemplateBinding Padding}" ClipToBounds="False" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                <ItemsPresenter ClipToBounds="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </ctrl:DynamicScrollViewer>
              <Grid p:BusyAssist.AttachService="{Binding Path=(b:ItemsControlAsyncBehavior.BusyService), RelativeSource={RelativeSource TemplatedParent}}" p:BusyAssist.Style="{StaticResource MyNet.Styles.BusyControl.Dark.Foreground}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="true" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Standard" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ListBoxItemAssist.ShowSelection" Value="True" />
    <Setter Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Toggle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Toggle}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" Orientation="Horizontal" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="SelectionMode" Value="Single" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <ctrl:Card Padding="0" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" p:ElevationAssist.Elevation="{Binding Path=(p:ElevationAssist.Elevation), RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="False" Foreground="{TemplateBinding Foreground}">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </ctrl:Card>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="true" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Control}" />
    <Setter Property="p:ListBoxAssist.IsToggle" Value="False" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Style.Triggers>
      <Trigger Property="p:ListBoxAssist.Orientation" Value="{x:Static Orientation.Vertical}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Toggle.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Toggle.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Toggle.Foreground.Opacity" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle.Foreground}">
    <Setter Property="Background" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Checked}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Icon" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Icon}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="true" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Icon.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Icon}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Icon.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Icon}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBoxItem.Tab.DropDown" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem.Tab}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Grid>
            <RadioButton x:Name="RadioButton" Style="{StaticResource MyNet.Styles.RadioButton.Tab}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" p:IconAssist.Alignment="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource TemplatedParent}}" p:IconAssist.Icon="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" p:IconAssist.Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" p:IconAssist.Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" p:RippleAssist.Feedback="{Binding Path=(p:RippleAssist.Feedback), RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" TextOptions.TextFormattingMode="Ideal" TextOptions.TextRenderingMode="Auto" Typography.Capitals="{TemplateBinding Typography.Capitals}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="Col0" Width="Auto" />
                  <ColumnDefinition x:Name="Col1" Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition x:Name="Row0" Height="Auto" />
                  <RowDefinition x:Name="Row1" Height="Auto" />
                </Grid.RowDefinitions>
                <ctrl:PackIcon x:Name="Caret" Grid.Row="0" Grid.Column="1" Width="18" Height="18" HorizontalAlignment="Center" VerticalAlignment="Center" Kind="ChevronDown" RenderTransformOrigin="0.5, 0.5">
                  <ctrl:PackIcon.RenderTransform>
                    <RotateTransform Angle="0" />
                  </ctrl:PackIcon.RenderTransform>
                </ctrl:PackIcon>
                <ContentControl x:Name="Content" Grid.Row="0" Grid.Column="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
              </Grid>
            </RadioButton>
            <ctrl:PopupEx x:Name="PART_Popup" Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" HorizontalOffset="-5" IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver, Mode=OneWay}" Placement="Bottom" PlacementTarget="{Binding ElementName=RadioButton}" PopupAnimation="Slide" VerticalOffset="-5">
              <Grid>
                <Border Background="White" Opacity="0.002" />
                <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" Padding="0" Background="{TemplateBinding p:PopupAssist.Background}" FontSize="{StaticResource MyNet.Font.Size}" FontWeight="{StaticResource MyNet.Font.Weight.ToolTip}" Foreground="{TemplateBinding p:PopupAssist.Foreground}">
                  <ContentControl Content="{TemplateBinding p:PopupAssist.Content}" ContentTemplate="{TemplateBinding p:PopupAssist.ContentTemplate}" />
                </ctrl:Card>
              </Grid>
            </ctrl:PopupEx>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="RadioButton" Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsOpen, ElementName=PART_Popup}" Value="True">
              <DataTrigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="0" To="180" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </DataTrigger.EnterActions>
              <DataTrigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Caret" Storyboard.TargetProperty="(ctrl:PackIcon.RenderTransform).(RotateTransform.Angle)" From="180" To="0" Duration="00:00:00.167" />
                  </Storyboard>
                </BeginStoryboard>
              </DataTrigger.ExitActions>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Tab" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Tab}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel Orientation="Horizontal" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="SelectedValuePath" Value="" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="true" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
          <ctrl:Card Padding="{TemplateBinding Padding}" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" p:ShadowAssist.ShadowEdges="{TemplateBinding p:ShadowAssist.ShadowEdges}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" DockPanel.Dock="Top" Focusable="False" Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="true" UniformCornerRadius="{Binding Path=(p:ThemeAssist.UniformCornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ctrl:DynamicScrollViewer Padding="{TemplateBinding Padding}" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </ctrl:DynamicScrollViewer>
          </ctrl:Card>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ElevationAssist.Elevation" Value="Dp0" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:RippleAssist.Feedback" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ShadowAssist.ShadowEdges" Value="None" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="0" />
    <Style.Triggers>
      <Trigger Property="p:ListBoxAssist.Orientation" Value="{x:Static Orientation.Vertical}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <WrapPanel Orientation="Vertical" />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="p:ShadowAssist.ShadowEdges" Value="Right" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Tab.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Tab}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Tab.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Tab}">
    <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=Foreground}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding SelfPath=Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Cards" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Card}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <ctrl:VirtualizingWrapPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" Orientation="Vertical" SpacingMode="None" StretchItems="False" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="SelectionMode" Value="Extended" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <Grid>
              <ContentControl x:Name="ContentControl">
                <ctrl:DynamicScrollViewer Padding="{TemplateBinding Padding}" p:ScrollViewerAssist.BubbleVerticalScroll="{TemplateBinding p:ScrollViewerAssist.BubbleVerticalScroll}" p:ScrollViewerAssist.IsAutoHideEnabled="{Binding Path=(p:ScrollViewerAssist.IsAutoHideEnabled), RelativeSource={RelativeSource Mode=TemplatedParent}}" CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                  <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </ctrl:DynamicScrollViewer>
              </ContentControl>
              <Grid p:BusyAssist.AttachService="{Binding Path=(b:ItemsControlAsyncBehavior.BusyService), RelativeSource={RelativeSource TemplatedParent}}" p:BusyAssist.Style="{StaticResource MyNet.Styles.BusyControl.Dark.Foreground}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="true" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VirtualizingPanel.CacheLengthUnit" Value="Page" />
    <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel" />
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Checked}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ScrollViewerAssist.IsAutoHideEnabled" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Cards.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Cards}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Cards.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Cards}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Chips" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Tab}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Chip}" />
    <Setter Property="SelectionMode" Value="Multiple" />
    <Setter Property="p:CheckBoxAssist.ShowCheck" Value="False" />
    <Setter Property="p:ListBoxAssist.IsToggle" Value="True" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Chips.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Chips}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Chips.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Chips}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Chips.Alternate" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Chips}">
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem.Chip}">
          <Setter Property="BorderThickness" Value="1" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding SelfPath=(p:ListBoxItemAssist.IsSelectedForeground), Opacity={StaticResource MyNet.Opacity.Checked}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{me:BrushBinding SelfPath=(p:ListBoxItemAssist.IsSelectedForeground)}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Chips.Alternate.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Chips.Alternate}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Chips.Alternate.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Chips.Alternate}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Navigation" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListBoxItem.Navigation}" />
    <Setter Property="p:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground.Tertiary}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Navigation.Accent" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Navigation}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Navigation.Foreground" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Navigation}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBorderBrush" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Specials.PresetColumns" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon.Foreground}">
    <Setter Property="PopupContent" Value="{Binding DataContext.Display.Mode.PresetColumns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" />
    <Setter Property="PopupContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:Submenu ItemsSource="{Binding}">
            <ctrl:Submenu.ItemContainerStyle>
              <Style TargetType="MenuItem" BasedOn="{StaticResource MyNet.Styles.MenuItem}">
                <Setter Property="Command" Value="{Binding DataContext.Display.Mode.SetDisplayedColumnsCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" />
                <Setter Property="CommandParameter" Value="{Binding Item}" />
                <Setter Property="Header" Value="{Binding DisplayName.Value}" />
              </Style>
            </ctrl:Submenu.ItemContainerStyle>
          </ctrl:Submenu>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="PopupPadding" Value="0" />
    <Setter Property="ShowDropDownButton" Value="False" />
    <Setter Property="ToggleContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:PackIcon Width="18" Height="18" Kind="EyeCheck" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ToolTip" Value="{me:Resource ShowColumns}" />
    <Setter Property="Visibility" Value="{Binding DataContext.Display.Mode.PresetColumns.Count, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Converter={x:Static c:CountToVisibilityConverter.CollapsedIfNotAny}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.Specials.ColumnsVisibility" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon.Foreground}">
    <Setter Property="PopupContent" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=(p:ListViewAssist.ColumnLayouts)}" />
    <Setter Property="PopupContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:Submenu ItemsSource="{Binding}">
            <ctrl:Submenu.ItemContainerStyle>
              <Style TargetType="MenuItem" BasedOn="{StaticResource MyNet.Styles.MenuItem}">
                <Setter Property="Header" Value="{Binding Column.Header}" />
                <Setter Property="IsCheckable" Value="True" />
                <Setter Property="IsChecked" Value="{Binding IsVisible}" />
                <Setter Property="StaysOpenOnClick" Value="True" />
                <Setter Property="Visibility" Value="{Binding CanBeHidden, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
              </Style>
            </ctrl:Submenu.ItemContainerStyle>
          </ctrl:Submenu>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="PopupPadding" Value="0" />
    <Setter Property="ShowDropDownButton" Value="False" />
    <Setter Property="StaysOpen" Value="True" />
    <Setter Property="ToggleContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ctrl:PackIcon Width="18" Height="18" Kind="DotsVertical" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ToolTip" Value="{me:Resource ShowColumns}" />
  </Style>
  <DataTemplate x:Key="MyNet.DataTemplates.ListView.ColumnsVisibility">
    <ctrl:SimpleStackPanel HorizontalAlignment="Right" VerticalAlignment="Center" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
      <Button Style="{StaticResource MyNet.Styles.Button.Icon.Foreground}" Command="{Binding DataContext.Display.Mode.ResetCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" Content="{me:ToolIcon Kind=Restore}" ToolTip="{me:Resource Reset}" />
      <ctrl:DropDownButton Style="{StaticResource MyNet.Styles.DropDownButton.Specials.PresetColumns}" />
      <ctrl:DropDownButton Style="{StaticResource MyNet.Styles.DropDownButton.Specials.ColumnsVisibility}" />
    </ctrl:SimpleStackPanel>
  </DataTemplate>
  <Style x:Key="MyNet.Styles.TextBox.Embedded.ListView" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="CaretBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.Embedded.ListView" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.ToolBar" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Text}">
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.ToolBar.Elevation" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Elevation.Alternate}">
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.ToolBar.Elevation.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.ToolBar.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.ToolBar.Filled" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Filled}">
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.DropDownButton.ToolBar.Filled.Primary" TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.ToolBar.Filled}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.ToolBar" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Text}">
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.ToolBar.Elevation" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Elevation}">
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.ToolBar.Elevation.Primary" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.ToolBar.Elevation}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Background, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.ToolBar.Filled" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.Filled}">
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="MinWidth" Value="46" />
    <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Background" Value="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.SplitButton.ToolBar.Filled.Primary" TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.ToolBar.Filled}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Background}" />
    <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding SelfPath=Background, Contrast=True}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.ToolBar" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Toggle}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="FontSize" Value="{Binding Path=(TextElement.FontSize), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="ListBoxItem" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
          <Setter Property="HorizontalContentAlignment" Value="Center" />
          <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Small.Horizontal}" />
          <Setter Property="MinWidth" Value="46" />
          <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Small}" />
          <Setter Property="VerticalAlignment" Value="Stretch" />
          <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Small.Vertical}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="p:ElevationAssist.Elevation" Value="Dp0" />
    <Setter Property="p:IconAssist.Alignment" Value="{Binding Path=(p:IconAssist.Alignment), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Margin" Value="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:IconAssist.Opacity" Value="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.MultiComboBox.ToolBar" TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox}">
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.TimePicker.ToolBar" TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker}">
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.ToolBar" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown}">
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Embedded.ColorCanvas" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Cards}">
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem.Card}">
          <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Transparency.Small}" />
          <Setter Property="Height" Value="18" />
          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
          <Setter Property="Margin" Value="2" />
          <Setter Property="Padding" Value="0" />
          <Setter Property="ToolTip" Value="{me:Translation}" />
          <Setter Property="VerticalContentAlignment" Value="Stretch" />
          <Setter Property="Width" Value="18" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Converter={x:Static c:ColorToBrushConverter.Default}}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ScrollViewerAssist.BubbleVerticalScroll" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.NumericUpDown.Embedded.ColorCanvas" TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.Outlined}">
    <Setter Property="Maximum" Value="255" />
    <Setter Property="Minimum" Value="0" />
    <Setter Property="Padding" Value="5 3" />
    <Setter Property="Width" Value="85" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorCanvas" TargetType="{x:Type ctrl:ColorCanvas}">
    <Setter Property="CustomColors1Header" Value="{me:Resource StandardColors}" />
    <Setter Property="CustomColors1ItemsSource" Value="{x:Static media:ColorPalettes.StandardColorsPalette}" />
    <Setter Property="CustomColors2Header" Value="{me:Resource AvailableColors}" />
    <Setter Property="CustomColors2ItemsSource" Value="{x:Static media:ColorPalettes.AvailableColorsPalette}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ColorCanvas}">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <Grid Grid.IsSharedSizeScope="True" UseLayoutRounding="True">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="10" />
                <RowDefinition Height="35" />
              </Grid.RowDefinitions>
              <Grid Grid.ColumnSpan="3">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="ColorsColumn" Width="*" />
                  <ColumnDefinition x:Name="Space1Column" Width="10" />
                  <ColumnDefinition x:Name="HSVPickerColumn" Width="*" />
                  <ColumnDefinition x:Name="Space2Column" Width="10" />
                  <ColumnDefinition x:Name="SlidersColumn" Width="*" />
                </Grid.ColumnDefinitions>
                <!-- Custom Colors -->
                <ctrl:DynamicScrollViewer x:Name="PART_ColorsScrollViewer" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                  <VirtualizingStackPanel>
                    <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" Header="{me:Resource RecentColors}" Visibility="{Binding ShowRecentColors, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                      <DockPanel>
                        <Button x:Name="PART_AddRecentColorButton" Style="{StaticResource MyNet.Styles.Button.Filled}" Width="18" Height="18" Margin="1" Padding="0" VerticalAlignment="Top" Content="{me:Icon Kind=Plus}" Visibility="{Binding CanAddRecentColor, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                        <ListBox x:Name="PART_RecentColors" Style="{StaticResource MyNet.Styles.ListBox.Embedded.ColorCanvas}" ItemsSource="{TemplateBinding RecentColorsItemsSource}" />
                      </DockPanel>
                    </GroupBox>
                    <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" Header="{TemplateBinding CustomColors1Header}" Visibility="{Binding ShowCustomColors1, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                      <ListBox x:Name="PART_Colors1" Style="{StaticResource MyNet.Styles.ListBox.Embedded.ColorCanvas}" ItemsSource="{TemplateBinding CustomColors1ItemsSource}" />
                    </GroupBox>
                    <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" Header="{TemplateBinding CustomColors2Header}" Visibility="{Binding ShowCustomColors2, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                      <ListBox x:Name="PART_Colors2" Style="{StaticResource MyNet.Styles.ListBox.Embedded.ColorCanvas}" ItemsSource="{TemplateBinding CustomColors2ItemsSource}" />
                    </GroupBox>
                  </VirtualizingStackPanel>
                </ctrl:DynamicScrollViewer>
                <!-- Saturation and Value -->
                <ctrl:ColorHSVPicker x:Name="PART_HSVPicker" Grid.Column="2" MinHeight="100" Hue="{Binding Hue, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" Saturation="{Binding Saturation, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding ShowSVPicker, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" />
                <!-- RGBA / HSV -->
                <ctrl:DynamicScrollViewer x:Name="PART_SlidersScrollViewer" Grid.Column="4" ClipToBounds="False">
                  <Grid>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="10" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="10" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <!-- RGB -->
                    <Grid Grid.Row="0" Visibility="{Binding ShowRGB, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <!-- R -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Header="{me:Resource Red}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Embedded.ColorCanvas}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=R}">
                            <Slider.Background>
                              <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.Red}">
                                <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </Slider.Background>
                            <p:SliderAssist.ThumbBackground>
                              <MultiBinding Converter="{x:Static c:RGBAToSolidBrushConverter.Default}">
                                <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                                <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </p:SliderAssist.ThumbBackground>
                          </Slider>
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=R}" />
                        </Grid>
                      </GroupBox>
                      <!-- G -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Grid.Row="2" Header="{me:Resource Green}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Embedded.ColorCanvas}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=G}">
                            <Slider.Background>
                              <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.Green}">
                                <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </Slider.Background>
                            <p:SliderAssist.ThumbBackground>
                              <MultiBinding Converter="{x:Static c:RGBAToSolidBrushConverter.Default}">
                                <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                                <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </p:SliderAssist.ThumbBackground>
                          </Slider>
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=G}" />
                        </Grid>
                      </GroupBox>
                      <!-- B -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Grid.Row="4" Header="{me:Resource Blue}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Embedded.ColorCanvas}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=B}">
                            <Slider.Background>
                              <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.Blue}">
                                <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </Slider.Background>
                            <p:SliderAssist.ThumbBackground>
                              <MultiBinding Converter="{x:Static c:RGBAToSolidBrushConverter.Default}">
                                <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                              </MultiBinding>
                            </p:SliderAssist.ThumbBackground>
                          </Slider>
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=B}" />
                        </Grid>
                      </GroupBox>
                    </Grid>
                    <!-- HSV -->
                    <Grid Grid.Row="2" Visibility="{Binding ShowHSV, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <!-- H -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Header="{me:Resource Hue}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Colors.Hue}" HorizontalAlignment="Stretch" Panel.ZIndex="1" p:SliderAssist.BarSize="13" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Hue}" />
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Maximum="360" Minimum="0" StringFormat="#°" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Hue}" />
                        </Grid>
                      </GroupBox>
                      <!-- S -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Grid.Row="2" Header="{me:Resource Saturation}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Colors.Saturation}" HorizontalAlignment="Stretch" Panel.ZIndex="1" p:SliderAssist.BarSize="13" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Saturation}">
                            <Slider.Background>
                              <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.Saturation}">
                                <Binding Path="Hue" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </Slider.Background>
                            <p:SliderAssist.ThumbBackground>
                              <MultiBinding Converter="{x:Static c:HSVToSolidBrushConverter.Default}">
                                <Binding Path="Hue" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </p:SliderAssist.ThumbBackground>
                          </Slider>
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Interval="0.01" Maximum="1" Minimum="0" StringFormat="P0" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Saturation}" />
                        </Grid>
                      </GroupBox>
                      <!-- V -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Grid.Row="4" Header="{me:Resource Brigthness}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Colors.Value}" HorizontalAlignment="Stretch" Panel.ZIndex="1" p:SliderAssist.BarSize="13" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Value}">
                            <Slider.Background>
                              <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.Value}">
                                <Binding Path="Hue" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Saturation" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </Slider.Background>
                            <p:SliderAssist.ThumbBackground>
                              <MultiBinding Converter="{x:Static c:HSVToSolidBrushConverter.Default}">
                                <Binding Path="Hue" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Saturation" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                              </MultiBinding>
                            </p:SliderAssist.ThumbBackground>
                          </Slider>
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Interval="0.01" Maximum="1" Minimum="0" StringFormat="P0" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Value}" />
                        </Grid>
                      </GroupBox>
                    </Grid>
                    <!-- A -->
                    <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Grid.Row="4" Header="{me:Resource Transparency}" Visibility="{Binding ShowTransparency, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                      <Grid>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="*" />
                          <ColumnDefinition Width="5" />
                          <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Slider Style="{StaticResource MyNet.Styles.Slider.Embedded.ColorCanvas}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=A}">
                          <Slider.Background>
                            <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.Alpha}">
                              <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                          </Slider.Background>
                          <p:SliderAssist.ThumbBackground>
                            <MultiBinding Converter="{x:Static c:RGBAToSolidBrushConverter.Default}">
                              <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                          </p:SliderAssist.ThumbBackground>
                        </Slider>
                        <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=A}" />
                      </Grid>
                    </GroupBox>
                  </Grid>
                </ctrl:DynamicScrollViewer>
              </Grid>
              <!-- Preview -->
              <ctrl:Card x:Name="PART_Preview" Grid.Row="2" Grid.Column="0" Padding="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid>
                  <Border Background="{DynamicResource MyNet.Brushes.Transparency}" />
                  <Border Background="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:ColorToBrushConverter.Default}, Mode=OneWay}" />
                </Grid>
              </ctrl:Card>
              <!-- Name -->
              <TextBox x:Name="PART_Name" Style="{StaticResource MyNet.Styles.TextBox.Outlined}" Grid.Row="2" Grid.Column="1" Width="150" Margin="{StaticResource MyNet.Margins.Default.Left}" Padding="5 2" HorizontalAlignment="Stretch" VerticalContentAlignment="Stretch" p:HintAssist.Hint="{me:Resource Name}" p:HintAssist.IsFloating="True" p:IconAssist.Alignment="Right" IsReadOnly="{TemplateBinding HexaIsReadOnly}" Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ColorName, ValidatesOnExceptions=True}" Visibility="{Binding ShowHexa, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                <p:IconAssist.Icon>
                  <Button Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Command="{x:Static cmd:AppCommands.CopyInClipboardCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Hexa, ValidatesOnExceptions=True, Mode=OneWay}" Content="{me:ToolIcon Kind=ContentCopy}" ToolTip="{me:Resource CopyInClipBoard}" />
                </p:IconAssist.Icon>
              </TextBox>
              <!-- Eye droppper -->
              <ctrl:ColorEyeDropper x:Name="PART_EyeDropper" Grid.Row="2" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Default.Left}" VerticalAlignment="Stretch" SelectedColor="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SelectedColor, TargetNullValue=Transparent}" Visibility="{Binding ShowEyeDropper, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                <Button Style="{StaticResource MyNet.Styles.Button.Filled}" Width="35" Padding="0" VerticalAlignment="Stretch" Content="{me:MediumIcon Kind=Eyedropper}" ToolTip="{me:Resource PickColorOnScreen}" />
              </ctrl:ColorEyeDropper>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ShowCustomColors1" Value="False" />
                <Condition Property="ShowCustomColors2" Value="False" />
                <Condition Property="ShowRecentColors" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ColorsColumn" Property="Width" Value="0" />
              <Setter TargetName="Space1Column" Property="Width" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ShowSVPicker" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="HSVPickerColumn" Property="Width" Value="0" />
              <Setter TargetName="Space1Column" Property="Width" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ShowRGB" Value="False" />
                <Condition Property="ShowHSV" Value="False" />
                <Condition Property="ShowTransparency" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="SlidersColumn" Property="Width" Value="0" />
              <Setter TargetName="Space2Column" Property="Width" Value="0" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorCanvas.Compact" TargetType="{x:Type ctrl:ColorCanvas}" BasedOn="{StaticResource MyNet.Styles.ColorCanvas}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ColorCanvas}">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <Grid Grid.IsSharedSizeScope="True" UseLayoutRounding="True">
              <Grid.RowDefinitions>
                <RowDefinition Height="35" />
                <RowDefinition Height="10" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="10" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <!-- Preview -->
              <ctrl:Card x:Name="PART_Preview" Padding="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid>
                  <Border Background="{DynamicResource MyNet.Brushes.Transparency}" />
                  <Border Background="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:ColorToBrushConverter.Default}, Mode=OneWay}" />
                </Grid>
              </ctrl:Card>
              <!-- Name + Buttons -->
              <DockPanel Grid.Row="2">
                <!-- Buttons -->
                <ctrl:SimpleStackPanel Margin="{StaticResource MyNet.Margins.Medium.Left}" HorizontalAlignment="Right" VerticalAlignment="Center" DockPanel.Dock="Right" Orientation="Horizontal">
                  <!-- Eye droppper -->
                  <ctrl:ColorEyeDropper x:Name="PART_EyeDropper" SelectedColor="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SelectedColor, TargetNullValue=Transparent}" Visibility="{Binding ShowEyeDropper, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                    <Button Style="{StaticResource MyNet.Styles.Button.Icon}" Content="{me:MediumIcon Kind=Eyedropper}" ToolTip="{me:Resource PickColorOnScreen}" />
                  </ctrl:ColorEyeDropper>
                  <RadioButton x:Name="ColorsToggle" Style="{StaticResource MyNet.Styles.ToggleButton.Icon}" Content="{me:MediumIcon Kind=PaletteSwatchVariant}" IsChecked="True" ToolTip="{me:Resource PresetColors}" />
                  <RadioButton x:Name="SlidersToggle" Style="{StaticResource MyNet.Styles.ToggleButton.Icon}" Content="{me:MediumIcon Kind=TuneVariant}" ToolTip="{me:Resource Parameters}" />
                </ctrl:SimpleStackPanel>
                <!-- Name -->
                <TextBox x:Name="PART_Name" Style="{StaticResource MyNet.Styles.TextBox.Outlined}" Padding="5 2" HorizontalAlignment="Stretch" VerticalAlignment="Center" VerticalContentAlignment="Stretch" p:HintAssist.Hint="{me:Resource Name}" p:HintAssist.IsFloating="True" p:IconAssist.Alignment="Right" IsReadOnly="{TemplateBinding HexaIsReadOnly}" Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ColorName, ValidatesOnExceptions=True}" Visibility="{Binding ShowHexa, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                  <p:IconAssist.Icon>
                    <Button Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Command="{x:Static cmd:AppCommands.CopyInClipboardCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Hexa, ValidatesOnExceptions=True, Mode=OneWay}" Content="{me:ToolIcon Kind=ContentCopy}" ToolTip="{me:Resource CopyInClipBoard}" />
                  </p:IconAssist.Icon>
                </TextBox>
              </DockPanel>
              <!-- Custom Colors -->
              <ctrl:DynamicScrollViewer x:Name="PART_ColorsScrollViewer" Grid.Row="4" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" Visibility="{Binding IsChecked, ElementName=ColorsToggle, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                <VirtualizingStackPanel>
                  <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" Header="{me:Resource RecentColors}" Visibility="{Binding ShowRecentColors, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                    <DockPanel>
                      <Button x:Name="PART_AddRecentColorButton" Style="{StaticResource MyNet.Styles.Button.Filled}" Width="18" Height="18" Margin="1" Padding="0" VerticalAlignment="Top" Content="{me:Icon Kind=Plus}" Visibility="{Binding CanAddRecentColor, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                      <ListBox x:Name="PART_RecentColors" Style="{StaticResource MyNet.Styles.ListBox.Embedded.ColorCanvas}" ItemsSource="{TemplateBinding RecentColorsItemsSource}" />
                    </DockPanel>
                  </GroupBox>
                  <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" Header="{TemplateBinding CustomColors1Header}" Visibility="{Binding ShowCustomColors1, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                    <ListBox x:Name="PART_Colors1" Style="{StaticResource MyNet.Styles.ListBox.Embedded.ColorCanvas}" ItemsSource="{TemplateBinding CustomColors1ItemsSource}" />
                  </GroupBox>
                  <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" Header="{TemplateBinding CustomColors2Header}" Visibility="{Binding ShowCustomColors2, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                    <ListBox x:Name="PART_Colors2" Style="{StaticResource MyNet.Styles.ListBox.Embedded.ColorCanvas}" ItemsSource="{TemplateBinding CustomColors2ItemsSource}" />
                  </GroupBox>
                </VirtualizingStackPanel>
              </ctrl:DynamicScrollViewer>
              <!-- Sliders -->
              <Grid Grid.Row="4" Visibility="{Binding IsChecked, ElementName=SlidersToggle, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <!-- Saturation and Value -->
                <ctrl:ColorHSVPicker x:Name="PART_HSVPicker" MinHeight="100" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" Hue="{Binding Hue, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" Saturation="{Binding Saturation, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding ShowSVPicker, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" />
                <!-- RGBA / HSV -->
                <ctrl:DynamicScrollViewer x:Name="PART_SlidersScrollViewer" Grid.Row="1" ClipToBounds="False">
                  <Grid>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="10" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="10" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <!-- RGB -->
                    <Grid Grid.Row="0" Visibility="{Binding ShowRGB, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <!-- R -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Header="{me:Resource Red}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Embedded.ColorCanvas}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=R}">
                            <Slider.Background>
                              <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.Red}">
                                <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </Slider.Background>
                            <p:SliderAssist.ThumbBackground>
                              <MultiBinding Converter="{x:Static c:RGBAToSolidBrushConverter.Default}">
                                <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                                <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </p:SliderAssist.ThumbBackground>
                          </Slider>
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=R}" />
                        </Grid>
                      </GroupBox>
                      <!-- G -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Grid.Row="2" Header="{me:Resource Green}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Embedded.ColorCanvas}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=G}">
                            <Slider.Background>
                              <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.Green}">
                                <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </Slider.Background>
                            <p:SliderAssist.ThumbBackground>
                              <MultiBinding Converter="{x:Static c:RGBAToSolidBrushConverter.Default}">
                                <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                                <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </p:SliderAssist.ThumbBackground>
                          </Slider>
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=G}" />
                        </Grid>
                      </GroupBox>
                      <!-- B -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Grid.Row="4" Header="{me:Resource Blue}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Embedded.ColorCanvas}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=B}">
                            <Slider.Background>
                              <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.Blue}">
                                <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </Slider.Background>
                            <p:SliderAssist.ThumbBackground>
                              <MultiBinding Converter="{x:Static c:RGBAToSolidBrushConverter.Default}">
                                <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                              </MultiBinding>
                            </p:SliderAssist.ThumbBackground>
                          </Slider>
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=B}" />
                        </Grid>
                      </GroupBox>
                    </Grid>
                    <!-- HSV -->
                    <Grid Grid.Row="2" Visibility="{Binding ShowHSV, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <!-- H -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Header="{me:Resource Hue}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Colors.Hue}" HorizontalAlignment="Stretch" Panel.ZIndex="1" p:SliderAssist.BarSize="13" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Hue}" />
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Maximum="360" Minimum="0" StringFormat="#°" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Hue}" />
                        </Grid>
                      </GroupBox>
                      <!-- S -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Grid.Row="2" Header="{me:Resource Saturation}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Colors.Saturation}" HorizontalAlignment="Stretch" Panel.ZIndex="1" p:SliderAssist.BarSize="13" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Saturation}">
                            <Slider.Background>
                              <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.Saturation}">
                                <Binding Path="Hue" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </Slider.Background>
                            <p:SliderAssist.ThumbBackground>
                              <MultiBinding Converter="{x:Static c:HSVToSolidBrushConverter.Default}">
                                <Binding Path="Hue" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </p:SliderAssist.ThumbBackground>
                          </Slider>
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Interval="0.01" Maximum="1" Minimum="0" StringFormat="P0" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Saturation}" />
                        </Grid>
                      </GroupBox>
                      <!-- V -->
                      <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Grid.Row="4" Header="{me:Resource Brigthness}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Slider Style="{StaticResource MyNet.Styles.Slider.Colors.Value}" HorizontalAlignment="Stretch" Panel.ZIndex="1" p:SliderAssist.BarSize="13" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Value}">
                            <Slider.Background>
                              <MultiBinding Converter="{x:Static c:HSVToGradientBrushConverter.Value}">
                                <Binding Path="Hue" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Saturation" RelativeSource="{RelativeSource TemplatedParent}" />
                              </MultiBinding>
                            </Slider.Background>
                            <p:SliderAssist.ThumbBackground>
                              <MultiBinding Converter="{x:Static c:HSVToSolidBrushConverter.Default}">
                                <Binding Path="Hue" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Saturation" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                              </MultiBinding>
                            </p:SliderAssist.ThumbBackground>
                          </Slider>
                          <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Interval="0.01" Maximum="1" Minimum="0" StringFormat="P0" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Value}" />
                        </Grid>
                      </GroupBox>
                    </Grid>
                    <!-- A -->
                    <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Embedded.ColorCanvas}" Grid.Row="4" Header="{me:Resource Transparency}" Visibility="{Binding ShowTransparency, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                      <Grid>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="*" />
                          <ColumnDefinition Width="5" />
                          <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Slider Style="{StaticResource MyNet.Styles.Slider.Embedded.ColorCanvas}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=A}">
                          <Slider.Background>
                            <MultiBinding Converter="{x:Static c:RGBAToGradientBrushConverter.Alpha}">
                              <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                          </Slider.Background>
                          <p:SliderAssist.ThumbBackground>
                            <MultiBinding Converter="{x:Static c:RGBAToSolidBrushConverter.Default}">
                              <Binding Path="R" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding Path="G" RelativeSource="{RelativeSource TemplatedParent}" />
                              <Binding Path="B" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                          </p:SliderAssist.ThumbBackground>
                        </Slider>
                        <ctrl:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Embedded.ColorCanvas}" Grid.Column="2" Visibility="{Binding ShowNumericValues, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=A}" />
                      </Grid>
                    </GroupBox>
                  </Grid>
                </ctrl:DynamicScrollViewer>
              </Grid>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyNet.Styles.ListBox.Embedded.ColorPicker" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.Cards}">
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem.Card}">
          <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Transparency.Small}" />
          <Setter Property="Height" Value="18" />
          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
          <Setter Property="Margin" Value="1.5" />
          <Setter Property="Padding" Value="0" />
          <Setter Property="ToolTip" Value="{me:Translation}" />
          <Setter Property="VerticalContentAlignment" Value="Stretch" />
          <Setter Property="Width" Value="18" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Converter={x:Static c:ColorToBrushConverter.Default}}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:ScrollViewerAssist.BubbleVerticalScroll" Value="True" />
  </Style>
  <ControlTemplate x:Key="MyNet.Templates.ColorPicker" TargetType="{x:Type ctrl:ColorPicker}">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Focused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" From="0" To="1" Duration="0:0:0.3">
                <DoubleAnimation.EasingFunction>
                  <SineEase EasingMode="EaseOut" />
                </DoubleAnimation.EasingFunction>
              </DoubleAnimation>
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation BeginTime="0:0:0.45" Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unfocused">
            <Storyboard TargetName="RippleOnFocusScaleTransform">
              <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
              <DoubleAnimation Storyboard.TargetProperty="ScaleY" To="0" Duration="0" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <AdornerDecorator>
        <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
          <Grid>
            <!-- Mouse Over -->
            <Border x:Name="mouseOver" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Focus -->
            <Border x:Name="focus" Background="{Binding Path=(p:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" />
            <!-- Ripple on focus -->
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Path=(p:ThemeAssist.IsMouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5,0.5" Visibility="{Binding Path=(p:TextFieldAssist.RippleOnFocusEnabled), Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}, RelativeSource={RelativeSource TemplatedParent}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!-- Icon -->
              <ContentControl x:Name="Icon" Grid.Column="0" Margin="{Binding Path=(p:IconAssist.Margin), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Content="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding Path=(p:IconAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(p:IconAssist.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
                <ContentControl.Resources>
                  <Style TargetType="{x:Type ctrl:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                  <Style TargetType="{x:Type ctrl:GeometryIcon}" BasedOn="{StaticResource MyNet.Styles.GeometryIcon}">
                    <Setter Property="Height" Value="20" />
                    <Setter Property="Width" Value="20" />
                  </Style>
                </ContentControl.Resources>
              </ContentControl>
              <Grid Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <!-- Content -->
                <Grid x:Name="grid" MinWidth="1" MinHeight="18">
                  <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Prefix -->
                    <TextBlock x:Name="PrefixTextBlock" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.PrefixText}">
                      <TextBlock.Visibility>
                        <MultiBinding Converter="{x:Static c:TextFieldPrefixTextVisibilityConverter.Default}">
                          <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                          <Binding Path="(p:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="(p:HintAssist.Hint)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextBlock.Visibility>
                    </TextBlock>
                    <!-- Preview -->
                    <ContentControl Grid.Column="1" Content="{TemplateBinding SelectedColor}" ContentTemplate="{TemplateBinding SelectedColorTemplate}" />
                    <!-- Host Text -->
                    <TextBox x:Name="PART_TextBox" Style="{StaticResource MyNet.Styles.TextBox.Embedded}" Grid.Column="2" HorizontalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="Center" CaretBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" SelectionBrush="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Text="{Binding ColorName, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                    <!-- Suffix -->
                    <TextBlock x:Name="SuffixTextBlock" Grid.Column="3" Margin="{StaticResource MyNet.Margins.Small.Horizontal}" FontSize="{TemplateBinding FontSize}" Opacity="{TemplateBinding p:HintAssist.HintOpacity}" Text="{TemplateBinding p:TextFieldAssist.SuffixText}" />
                  </Grid>
                  <!-- SmartHint -->
                  <ctrl:SmartHint x:Name="Hint" Grid.Column="0" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                    <ctrl:SmartHint.Hint>
                      <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                        <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                      </Border>
                    </ctrl:SmartHint.Hint>
                  </ctrl:SmartHint>
                </Grid>
              </Grid>
              <!-- Calendar button -->
              <Button x:Name="PART_Button" Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Grid.Column="3" Content="{me:Icon Kind=Palette}" />
              <!-- Clear button -->
              <Button x:Name="PART_ClearButton" Style="{Binding Path=(p:TextFieldAssist.ButtonStyle), RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="2" VerticalAlignment="Stretch" p:ThemeAssist.CornerRadius="0" Command="{x:Static p:TextFieldAssist.ClearCommand}" Content="{me:Icon Kind=Close,                                                       Size=16}" ToolTip="{me:Resource Clear}">
                <Button.Visibility>
                  <MultiBinding Converter="{x:Static c:TextFieldClearButtonVisibilityConverter.Default}">
                    <Binding Path="(p:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                  </MultiBinding>
                </Button.Visibility>
              </Button>
            </Grid>
          </Grid>
        </Border>
      </AdornerDecorator>
      <!-- Underline -->
      <ctrl:Underline x:Name="Underline" Background="{TemplateBinding p:TextFieldAssist.UnderlineBrush}" Visibility="{TemplateBinding p:TextFieldAssist.DecorationVisibility}" />
      <!-- Helper text -->
      <Canvas VerticalAlignment="Bottom">
        <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
      </Canvas>
      <!-- Errors -->
      <Canvas x:Name="Errors" VerticalAlignment="Bottom" Visibility="{Binding Errors.Count, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:CountToVisibilityConverter.CollapsedIfNotAny}}">
        <Grid Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
          <ItemsControl ItemsSource="{TemplateBinding Errors}">
            <ItemsControl.ItemTemplate>
              <DataTemplate>
                <TextBlock FontSize="{StaticResource MyNet.Font.Size.Secondary}" Foreground="{DynamicResource MyNet.Brushes.Validation.Error}" Text="{Binding}" TextWrapping="Wrap" />
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ItemsControl>
        </Grid>
      </Canvas>
      <!-- Popup -->
      <ctrl:PopupEx x:Name="PART_Popup" AllowsTransparency="True" HorizontalOffset="-16" Placement="Bottom" PlacementTarget="{Binding ElementName=border}" PopupAnimation="Slide" StaysOpen="False" VerticalOffset="-5">
        <Grid>
          <Border Background="White" Opacity="0.002" />
          <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" Width="{TemplateBinding DropDownWidth}" Height="{TemplateBinding DropDownHeight}" Margin="16 8 16 24" Padding="{StaticResource MyNet.Margins.Medium}" Background="{TemplateBinding p:PopupAssist.Background}" Foreground="{TemplateBinding p:PopupAssist.Foreground}">
            <ctrl:ColorCanvas x:Name="PART_ColorCanvas" Style="{StaticResource MyNet.Styles.ColorCanvas.Compact}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" CanAddRecentColor="{TemplateBinding CanAddRecentColor}" CustomColors1Header="{TemplateBinding CustomColors1Header}" CustomColors1ItemsSource="{TemplateBinding CustomColors1ItemsSource}" CustomColors2Header="{TemplateBinding CustomColors2Header}" CustomColors2ItemsSource="{TemplateBinding CustomColors2ItemsSource}" DisplayNameMode="{TemplateBinding DisplayNameMode}" HexaIsReadOnly="{TemplateBinding HexaIsReadOnly}" RecentColorsItemsSource="{TemplateBinding RecentColorsItemsSource}" SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" ShowCustomColors1="{TemplateBinding ShowCustomColors1}" ShowCustomColors2="{TemplateBinding ShowCustomColors2}" ShowEyeDropper="{TemplateBinding ShowEyeDropper}" ShowHSV="{TemplateBinding ShowHSV}" ShowHexa="{TemplateBinding ShowHexa}" ShowNumericValues="{TemplateBinding ShowNumericValues}" ShowRGB="{TemplateBinding ShowRGB}" ShowRecentColors="{TemplateBinding ShowRecentColors}" ShowSVPicker="{TemplateBinding ShowSVPicker}" ShowTransparency="{TemplateBinding ShowTransparency}" />
          </ctrl:Card>
        </Grid>
      </ctrl:PopupEx>
    </Grid>
    <ControlTemplate.Triggers>
      <!-- Icon Alignment -->
      <Trigger Property="p:IconAssist.Alignment" Value="Right">
        <Setter TargetName="Icon" Property="Grid.Column" Value="4" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Bottom">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="p:IconAssist.Alignment" Value="Top">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <!-- Hint -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(p:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
      </MultiTrigger>
      <Trigger Property="p:HintAssist.IsFloating" Value="True">
        <Setter TargetName="Hint" Property="FloatingOffset">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="grid" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="p:HintAssist.IsFloating" Value="True" />
          <Condition Property="p:TextFieldAssist.IsEditable" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_Button" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_ClearButton" Property="Margin">
          <Setter.Value>
            <MultiBinding Converter="{x:Static c:FloatingHintOffsetCalculationConverter.Default}">
              <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
              <Binding Path="(p:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </MultiTrigger>
      <!-- IsMouseOver -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="mouseOver" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <!-- IsKeyboardFocused -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
      </MultiTrigger>
      <!-- IsDropDownOpen -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="focus" Property="Visibility" Value="Visible" />
        <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
        <Setter TargetName="PART_Button" Property="Foreground" Value="{Binding Path=(p:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
        <Setter TargetName="Underline" Property="IsActive" Value="True" />
      </MultiTrigger>
      <!-- Validation.HasError -->
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="Errors" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <Trigger Property="HasErrors" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
        <Setter TargetName="PART_Button" Property="Opacity" Value="1" />
        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
      </Trigger>
      <!-- IsEnabled -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        <Setter TargetName="PART_ClearButton" Property="Opacity" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False" />
          <Condition Property="ctrl:BottomDashedLineAdorner.IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="True" />
      </MultiTrigger>
      <!-- IsReadOnly -->
      <Trigger Property="p:TextFieldAssist.IsReadOnly" Value="True">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Opacity" Value="1" />
        <Setter TargetName="PART_Button" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
        <Setter TargetName="border" Property="Opacity" Value="1" />
        <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
        <Setter TargetName="grid" Property="Opacity" Value="1" />
      </Trigger>
      <!-- IsEditable -->
      <Trigger Property="p:TextFieldAssist.IsEditable" Value="False">
        <Setter TargetName="PART_Button" Property="Content" Value="" />
        <Setter TargetName="PART_Button" Property="Grid.Column" Value="1" />
        <Setter TargetName="PART_Button" Property="Grid.ColumnSpan" Value="4" />
        <Setter TargetName="PART_Button" Property="Height" Value="Auto" />
        <Setter TargetName="PART_Button" Property="HorizontalAlignment" Value="Stretch" />
        <Setter TargetName="PART_Button" Property="Style" Value="{StaticResource MyNet.Styles.Button.Embedded.ColorPicker}" />
        <Setter TargetName="PART_Button" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="PART_Button" Property="Width" Value="Auto" />
        <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
        <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MyNet.Styles.ColorPicker" TargetType="{x:Type ctrl:ColorPicker}">
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
    <Setter Property="ContextMenu" Value="{StaticResource MyNet.ContextMenu.Text}" />
    <Setter Property="CustomColors1Header" Value="{me:Resource StandardColors}" />
    <Setter Property="CustomColors1ItemsSource" Value="{x:Static media:ColorPalettes.StandardColorsPalette}" />
    <Setter Property="CustomColors2Header" Value="{me:Resource AvailableColors}" />
    <Setter Property="CustomColors2ItemsSource" Value="{x:Static media:ColorPalettes.AvailableColorsPalette}" />
    <Setter Property="DropDownHeight" Value="430" />
    <Setter Property="DropDownWidth" Value="270" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="SelectedColorTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid Width="14" Height="14" VerticalAlignment="Center" Visibility="{Binding Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}">
            <Border Margin="2" Background="{DynamicResource MyNet.Brushes.Transparency.Small}" CornerRadius="2" Effect="{StaticResource MyNet.Shadows.Elevation1}">
              <Border Background="{Binding Converter={x:Static c:ColorToBrushConverter.Default}}" CornerRadius="2" />
            </Border>
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ShowRGB" Value="False" />
    <Setter Property="ShowSVPicker" Value="True" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource MyNet.Templates.ColorPicker}" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MyNet.Templates.Validation}" />
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
    <Setter Property="p:HintAssist.HelperTextForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:HintAssist.HelperTextStyle" Value="{StaticResource MyNet.Styles.TextBlock.Embedded.TextBox.HelperText}" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle" Value="{StaticResource MyNet.Styles.Button.Icon.Tool}" />
    <Setter Property="p:TextFieldAssist.HandlesClearCommand" Value="True" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="1" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border.Secondary}" />
    <Setter Property="p:ValidationAssist.Background" Value="Transparent" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.Foreground" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.Filled" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.Filled.Foreground" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.Filled.Alternate" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.Filled}">
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control.Top}" />
    <Setter Property="BorderThickness" Value="0 0 0 1" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.Filled.Alternate.Foreground" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.Filled.Alternate}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.Outlined" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.Outlined.Foreground" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.DropDown" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker}">
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:TextFieldAssist.IsEditable" Value="False" />
    <Setter Property="p:TextFieldAssist.TextBoxViewMargin" Value="{StaticResource MyNet.Paddings.TextField.Default}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.DropDown.Foreground" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.DropDown}">
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.DropDown.Filled" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.DropDown}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="p:TextFieldAssist.ButtonStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MyNet.Styles.Button.Text.Foreground}">
          <Setter Property="Padding" Value="3 0" />
          <Setter Property="Focusable" Value="False" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="p:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Focused}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.DropDown.Filled.Foreground" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.DropDown.Filled}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.DropDown.Outlined" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.DropDown.Filled}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="ctrl:BottomDashedLineAdorner.IsActive" Value="False" />
    <Setter Property="p:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
    <Setter Property="p:ThemeAssist.CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=(p:TextFieldAssist.UnderlineBrush)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.DropDown.Outlined.Foreground" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.DropDown.Outlined}">
    <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
    <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
    <Setter Property="p:ThemeAssist.IsMouseOverBorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Medium}}" />
  </Style>
  <Style x:Key="MyNet.Styles.CommandsBar" TargetType="{x:Type ctrl:CommandsBar}" BasedOn="{StaticResource {x:Type ContentControl}}">
    <Style.Resources>
      <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.Text}" />
      <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Text}" />
      <Style TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Text}" />
    </Style.Resources>
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:CommandsBar}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentControl Margin="{StaticResource MyNet.Margins.Medium.Right}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding LeftCommands}" Visibility="{Binding LeftCommands, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            <ContentPresenter Grid.Column="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            <ContentControl Grid.Column="2" Margin="{StaticResource MyNet.Margins.Medium.Left}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding RightCommands}" Visibility="{Binding RightCommands, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.Embedded.DataGrid.Edition" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.Foreground}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="-1 0 -1 -2" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="p:ValidationAssist.UsePopup" Value="True" />
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.Embedded.ListView" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
        <Setter Property="BorderBrush" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Border}}" />
        <Setter Property="p:HintAssist.Foreground" Value="{me:BrushBinding SelfPath=Foreground}" />
        <Setter Property="p:TextFieldAssist.UnderlineBrush" Value="{me:BrushBinding SelfPath=Foreground}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ColorPicker.ToolBar" TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker}">
    <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="{Binding Path=(p:ToolTipAssist.PlacementMode), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
  </Style>
  <Style x:Key="MyNet.Styles.ToolBar" TargetType="{x:Type ToolBar}">
    <Style.Resources>
      <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" />
      <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.ToolBar}" />
      <Style TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.ToolBar}" />
      <Style TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.ToolBar}" />
      <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.ToolBar}" />
      <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.ToolBar}" />
      <Style TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.ToolBar}" />
      <Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MyNet.Styles.DatePicker.ToolBar}" />
      <Style TargetType="{x:Type ctrl:TimePicker}" BasedOn="{StaticResource MyNet.Styles.TimePicker.ToolBar}" />
      <Style TargetType="{x:Type ctrl:ColorPicker}" BasedOn="{StaticResource MyNet.Styles.ColorPicker.ToolBar}" />
      <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MyNet.Styles.TextBox.ToolBar}" />
      <Style TargetType="{x:Type ctrl:NumericUpDown}" BasedOn="{StaticResource MyNet.Styles.NumericUpDown.ToolBar}" />
      <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MyNet.Styles.GroupBox.ToolBar}" />
      <Style TargetType="{x:Type ctrl:Badged}" BasedOn="{StaticResource MyNet.Styles.Badged.ToolBar}" />
      <Style TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.ToolBar}" />
      <Style TargetType="{x:Type Separator}" BasedOn="{StaticResource MyNet.Styles.Separator.Vertical}" />
    </Style.Resources>
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Light}" />
    <Setter Property="ClipToBounds" Value="False" />
    <Setter Property="FocusManager.IsFocusScope" Value="False" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
    <Setter Property="MinHeight" Value="54" />
    <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Small}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
          <ctrl:Card Padding="0" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipContent="False" Foreground="{TemplateBinding Foreground}" UniformCornerRadius="{TemplateBinding p:ThemeAssist.UniformCornerRadius}">
            <DockPanel x:Name="Grid">
              <Grid x:Name="OverflowGrid" HorizontalAlignment="Right" DockPanel.Dock="Right">
                <ToggleButton x:Name="OverflowButton" Style="{StaticResource MyNet.Styles.ToggleButton.Embedded.ToolBar.Overflow.Horizontal}" Background="{TemplateBinding Background}" ClickMode="Press" FocusVisualStyle="{x:Null}" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HasOverflowItems, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                <Popup x:Name="OverflowPopup" Margin="1" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" StaysOpen="false">
                  <Popup.CacheMode>
                    <BitmapCache EnableClearType="True" />
                  </Popup.CacheMode>
                  <Grid>
                    <Border Background="White" Opacity="0.002" />
                    <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" Background="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource Mode=TemplatedParent}}" Foreground="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                      <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2" FocusVisualStyle="{x:Null}" Focusable="true" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" WrapWidth="200" />
                    </ctrl:Card>
                  </Grid>
                </Popup>
              </Grid>
              <Border x:Name="MainPanelBorder" Padding="{TemplateBinding Padding}">
                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                  <Thumb x:Name="ToolBarThumb" Style="{StaticResource MyNet.Styles.Thumb.Embedded.ToolBar}" Width="10" Margin="-3 -1 4 0" Padding="6 5 1 3" />
                  <ContentPresenter x:Name="ToolBarHeader" Margin="4 0 4 0" HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Header" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  <ToolBarPanel x:Name="PART_ToolBarPanel" Margin="0 0 2 0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </DockPanel>
              </Border>
            </DockPanel>
          </ctrl:Card>
          <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen" Value="true">
              <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
            </Trigger>
            <Trigger Property="Header" Value="{x:Null}">
              <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="true">
              <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
              <Setter TargetName="Grid" Property="Margin" Value="1 3 1 1" />
              <Setter TargetName="MainPanelBorder" Property="Margin" Value="0 0 0 11" />
              <Setter TargetName="OverflowButton" Property="Style" Value="{StaticResource MyNet.Styles.ToggleButton.Embedded.ToolBar.Overflow.Vertical}" />
              <Setter TargetName="OverflowGrid" Property="HorizontalAlignment" Value="Stretch" />
              <Setter TargetName="OverflowGrid" Property="VerticalAlignment" Value="Bottom" />
              <Setter TargetName="OverflowPopup" Property="Placement" Value="Right" />
              <Setter TargetName="PART_ToolBarPanel" Property="Margin" Value="1 0 2 2" />
              <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="ToolBarHeader" Property="Margin" Value="0 0 0 4" />
              <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="ToolBarThumb" Property="Height" Value="10" />
              <Setter TargetName="ToolBarThumb" Property="Margin" Value="-1 -3 0 0" />
              <Setter TargetName="ToolBarThumb" Property="Padding" Value="5 6 6 1" />
              <Setter TargetName="ToolBarThumb" Property="Width" Value="Auto" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ToolBarTray.IsLocked" Value="true" />
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="p:ElevationAssist.Elevation" Value="{StaticResource MyNet.Elevation.Container}" />
    <Setter Property="p:IconAssist.Alignment" Value="Top" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Bottom}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:LayoutAssist.InnerMargin" Value="{StaticResource MyNet.Margins.Small}" />
    <Setter Property="p:LayoutAssist.InnerPadding" Value="2 5" />
    <Setter Property="p:PopupAssist.Background" Value="{DynamicResource MyNet.Brushes.Popup.Background}" />
    <Setter Property="p:PopupAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
    <Setter Property="p:ThemeAssist.UniformCornerRadius" Value="{StaticResource MyNet.UniformCornerRadius.Container}" />
    <Setter Property="p:ToolTipAssist.PlacementMode" Value="BottomAndAlignCentres" />
  </Style>
  <Style x:Key="MyNet.Styles.ToolBar.Transparent" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource MyNet.Styles.ToolBar}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Setter Property="p:IconAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
    <Setter Property="p:LayoutAssist.InnerMargin" Value="2 0" />
    <Setter Property="p:LayoutAssist.InnerPadding" Value="11 5" />
  </Style>
  <Style x:Key="MyNet.Styles.ToolBar.Tools" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource MyNet.Styles.ToolBar.Transparent}">
    <Setter Property="p:LayoutAssist.InnerMargin" Value="0" />
    <Setter Property="p:LayoutAssist.InnerPadding" Value="{StaticResource MyNet.Margins.Small}" />
    <Style.Resources>
      <Style TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon.Foreground}">
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
      </Style>
      <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}">
        <Setter Property="Margin" Value="{Binding Path=(p:LayoutAssist.InnerMargin), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
        <Setter Property="Padding" Value="{Binding Path=(p:LayoutAssist.InnerPadding), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" />
      </Style>
    </Style.Resources>
  </Style>
  <Style x:Key="MyNet.Styles.ToolBar.FileMenu" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource MyNet.Styles.ToolBar}">
    <Style.Resources>
      <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}">
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
        <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
      </Style>
      <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.ToolBar}">
        <Setter Property="Foreground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="p:ThemeAssist.CornerRadius" Value="0" />
        <Setter Property="p:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ThemeAssist.IsCheckedBorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="p:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
        <Setter Property="p:ThemeAssist.IsMouseOverForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
      </Style>
      <Style TargetType="{x:Type Separator}" BasedOn="{StaticResource MyNet.Styles.Separator.Horizontal}" />
    </Style.Resources>
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent.Dark}" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Dark.Foreground}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Large.Right}" />
    <Setter Property="p:LayoutAssist.InnerMargin" Value="0 1" />
    <Setter Property="p:LayoutAssist.InnerPadding" Value="20 10" />
  </Style>
  <Style x:Key="MyNet.Styles.RichTextEditor" TargetType="{x:Type ctrl:RichTextEditor}" BasedOn="{StaticResource MyNet.Styles.TextBox.Outlined}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:RichTextEditor}">
          <Border>
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <ToolBar x:Name="PART_ScrollBar" Style="{StaticResource MyNet.Styles.ToolBar}" Height="35" MinHeight="35" p:ElevationAssist.Elevation="Dp0" p:ThemeAssist.UniformCornerRadius="0" BorderBrush="{DynamicResource MyNet.Brushes.Control.Border}" BorderThickness="1 1 1 0">
                <Button MinWidth="30" Command="EditingCommands.ToggleBold" Content="{me:ToolIcon Kind=FormatBold}" ToolTip="{me:ShortcutResource Bold,                                                                       ShortcutKey='Ctrl+B'}" />
                <Button MinWidth="30" Command="EditingCommands.ToggleItalic" Content="{me:ToolIcon Kind=FormatItalic}" ToolTip="{me:ShortcutResource Italic,                                                                       ShortcutKey='Ctrl+I'}" />
                <Button MinWidth="30" Command="EditingCommands.ToggleUnderline" Content="{me:ToolIcon Kind=FormatUnderline}" ToolTip="{me:ShortcutResource Underline,                                                                       ShortcutKey='Ctrl+U'}" />
                <Separator />
                <ComboBox x:Name="PART_FontSizeComboBox" Style="{StaticResource MyNet.Styles.ComboBox.Numeric}" Width="60" p:TextFieldAssist.NextButtonContent="{StaticResource MyNet.Icons.Plus.Tool}" p:TextFieldAssist.PreviousButtonContent="{StaticResource MyNet.Icons.Minus.Tool}" />
                <Button MinWidth="25" Command="EditingCommands.DecreaseFontSize" Content="{me:ToolIcon Kind=FormatFontSizeDecrease}" ToolTip="{me:ShortcutResource DecreaseFontSize,                                                                       ShortcutKey='Ctrl+OemOpenBrackets'}" />
                <Button MinWidth="25" Command="EditingCommands.IncreaseFontSize" Content="{me:ToolIcon Kind=FormatFontSizeIncrease}" ToolTip="{me:ShortcutResource IncreaseFontSize,                                                                       ShortcutKey='Ctrl+OemCloseBrackets'}" />
                <Separator />
                <ctrl:DropDownButton PopupPadding="0" ToggleContent="{me:ToolIcon Kind=FormatFont}" ToolTip="{me:Resource FontFamily}">
                  <ctrl:Submenu x:Name="PART_FontFamilyMenu" MaxHeight="300">
                    <ctrl:Submenu.ItemContainerStyle>
                      <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MyNet.Styles.MenuItem}">
                        <Setter Property="FontFamily" Value="{Binding}" />
                        <Setter Property="ToolTip" Value="{Binding Header, RelativeSource={RelativeSource Self}}" />
                      </Style>
                    </ctrl:Submenu.ItemContainerStyle>
                  </ctrl:Submenu>
                </ctrl:DropDownButton>
                <ctrl:DropDownButton PopupPadding="0" ToggleContent="{me:ToolIcon Kind=FormatColorHighlight}" ToolTip="{me:Resource Foreground}">
                  <ctrl:Submenu x:Name="PART_ColorMenu" MaxHeight="300">
                    <ctrl:Submenu.ItemContainerStyle>
                      <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MyNet.Styles.MenuItem}">
                        <Setter Property="Header" Value="{Binding}" />
                        <Setter Property="HeaderTemplate">
                          <Setter.Value>
                            <DataTemplate>
                              <ctrl:SimpleStackPanel Orientation="Horizontal">
                                <Border Width="14" Height="14" Margin="2" Background="{Binding Item}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}" Effect="{StaticResource MyNet.Shadows.Elevation1}" />
                                <TextBlock Text="{Binding DisplayName.Value}" />
                              </ctrl:SimpleStackPanel>
                            </DataTemplate>
                          </Setter.Value>
                        </Setter>
                      </Style>
                    </ctrl:Submenu.ItemContainerStyle>
                  </ctrl:Submenu>
                </ctrl:DropDownButton>
                <Separator />
                <Button MinWidth="30" Command="EditingCommands.AlignLeft" Content="{me:ToolIcon Kind=FormatAlignLeft}" ToolTip="{me:ShortcutResource AlignLeft,                                                                       ShortcutKey='Ctrl+L'}" />
                <Button MinWidth="30" Command="EditingCommands.AlignCenter" Content="{me:ToolIcon Kind=FormatAlignCenter}" ToolTip="{me:ShortcutResource AlignCenter,                                                                       ShortcutKey='Ctrl+E'}" />
                <Button MinWidth="30" Command="EditingCommands.AlignRight" Content="{me:ToolIcon Kind=FormatAlignRight}" ToolTip="{me:ShortcutResource AlignRight,                                                                       ShortcutKey='Ctrl+R'}" />
                <Button MinWidth="30" Command="EditingCommands.AlignJustify" Content="{me:ToolIcon Kind=FormatAlignJustify}" ToolTip="{me:ShortcutResource AlignJustify,                                                                       ShortcutKey='Ctrl+J'}" />
                <Button MinWidth="25" Command="EditingCommands.DecreaseIndentation" Content="{me:ToolIcon Kind=FormatIndentDecrease}" ToolTip="{me:ShortcutResource DecreaseIndentation,                                                                       ShortcutKey='Ctrl+Shift+T'}" />
                <Button MinWidth="30" Command="EditingCommands.IncreaseIndentation" Content="{me:ToolIcon Kind=FormatIndentIncrease}" ToolTip="{me:ShortcutResource IncreaseIndentation,                                                                       ShortcutKey='Ctrl+T'}" />
                <Separator />
                <Button MinWidth="30" Command="EditingCommands.ToggleBullets" Content="{me:ToolIcon Kind=FormatListBulleted}" ToolTip="{me:ShortcutResource Bullets,                                                                       ShortcutKey='Ctrl+Shift+L'}" />
                <Button MinWidth="25" Command="EditingCommands.ToggleNumbering" Content="{me:ToolIcon Kind=FormatListNumbered}" ToolTip="{me:ShortcutResource Numbering,                                                                       ShortcutKey='Ctrl+Shift+N'}" />
                <Separator />
              </ToolBar>
              <Grid Grid.Row="1">
                <AdornerDecorator>
                  <Border x:Name="border" ctrl:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}" ctrl:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(p:ThemeAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True">
                    <Grid x:Name="grid" MinWidth="1" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                      <ctrl:DynamicScrollViewer x:Name="PART_ContentHost" Panel.ZIndex="1" p:ScrollViewerAssist.IgnorePadding="True" Focusable="false" HorizontalScrollBarVisibility="Hidden" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalScrollBarVisibility="Hidden" />
                      <ctrl:SmartHint x:Name="Hint" Margin="{TemplateBinding p:TextFieldAssist.TextBoxViewMargin}" FloatingOffset="{TemplateBinding p:HintAssist.FloatingOffset}" FloatingScale="{TemplateBinding p:HintAssist.FloatingScale}" FontFamily="{TemplateBinding p:HintAssist.FontFamily}" FontSize="{TemplateBinding FontSize}" HintOpacity="{TemplateBinding p:HintAssist.HintOpacity}" HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:HintProxyFabricConverter.Default}}" UseFloating="{TemplateBinding p:HintAssist.IsFloating}">
                        <ctrl:SmartHint.Hint>
                          <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding p:HintAssist.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Control}">
                            <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding p:HintAssist.Hint}" />
                          </Border>
                        </ctrl:SmartHint.Hint>
                      </ctrl:SmartHint>
                    </Grid>
                  </Border>
                </AdornerDecorator>
                <!-- Helper text -->
                <Canvas VerticalAlignment="Bottom">
                  <Grid x:Name="FooterGrid" Canvas.Top="2" Width="{Binding ActualWidth, ElementName=border}">
                    <TextBlock x:Name="HelperTextTextBlock" Style="{Binding Path=(p:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
                  </Grid>
                </Canvas>
              </Grid>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <!-- IsKeyboardFocused -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsCheckedBorderBrush), RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <!-- IsMouseOver -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsKeyboardFocused" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" Value="{Binding Path=(p:ThemeAssist.IsMouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <!-- Validation.HasError -->
            <Trigger Property="Validation.HasError" Value="true">
              <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Validation.Error}" />
              <Setter TargetName="FooterGrid" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <!-- IsEnabled -->
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <!-- IsReadOnly -->
            <Trigger Property="IsReadOnly" Value="True">
              <Setter Property="Opacity" Value="1" />
              <Setter TargetName="border" Property="Opacity" Value="1" />
              <Setter TargetName="border" Property="ctrl:BottomDashedLineAdorner.IsAttached" Value="False" />
              <Setter TargetName="grid" Property="Opacity" Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
  </Style>
  <Style x:Key="MyNet.Styles.SelectionCommandsBar" TargetType="{x:Type ctrl:SelectionCommandsBar}" BasedOn="{StaticResource MyNet.Styles.ToolBar}">
    <Style.Resources>
      <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}">
        <Setter Property="Margin" Value="2 0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Padding" Value="8 3" />
      </Style>
      <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.ToolBar}">
        <Setter Property="Margin" Value="2 0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Padding" Value="8 3" />
      </Style>
      <Style TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.ToolBar}">
        <Setter Property="Margin" Value="2 0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Padding" Value="8 3" />
      </Style>
      <Style TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.ToolBar}">
        <Setter Property="Margin" Value="2 0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Padding" Value="8 3" />
      </Style>
      <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.ToolBar}">
        <Setter Property="Margin" Value="2 0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Padding" Value="8 3" />
      </Style>
      <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.ToolBar}" />
      <Style TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.ToolBar}">
        <Setter Property="Margin" Value="2 0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Padding" Value="8 3" />
      </Style>
      <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}">
        <Setter Property="Margin" Value="2 0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Padding" Value="8 3" />
      </Style>
      <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.ToolBar}">
        <Setter Property="Margin" Value="2 0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Padding" Value="8 3" />
      </Style>
    </Style.Resources>
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="Padding" Value="10 5 10 5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:SelectionCommandsBar}">
          <ctrl:Card Padding="{TemplateBinding Padding}" p:ElevationAssist.Elevation="{TemplateBinding p:ElevationAssist.Elevation}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipContent="False" Foreground="{TemplateBinding Foreground}" UniformCornerRadius="{TemplateBinding p:ThemeAssist.UniformCornerRadius}">
            <Grid KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="115" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" MinWidth="30" />
                <ColumnDefinition Width="115" />
              </Grid.ColumnDefinitions>
              <Thumb x:Name="ToolBarThumb" Style="{StaticResource MyNet.Styles.Thumb.Embedded.ToolBar}" Width="10" Margin="-3 -1 4 0" Padding="6 5 1 3" />
              <ctrl:SimpleStackPanel Grid.Column="1" VerticalAlignment="Center" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}" TextBlock.FontWeight="SemiBold" TextBlock.Foreground="{DynamicResource MyNet.Brushes.Primary}">
                <ctrl:PackIcon Kind="Check" />
                <TextBlock Text="{me:Translation Path=SelectedCount, RelativeSource={RelativeSource TemplatedParent}, Format=XSelected, Pluralize=True}" Typography.Capitals="AllSmallCaps" />
              </ctrl:SimpleStackPanel>
              <!-- Header -->
              <ContentPresenter x:Name="ToolBarHeader" Grid.Column="2" Margin="{StaticResource MyNet.Margins.Default.Right}" HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Header" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              <!-- Content -->
              <Grid Grid.Column="3" HorizontalAlignment="Center">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <ToolBarPanel x:Name="PART_ToolBarPanel" Grid.Column="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <!-- Overflow -->
                <Grid x:Name="OverflowGrid" Grid.Column="1">
                  <ToggleButton x:Name="OverflowButton" Style="{StaticResource MyNet.Styles.Button.Icon}" Background="{TemplateBinding Background}" ClickMode="Press" Content="{me:ToolIcon Kind=DotsHorizontal}" FocusVisualStyle="{x:Null}" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HasOverflowItems, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                  <Popup x:Name="OverflowPopup" Margin="1" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" StaysOpen="false">
                    <Popup.CacheMode>
                      <BitmapCache EnableClearType="True" />
                    </Popup.CacheMode>
                    <Grid>
                      <Border Background="White" Opacity="0.002" />
                      <ctrl:Card Style="{StaticResource MyNet.Styles.Card.Popup}" Background="{Binding Path=(p:PopupAssist.Background), RelativeSource={RelativeSource Mode=TemplatedParent}}" Foreground="{Binding Path=(p:PopupAssist.Foreground), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2" FocusVisualStyle="{x:Null}" Focusable="true" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" WrapWidth="150" />
                      </ctrl:Card>
                    </Grid>
                  </Popup>
                </Grid>
              </Grid>
              <!-- Unselect all -->
              <Button Style="{StaticResource MyNet.Styles.Button.Icon}" Grid.Column="4" HorizontalAlignment="Right" VerticalAlignment="Center" Command="{TemplateBinding UnselectAllCommand}" Content="{me:ToolIcon Kind=Close}" ToolTip="{me:ShortcutResource UnselectAll,                                                                   ShortcutKey='Ctrl+Maj+A'}" Visibility="{Binding UnselectAllCommand, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static c:NullToVisibilityConverter.CollapsedIfNull}}" />
            </Grid>
          </ctrl:Card>
          <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen" Value="true">
              <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
            </Trigger>
            <Trigger Property="Header" Value="{x:Null}">
              <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="true">
              <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="p:IconAssist.Alignment" Value="Left" />
    <Setter Property="p:IconAssist.Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
    <Style.Triggers>
      <Trigger Property="SelectedCount" Value="0">
        <Setter Property="Visibility" Value="{Binding VisibilityWhenEmpty, RelativeSource={RelativeSource Self}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.SelectionCommandsBar.Alternate" TargetType="{x:Type ctrl:SelectionCommandsBar}" BasedOn="{StaticResource MyNet.Styles.SelectionCommandsBar}">
    <Style.Resources>
      <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" />
      <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.ToolBar}" />
      <Style TargetType="{x:Type ctrl:DropDownButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.ToolBar}" />
      <Style TargetType="{x:Type ctrl:SplitButton}" BasedOn="{StaticResource MyNet.Styles.SplitButton.ToolBar}" />
      <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MyNet.Styles.ComboBox.ToolBar}" />
      <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox.ToolBar}" />
      <Style TargetType="{x:Type ctrl:MultiComboBox}" BasedOn="{StaticResource MyNet.Styles.MultiComboBox.ToolBar}" />
      <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource MyNet.Styles.Button.ToolBar}" />
      <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.ToolBar}" />
    </Style.Resources>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="VisibilityWhenEmpty" Value="Visible" />
  </Style>
  <Style x:Key="MyNet.Styles.ListViewItem" TargetType="{x:Type ListViewItem}">
    <Style.Resources>
      <Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource MyNet.Styles.ToolBar.Tools}">
        <Setter Property="Visibility" Value="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Converter={x:Static c:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
      </Style>
    </Style.Resources>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Control.Border}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ContextMenu" Value="{Binding Path=(p:ListViewAssist.ItemContextMenu), FallbackValue={x:Null}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" />
    <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="MinHeight" Value="{Binding Path=(p:ListViewAssist.ItemMinHeight), FallbackValue=0, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border Margin="{TemplateBinding Margin}" Padding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListViewAssist.ListViewItemPadding)}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                    <VisualTransition.GeneratedEasingFunction>
                      <CircleEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Normal" />
                <VisualState Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="*" To="Selected">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="*" To="SelectedUnfocused">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Selected" To="Unselected">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unselected" />
                <VisualState Name="SelectedUnfocused">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBackgroundBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Border x:Name="MouseOverBorder" Background="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" />
              <Border x:Name="SelectedBackgroundBorder" Background="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" />
              <ctrl:Ripple x:Name="Ripple" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Feedback="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                  <GridViewRowPresenter.Resources>
                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                      <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                      <Setter Property="TextWrapping" Value="NoWrap" />
                    </Style>
                  </GridViewRowPresenter.Resources>
                </GridViewRowPresenter>
              </ctrl:Ripple>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="False">
              <Setter TargetName="MouseOverBorder" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="Ripple" Property="Feedback" Value="Transparent" />
              <Setter TargetName="SelectedBackgroundBorder" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverBackground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverForeground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ListBoxItemAssist.ShowSelection" Value="{Binding Path=(p:ListBoxItemAssist.ShowSelection), RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="p:ListViewAssist.ListViewItemPadding" Value="0" />
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsMouseOverForeground), RelativeSource={RelativeSource Self}}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(p:ListBoxItemAssist.ShowSelection)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Foreground" Value="{Binding Path=(p:ListBoxItemAssist.IsSelectedForeground), RelativeSource={RelativeSource Self}}" />
      </MultiDataTrigger>
      <Trigger Property="ItemsControl.AlternationIndex" Value="1">
        <Setter Property="Background" Value="{me:BrushBinding SelfPath=Foreground, Opacity=0.03}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ListView" TargetType="{x:Type ListView}">
    <Setter Property="AlternationCount" Value="2" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.FontSize)}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MyNet.Styles.ListViewItem}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsVirtualizing="{TemplateBinding VirtualizingPanel.IsVirtualizing}" VirtualizationMode="{TemplateBinding VirtualizingPanel.VirtualizationMode}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="SelectionMode" Value="Extended" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Grid>
            <ctrl:DynamicScrollViewer Style="{StaticResource MyNet.Style.DynamicScrollViewer.Embedded.ListView}" CanContentScroll="{Binding Path=(ScrollViewer.CanContentScroll), RelativeSource={RelativeSource TemplatedParent}}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
              <ItemsPresenter />
            </ctrl:DynamicScrollViewer>
            <Grid p:BusyAssist.AttachService="{Binding Path=(b:ItemsControlAsyncBehavior.BusyService), RelativeSource={RelativeSource TemplatedParent}}" p:BusyAssist.Style="{StaticResource MyNet.Styles.BusyControl.Dark.Foreground}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
    <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverBackground" Value="{me:BrushBinding SelfPath=Foreground, Opacity={StaticResource MyNet.Opacity.Hovered}}" />
    <Setter Property="p:ListBoxItemAssist.IsMouseOverForeground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Primary.Foreground}" />
    <Setter Property="p:ListViewAssist.AutoResizeIsEnabled" Value="True" />
    <Setter Property="p:ListViewAssist.CanSort" Value="True" />
    <Style.Triggers>
      <Trigger Property="IsGrouping" Value="true">
        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MyNet.Styles.ListView.Accent" TargetType="{x:Type ListView}" BasedOn="{StaticResource MyNet.Styles.ListView}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListView.Foreground" TargetType="{x:Type ListView}" BasedOn="{StaticResource MyNet.Styles.ListView}">
    <Setter Property="p:ListBoxItemAssist.IsSelectedBackground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="p:ListBoxItemAssist.IsSelectedForeground" Value="{me:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="MyNet.Styles.ListView.Small" TargetType="{x:Type ListView}" BasedOn="{StaticResource MyNet.Styles.ListView}">
    <Setter Property="p:ListViewAssist.HeaderHeight" Value="35" />
  </Style>
</ResourceDictionary>