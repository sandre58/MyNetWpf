<UserControl x:Class="MyNet.Wpf.Presentation.Views.Shell.NotificationsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:handlers="clr-namespace:MyNet.UI.Services.Handlers;assembly=MyNet.UI"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:my="http://mynet.com/xaml/themes"
             xmlns:notif="clr-namespace:MyNet.UI.Notifications;assembly=MyNet.UI"
             xmlns:vm="clr-namespace:MyNet.UI.ViewModels.Shell;assembly=MyNet.UI"
             Width="360"
             d:DataContext="{d:DesignInstance Type=vm:NotificationsViewModel}"
             d:DesignHeight="450"
             d:DesignWidth="800"
             mc:Ignorable="d">
    <UserControl.Resources>
        <my:BindingProxy x:Key="Proxy" Data="{Binding}" />

        <DataTemplate DataType="{x:Type notif:ClosableNotification}">
            <my:Card>
                <DockPanel>
                    <Label x:Name="Ellipse"
                           Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Foreground}"
                           Width="40"
                           Height="40"
                           Margin="{StaticResource MyNet.Margins.Medium.Horizontal}"
                           VerticalAlignment="Top"
                           DockPanel.Dock="Left">
                        <my:PackIcon x:Name="Icon" Width="30" Height="30" />
                    </Label>
                    <DockPanel>
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}"
                                   Margin="{StaticResource MyNet.Margins.Default.Bottom}"
                                   DockPanel.Dock="Top"
                                   FontWeight="{StaticResource MyNet.Font.Weight.Header}"
                                   Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type FrameworkElement}}}"
                                   Opacity="{StaticResource MyNet.Opacity.Default}"
                                   Text="{Binding Title, Converter={x:Static my:StringConverter.ToUpper}, Mode=OneTime}"
                                   TextWrapping="Wrap"
                                   Visibility="{Binding Title, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}}" />
                        <TextBlock Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type FrameworkElement}}}"
                                   Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                   Text="{Binding Message, Mode=OneTime}"
                                   TextWrapping="Wrap" />
                    </DockPanel>
                </DockPanel>
            </my:Card>

            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Success}">
                    <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.Check}" />
                    <Setter TargetName="Ellipse" Property="Background" Value="{DynamicResource MyNet.Brushes.Positive}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Error}">
                    <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.Remove}" />
                    <Setter TargetName="Ellipse" Property="Background" Value="{DynamicResource MyNet.Brushes.Negative}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Warning}">
                    <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.WarningCircleOutline}" />
                    <Setter TargetName="Ellipse" Property="Background" Value="{DynamicResource MyNet.Brushes.Warning}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Information}">
                    <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.InformationCircleOutline}" />
                    <Setter TargetName="Ellipse" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type notif:ActionNotification}">
            <Button Style="{StaticResource MyNet.Styles.Button.Filled}"
                    Padding="{StaticResource MyNet.Margins.Medium}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    my:ThemeAssist.CornerRadius="{StaticResource MyNet.CornerRadius.Container}"
                    BorderThickness="0"
                    Command="{Binding Data.ExecuteActionCommand, Source={StaticResource Proxy}}"
                    CommandParameter="{Binding}"
                    Effect="{StaticResource MyNet.Shadows.Elevation1}"
                    FontSize="{StaticResource MyNet.Font.Size}">
                <DockPanel>
                    <Label x:Name="Ellipse"
                           Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Foreground}"
                           Width="40"
                           Height="40"
                           Margin="{StaticResource MyNet.Margins.Medium.Horizontal}"
                           VerticalAlignment="Top"
                           DockPanel.Dock="Left">
                        <my:PackIcon x:Name="Icon" Width="30" Height="30" />
                    </Label>
                    <DockPanel>
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}"
                                   Margin="{StaticResource MyNet.Margins.Default.Bottom}"
                                   DockPanel.Dock="Top"
                                   FontWeight="{StaticResource MyNet.Font.Weight.Header}"
                                   Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type FrameworkElement}}}"
                                   Opacity="{StaticResource MyNet.Opacity.Default}"
                                   Text="{Binding Title, Converter={x:Static my:StringConverter.ToUpper}, Mode=OneTime}"
                                   TextWrapping="Wrap"
                                   Visibility="{Binding Title, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}}" />
                        <TextBlock Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type FrameworkElement}}}"
                                   Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                   Text="{Binding Message, Mode=OneTime}"
                                   TextWrapping="Wrap" />
                    </DockPanel>
                </DockPanel>
            </Button>

            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Success}">
                    <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.Check}" />
                    <Setter TargetName="Ellipse" Property="Background" Value="{DynamicResource MyNet.Brushes.Positive}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Error}">
                    <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.Remove}" />
                    <Setter TargetName="Ellipse" Property="Background" Value="{DynamicResource MyNet.Brushes.Negative}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Warning}">
                    <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.WarningCircleOutline}" />
                    <Setter TargetName="Ellipse" Property="Background" Value="{DynamicResource MyNet.Brushes.Warning}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Severity}" Value="{x:Static notif:NotificationSeverity.Information}">
                    <Setter TargetName="Icon" Property="Kind" Value="{x:Static md:PackIconKind.InformationCircleOutline}" />
                    <Setter TargetName="Ellipse" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type handlers:FileNotification}">
            <my:Card>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <my:PackIcon x:Name="Icon"
                             Width="40"
                             Height="40"
                             Margin="{StaticResource MyNet.Margins.Default.Left}"
                             VerticalAlignment="Center"
                             Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type FrameworkElement}}}"
                             Kind="FileExport" />
                    <StackPanel Grid.Column="1"
                            Margin="{StaticResource MyNet.Margins.VeryLarge.Horizontal}"
                            VerticalAlignment="Center"
                            Orientation="Vertical">
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}"
                               Margin="{StaticResource MyNet.Margins.Default.Bottom}"
                               FontWeight="{StaticResource MyNet.Font.Weight.Header}"
                               Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type FrameworkElement}}}"
                               Opacity="{StaticResource MyNet.Opacity.Default}"
                               Text="{Binding Title, Converter={x:Static my:StringConverter.ToUpper}, Mode=OneTime}"
                               TextWrapping="Wrap"
                               Visibility="{Binding Title, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}}" />
                        <TextBlock Margin="{StaticResource MyNet.Margins.Default.Bottom}"
                               Foreground="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type FrameworkElement}}}"
                               Opacity="{StaticResource MyNet.Opacity.Secondary}"
                               Text="{Binding Message, Mode=OneTime}"
                               TextWrapping="Wrap" />
                        <Button Style="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" Command="{Binding OpenFileCommand}">
                            <TextBlock Text="{Binding FilePath}" TextWrapping="Wrap" />
                        </Button>
                    </StackPanel>
                </Grid>
            </my:Card>
        </DataTemplate>
    </UserControl.Resources>

    <Grid Margin="0 45 0 0">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <my:DynamicScrollViewer Grid.Row="1"
                                Padding="{StaticResource MyNet.Margins.Medium}"
                                HorizontalAlignment="Stretch"
                                HorizontalScrollBarVisibility="Disabled"
                                VerticalScrollBarVisibility="Auto">
            <ItemsControl HorizontalAlignment="Stretch" ItemsSource="{Binding Notifications.Items}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Grid MinHeight="80" Margin="{StaticResource MyNet.Margins.Default}">
                            <ContentControl VerticalAlignment="Stretch" Content="{Binding}" />
                            <Button x:Name="CloseButton"
                                    Style="{StaticResource MyNet.Styles.Button.Icon.Tool}"
                                    Margin="{StaticResource MyNet.Margins.Default}"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Top"
                                    Command="{Binding Data.CloseCommand, Source={StaticResource Proxy}}"
                                    CommandParameter="{Binding}"
                                    Content="{my:ToolIcon Kind=Close}"
                                    ToolTip="{my:Resource Close}"
                                    Visibility="{Binding IsClosable, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </my:DynamicScrollViewer>

        <Button Style="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}"
                Grid.Row="2"
                Margin="{StaticResource MyNet.Margins.Medium}"
                HorizontalAlignment="Right"
                Command="{Binding ClearCommand}"
                Content="{my:Resource ClearNotifications}"
                DockPanel.Dock="Bottom" />
    </Grid>
</UserControl>
