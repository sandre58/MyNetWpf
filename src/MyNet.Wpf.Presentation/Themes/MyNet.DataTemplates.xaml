<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:enums="clr-namespace:MyNet.Utilities.Comparaison;assembly=MyNet.Utilities"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:my="http://mynet.com/xaml/themes"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:units="clr-namespace:MyNet.Utilities.Units;assembly=MyNet.Utilities"
                    xmlns:vm="clr-namespace:MyNet.UI.ViewModels.List.Filtering;assembly=MyNet.UI"
                    xmlns:vmF="clr-namespace:MyNet.UI.ViewModels.List.Filtering.Filters;assembly=MyNet.UI">

    <ResourceDictionary.MergedDictionaries>
        <my:SharedResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Themes/MyNet.Styles.xaml" />
        <my:SharedResourceDictionary Source="pack://application:,,,/MyNet.Wpf.Presentation;component/Themes/MyNet.Styles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <sys:Double x:Key="MyNet.Widths.Filters.Operator">134</sys:Double>

    <DataTemplate DataType="{x:Type vmF:StringFilterViewModel}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Row="0"
                      Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:StringOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />
            <TextBox x:Name="ValueControl"
                     Style="{StaticResource MyNet.Styles.TextBox}"
                     Grid.Row="0"
                     Grid.Column="2"
                     HorizontalAlignment="Stretch"
                     my:FocusAssist.IsDefault="True"
                     Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:BooleanFilterViewModel}">
        <ListBox Style="{StaticResource MyNet.Styles.ListBox.Toggle.Foreground}"
                 my:FocusAssist.IsDefault="True"
                 SelectedValue="{Binding Value}"
                 SelectedValuePath="DataContext">
            <ListBoxItem my:IconAssist.Icon="{my:Icon Kind=Check}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource MyNet.Brushes.Positive}"
                         my:ListBoxItemAssist.IsSelectedForeground="{DynamicResource MyNet.Brushes.White}"
                         Content="{my:Resource Yes}"
                         DataContext="{x:Static my:Booleans.True}" />
            <ListBoxItem Content="{my:Icon Kind=CircleOffOutline}" DataContext="{x:Null}" Visibility="{Binding AllowNullValue, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <ListBoxItem my:IconAssist.Icon="{my:Icon Kind=Close}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource MyNet.Brushes.Negative}"
                         my:ListBoxItemAssist.IsSelectedForeground="{DynamicResource MyNet.Brushes.White}"
                         Content="{my:Resource No}"
                         DataContext="{x:Static my:Booleans.False}" />
        </ListBox>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:IntegerFilterViewModel}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:ComplexComparableOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />
            <Grid Grid.Column="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="colFrom" Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition x:Name="colTo" Width="*" />
                </Grid.ColumnDefinitions>
                <my:NumericUpDown x:Name="From"
                                  Style="{StaticResource MyNet.Styles.NumericUpDown}"
                                  Grid.Column="0"
                                  HorizontalAlignment="Stretch"
                                  my:FocusAssist.IsDefault="True"
                                  Maximum="{Binding Maximum}"
                                  Minimum="{Binding Minimum}"
                                  Value="{Binding From}" />
                <TextBlock x:Name="And"
                           Style="{StaticResource MyNet.Styles.TextBlock.Disablable}"
                           Grid.Column="1"
                           Margin="{StaticResource MyNet.Margins.Medium.Horizontal}"
                           Text="{my:Resource And}" />
                <my:NumericUpDown x:Name="To"
                                  Style="{StaticResource MyNet.Styles.NumericUpDown}"
                                  Grid.Column="2"
                                  HorizontalAlignment="Stretch"
                                  Maximum="{Binding Maximum}"
                                  Minimum="{Binding Minimum}"
                                  Value="{my:NullableBinding To}" />
            </Grid>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.EqualsTo}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.GreaterEqualThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.GreaterThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.LessEqualThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="From" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colFrom" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.LessThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="From" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colFrom" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.NotEqualsTo}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:DateFilterViewModel}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:ComplexComparableOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />
            <Grid Grid.Column="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="colFrom" Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition x:Name="colTo" Width="*" />
                </Grid.ColumnDefinitions>
                <DatePicker x:Name="From"
                            Style="{StaticResource MyNet.Styles.DatePicker}"
                            Grid.Column="0"
                            HorizontalAlignment="Stretch"
                            my:FocusAssist.IsDefault="True"
                            SelectedDate="{Binding From}" />
                <TextBlock x:Name="And"
                           Style="{StaticResource MyNet.Styles.TextBlock.Disablable}"
                           Grid.Column="1"
                           Margin="{StaticResource MyNet.Margins.Medium.Horizontal}"
                           VerticalAlignment="Center"
                           Text="{my:Resource And}" />
                <DatePicker x:Name="To"
                            Style="{StaticResource MyNet.Styles.DatePicker}"
                            Grid.Column="2"
                            HorizontalAlignment="Stretch"
                            SelectedDate="{Binding To}" />
            </Grid>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.EqualsTo}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.GreaterEqualThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.GreaterThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.LessEqualThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="From" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colFrom" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.LessThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="From" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colFrom" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.NotEqualsTo}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:TimeSpanFilterViewModel}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:ComplexComparableOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />
            <Grid Grid.Column="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="colFrom" Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition x:Name="colTo" Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <my:NumericUpDown x:Name="From"
                                  Style="{StaticResource MyNet.Styles.NumericUpDown}"
                                  Grid.Column="0"
                                  HorizontalAlignment="Stretch"
                                  my:FocusAssist.IsDefault="True"
                                  Maximum="{Binding Maximum}"
                                  Minimum="{Binding Minimum}"
                                  Value="{my:NullableBinding From}" />
                <TextBlock x:Name="And"
                           Style="{StaticResource MyNet.Styles.TextBlock.Disablable}"
                           Grid.Column="1"
                           Margin="{StaticResource MyNet.Margins.Medium.Horizontal}"
                           Text="{my:Resource And}" />
                <my:NumericUpDown x:Name="To"
                                  Style="{StaticResource MyNet.Styles.NumericUpDown}"
                                  Grid.Column="2"
                                  HorizontalAlignment="Stretch"
                                  Maximum="{Binding Maximum}"
                                  Minimum="{Binding Minimum}"
                                  Value="{my:NullableBinding To}" />
                <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                          Grid.Column="3"
                          Width="125"
                          Margin="{StaticResource MyNet.Margins.Medium.Left}"
                          DisplayMemberPath="Display"
                          IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                          IsReadOnly="{Binding IsReadOnly}"
                          ItemsSource="{my:EnumSource {x:Type units:TimeUnit}}"
                          SelectedValue="{Binding Unit, Mode=TwoWay}"
                          SelectedValuePath="Value" />
            </Grid>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.EqualsTo}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.GreaterEqualThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.GreaterThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.LessEqualThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="From" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colFrom" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.LessThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="From" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colFrom" Property="Width" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.NotEqualsTo}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="colTo" Property="Width" Value="0" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:EnumValueFilterViewModel}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:BinaryOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />

            <ComboBox x:Name="ValueControl"
                      Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="2"
                      HorizontalAlignment="Stretch"
                      my:FocusAssist.IsDefault="True"
                      ItemsSource="{Binding AvailableValues, Mode=OneWay}"
                      SelectedValue="{Binding Value}"
                      SelectedValuePath="Value" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:EnumValuesFilterViewModel}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:BinaryOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />

            <my:MultiComboBox x:Name="ValueControl"
                              Style="{StaticResource MyNet.Styles.MultiComboBox}"
                              Grid.Column="2"
                              HorizontalAlignment="Stretch"
                              my:FocusAssist.IsDefault="True"
                              ItemsSource="{Binding AvailableValues, Mode=OneWay}"
                              MaxDropDownHeight="350"
                              SelectedValuePath="Value"
                              SelectionMode="Multiple">
                <i:Interaction.Behaviors>
                    <my:ListBoxSelectionBehavior SelectedValues="{Binding Values}" />
                </i:Interaction.Behaviors>
            </my:MultiComboBox>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:EnumerationValueFilterViewModel}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:BinaryOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />

            <ComboBox x:Name="ValueControl"
                      Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="2"
                      HorizontalAlignment="Stretch"
                      my:FocusAssist.IsDefault="True"
                      ItemsSource="{Binding AvailableValues, Mode=OneWay}"
                      SelectedValue="{Binding Value}"
                      SelectedValuePath="Value" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:EnumerationValuesFilterViewModel}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:BinaryOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />

            <my:MultiComboBox x:Name="ValueControl"
                              Style="{StaticResource MyNet.Styles.MultiComboBox}"
                              Grid.Column="2"
                              HorizontalAlignment="Stretch"
                              my:FocusAssist.IsDefault="True"
                              ItemsSource="{Binding AvailableValues, Mode=OneWay}"
                              MaxDropDownHeight="350"
                              SelectedValuePath="Value"
                              SelectionMode="Multiple">
                <i:Interaction.Behaviors>
                    <my:ListBoxSelectionBehavior SelectedValues="{Binding Values}" />
                </i:Interaction.Behaviors>
            </my:MultiComboBox>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:SelectedValueFilterViewModel}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:BinaryOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />

            <ComboBox x:Name="ValueControl"
                      Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="2"
                      HorizontalAlignment="Stretch"
                      my:FocusAssist.IsDefault="True"
                      ItemsSource="{Binding AvailableValues, Mode=OneWay}"
                      SelectedValue="{Binding Value}"
                      SelectedValuePath="Id" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:SelectedValuesFilterViewModel}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:BinaryOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />

            <my:MultiComboBox x:Name="ValueControl"
                              Style="{StaticResource MyNet.Styles.MultiComboBox}"
                              Grid.Column="2"
                              HorizontalAlignment="Stretch"
                              my:FocusAssist.IsDefault="True"
                              ItemsSource="{Binding AvailableValues, Mode=OneWay}"
                              MaxDropDownHeight="350"
                              SelectedValuePath="{Binding SelectedValuePath}"
                              SelectionMode="Multiple">
                <i:Interaction.Behaviors>
                    <my:ListBoxSelectionBehavior SelectedValues="{Binding Values}" />
                </i:Interaction.Behaviors>
            </my:MultiComboBox>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:CountriesFilterViewModel}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:BinaryOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />

            <my:MultiComboBox x:Name="ValueControl"
                              Style="{StaticResource MyNet.Styles.MultiComboBox.Country}"
                              Grid.Column="2"
                              HorizontalAlignment="Stretch"
                              my:FocusAssist.IsDefault="True"
                              MaxDropDownHeight="350">
                <i:Interaction.Behaviors>
                    <my:ListBoxSelectionBehavior SelectedValues="{Binding Values}" />
                </i:Interaction.Behaviors>
            </my:MultiComboBox>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmF:CountryFilterViewModel}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ComboBox Grid.Column="0"
                      Width="{StaticResource MyNet.Widths.Filters.Operator}"
                      DisplayMemberPath="Display"
                      IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                      IsReadOnly="{Binding IsReadOnly}"
                      ItemsSource="{my:EnumSource {x:Type enums:BinaryOperator}}"
                      SelectedValue="{Binding Operator, Mode=TwoWay}"
                      SelectedValuePath="Value" />

            <ComboBox x:Name="ValueControl"
                      Style="{StaticResource MyNet.Styles.MultiComboBox.Country}"
                      Grid.Column="2"
                      HorizontalAlignment="Stretch"
                      my:FocusAssist.IsDefault="True"
                      ItemsSource="{Binding AvailableValues, Mode=OneWay}"
                      MaxDropDownHeight="350"
                      SelectedValue="{Binding Value}" />
        </Grid>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:SelectableCompositeFilterViewModel}">
        <Grid>
            <Border Background="{DynamicResource MyNet.Brushes.Control.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Container}" Opacity="{StaticResource MyNet.Opacity.Disabled}" />

            <Grid Margin="{StaticResource MyNet.Margins.Default}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="60" />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="AUto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="5" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <CheckBox x:Name="IsEnabled" Style="{StaticResource MyNet.Styles.CheckBox}" IsChecked="{Binding IsEnabled}" />

                <Button Style="{StaticResource MyNet.Styles.Button.Icon.Tool}"
                        Grid.Column="2"
                        Command="{Binding DataContext.MoveDownCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
                        CommandParameter="{Binding}"
                        Content="{my:MediumIcon Kind=ChevronDown}"
                        ToolTip="{my:Resource MoveDown}" />
                <Button Style="{StaticResource MyNet.Styles.Button.Icon.Tool}"
                        Grid.Column="3"
                        Command="{Binding DataContext.MoveUpCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
                        CommandParameter="{Binding}"
                        Content="{my:MediumIcon Kind=ChevronUp}"
                        ToolTip="{my:Resource MoveUp}" />
                <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                          Grid.Column="5"
                          HorizontalAlignment="Stretch"
                          DisplayMemberPath="Display"
                          IsEnabled="{Binding IsEnabled}"
                          ItemsSource="{my:EnumSource {x:Type enums:LogicalOperator}}"
                          SelectedValue="{Binding Operator, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          SelectedValuePath="Value" />
                <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                          Grid.Column="7"
                          HorizontalAlignment="Stretch"
                          DisplayMemberPath="DisplayName.Value"
                          IsEnabled="{Binding IsEnabled}"
                          ItemsSource="{Binding Filters}"
                          SelectedItem="{Binding SelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <ContentControl Grid.Row="2"
                                Grid.ColumnSpan="8"
                                Content="{Binding Item}"
                                IsEnabled="{Binding IsEnabled}" />
                <Button x:Name="RemoveButton"
                        Style="{StaticResource MyNet.Styles.Button.Icon.Remove}"
                        Grid.RowSpan="3"
                        Grid.Column="9"
                        Command="{Binding DataContext.RemoveCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
                        CommandParameter="{Binding}" />
            </Grid>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:CompositeFilterViewModel}">
        <Grid>
            <Border Background="{DynamicResource MyNet.Brushes.Control.Background}" CornerRadius="{StaticResource MyNet.CornerRadius.Container}" Opacity="{StaticResource MyNet.Opacity.Disabled}" />

            <Grid Margin="{StaticResource MyNet.Margins.Default}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="60" />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="AUto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="5" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <CheckBox x:Name="IsEnabled" Style="{StaticResource MyNet.Styles.CheckBox}" IsChecked="{Binding IsEnabled}" />

                <Button Style="{StaticResource MyNet.Styles.Button.Icon.Tool}"
                        Grid.Column="2"
                        Command="{Binding DataContext.MoveDownCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
                        CommandParameter="{Binding}"
                        Content="{my:MediumIcon Kind=ChevronDown}"
                        ToolTip="{my:Resource MoveDown}" />
                <Button Style="{StaticResource MyNet.Styles.Button.Icon.Tool}"
                        Grid.Column="3"
                        Command="{Binding DataContext.MoveUpCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
                        CommandParameter="{Binding}"
                        Content="{my:MediumIcon Kind=ChevronUp}"
                        ToolTip="{my:Resource MoveUp}" />
                <ComboBox Style="{StaticResource MyNet.Styles.ComboBox}"
                          Grid.Column="5"
                          HorizontalAlignment="Stretch"
                          DisplayMemberPath="Display"
                          IsEnabled="{Binding IsEnabled}"
                          ItemsSource="{my:EnumSource {x:Type enums:LogicalOperator}}"
                          SelectedValue="{Binding Operator, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          SelectedValuePath="Value" />
                <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Disablable}"
                           Grid.Column="7"
                           FontWeight="Bold"
                           IsEnabled="{Binding IsEnabled}"
                           Text="{Binding DisplayName.Value}" />
                <ContentControl Grid.Row="2"
                                Grid.ColumnSpan="8"
                                Content="{Binding Item}"
                                IsEnabled="{Binding IsEnabled}" />
                <Button x:Name="RemoveButton"
                        Style="{StaticResource MyNet.Styles.Button.Icon.Remove}"
                        Grid.RowSpan="3"
                        Grid.Column="9"
                        Command="{Binding DataContext.RemoveCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
                        CommandParameter="{Binding}" />
            </Grid>
        </Grid>
    </DataTemplate>

</ResourceDictionary>